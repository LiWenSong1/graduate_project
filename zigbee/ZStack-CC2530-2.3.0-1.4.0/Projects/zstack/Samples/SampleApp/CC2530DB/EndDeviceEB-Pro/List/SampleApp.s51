///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        27/May/2023  13:28:59 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\So /
//                          urce\SampleApp.c                                  /
//    Command line       =  -f C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg    /
//                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f   /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\86158\Desktop\8.Æ /
//                          øÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zsta /
//                          ck\Samples\SampleApp\Source\SampleApp.c -D        /
//                          ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D         /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\EndDeviceEB-Pro\List\ -lA                  /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\EndDeviceEB-Pro\List\ --diag_suppress      /
//                          Pe001,Pa010 -o C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ /
//                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\ -e     /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷ /
//                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\SOURCE\ -I                /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\ZMAIN\TI2530DB\ -I                /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\MT\ -I           /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I  /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC253 /
//                          0EB\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStac /
//                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU /
//                          \CCSOC\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZS /
//                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ /
//                          INCLUDE\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\Z /
//                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC /
//                          K\AF\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC /
//                          \ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-C /
//                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ /
//                           -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC /
//                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\   /
//                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\    /
//                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I  /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\  /
//                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDAT /
//                          A\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD /
//                          E\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L /
//                          EVEL\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ /
//                          ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS /
//                          \MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz            /
//                          --require_prototypes                              /
//    List file          =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\EndDeviceEB-Pro\List\SampleApp.s51         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB_FROM_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_GT_X
        EXTERN ?UL_TO_FLT
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Get_Maopi?relay
        FUNCTION ??Get_Maopi?relay,0203H
        PUBLIC ??Get_Weight?relay
        FUNCTION ??Get_Weight?relay,0203H
        PUBLIC ??HX711_Read?relay
        FUNCTION ??HX711_Read?relay,0203H
        PUBLIC ??ReSetWifi?relay
        FUNCTION ??ReSetWifi?relay,0203H
        PUBLIC ??ReadGasData?relay
        FUNCTION ??ReadGasData?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC ??SampleApp_Send_P2P_Message?relay
        FUNCTION ??SampleApp_Send_P2P_Message?relay,0203H
        PUBLIC ??USART_Receive_messege?relay
        FUNCTION ??USART_Receive_messege?relay,0203H
        PUBLIC ??get_data?relay
        FUNCTION ??get_data?relay,0203H
        PUBLIC ??publish_msg?relay
        FUNCTION ??publish_msg?relay,0203H
        PUBLIC ??send_onenet?relay
        FUNCTION ??send_onenet?relay,0203H
        PUBLIC ??sub_msg?relay
        FUNCTION ??sub_msg?relay,0203H
        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC GasData
        PUBLIC Get_Maopi
        FUNCTION Get_Maopi,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Get_Weight
        FUNCTION Get_Weight,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC HX711_Buffer
        PUBLIC HX711_Read
        FUNCTION HX711_Read,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC ReSetWifi
        FUNCTION ReSetWifi,021203H
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ReadGasData
        FUNCTION ReadGasData,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 118, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_Send_P2P_Message
        FUNCTION SampleApp_Send_P2P_Message,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC Sethour
        PUBLIC Setmiunte
        PUBLIC TxBuf
        PUBLIC USART_Receive_messege
        FUNCTION USART_Receive_messege,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 149, STACK
        PUBLIC Weight
        PUBLIC Weight_Maopi
        PUBLIC Weight_Shiwu
        PUBWEAK _A_P0
        PUBWEAK __Constant_0
        PUBWEAK __Constant_43d70000
        PUBLIC con_succ
        PUBLIC count
        PUBLIC flat
        PUBLIC food_flag
        PUBLIC get_data
        FUNCTION get_data,0a1203H
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC getmaopi_flag
        PUBLIC publish_msg
        FUNCTION publish_msg,021203H
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 76, STACK
        PUBLIC send_onenet
        FUNCTION send_onenet,021203H
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 76, STACK
        PUBLIC sub_msg
        FUNCTION sub_msg,021203H
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 76, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
Delay_ms            SYMBOL "Delay_ms"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
aps_FindGroup       SYMBOL "aps_FindGroup"
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
memset              SYMBOL "memset"
strcpy              SYMBOL "strcpy"
strlen              SYMBOL "strlen"
strstr              SYMBOL "strstr"
sprintf             SYMBOL "sprintf"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
HalLedBlink         SYMBOL "HalLedBlink"
AF_DataRequest      SYMBOL "AF_DataRequest"
LCD_CLS             SYMBOL "LCD_CLS"
LCD_P16x16Ch        SYMBOL "LCD_P16x16Ch"
LCD_P8x16Str        SYMBOL "LCD_P8x16Str"
Delay_us            SYMBOL "Delay_us"
DHT11               SYMBOL "DHT11"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DHT11?relay       SYMBOL "?relay", DHT11
??Delay_ms?relay    SYMBOL "?relay", Delay_ms
??Delay_us?relay    SYMBOL "?relay", Delay_us
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??LCD_CLS?relay     SYMBOL "?relay", LCD_CLS
??LCD_P16x16Ch?relay SYMBOL "?relay", LCD_P16x16Ch
??LCD_P8x16Str?relay SYMBOL "?relay", LCD_P8x16Str
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??aps_FindGroup?relay SYMBOL "?relay", aps_FindGroup
??aps_RemoveGroup?relay SYMBOL "?relay", aps_RemoveGroup
??memset?relay      SYMBOL "?relay", memset
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
??strcpy?relay      SYMBOL "?relay", strcpy
??strlen?relay      SYMBOL "?relay", strlen
??strstr?relay      SYMBOL "?relay", strstr
Get_Maopi           SYMBOL "Get_Maopi"
??Get_Maopi?relay   SYMBOL "?relay", Get_Maopi
Get_Weight          SYMBOL "Get_Weight"
??Get_Weight?relay  SYMBOL "?relay", Get_Weight
HX711_Read          SYMBOL "HX711_Read"
??HX711_Read?relay  SYMBOL "?relay", HX711_Read
ReSetWifi           SYMBOL "ReSetWifi"
??ReSetWifi?relay   SYMBOL "?relay", ReSetWifi
ReadGasData         SYMBOL "ReadGasData"
??ReadGasData?relay SYMBOL "?relay", ReadGasData
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage
SampleApp_Send_P2P_Message SYMBOL "SampleApp_Send_P2P_Message"
??SampleApp_Send_P2P_Message?relay SYMBOL "?relay", SampleApp_Send_P2P_Message
USART_Receive_messege SYMBOL "USART_Receive_messege"
??USART_Receive_messege?relay SYMBOL "?relay", USART_Receive_messege
get_data            SYMBOL "get_data"
??get_data?relay    SYMBOL "?relay", get_data
publish_msg         SYMBOL "publish_msg"
??publish_msg?relay SYMBOL "?relay", publish_msg
send_onenet         SYMBOL "send_onenet"
??send_onenet?relay SYMBOL "?relay", send_onenet
sub_msg             SYMBOL "sub_msg"
??sub_msg?relay     SYMBOL "?relay", sub_msg

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Delay_ms
        FUNCTION Delay_ms,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 147, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strstr
        FUNCTION strstr,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 149, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_CLS
        FUNCTION LCD_CLS,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_P16x16Ch
        FUNCTION LCD_P16x16Ch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_P8x16Str
        FUNCTION LCD_P8x16Str,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Delay_us
        FUNCTION Delay_us,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11
        FUNCTION DHT11,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DHT11?relay
        FUNCTION ??DHT11?relay,00H
        EXTERN ??Delay_ms?relay
        FUNCTION ??Delay_ms?relay,00H
        EXTERN ??Delay_us?relay
        FUNCTION ??Delay_us?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??LCD_CLS?relay
        FUNCTION ??LCD_CLS?relay,00H
        EXTERN ??LCD_P16x16Ch?relay
        FUNCTION ??LCD_P16x16Ch?relay,00H
        EXTERN ??LCD_P8x16Str?relay
        FUNCTION ??LCD_P8x16Str?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??aps_FindGroup?relay
        FUNCTION ??aps_FindGroup?relay,00H
        EXTERN ??aps_RemoveGroup?relay
        FUNCTION ??aps_RemoveGroup?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strcpy?relay
        FUNCTION ??strcpy?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN ??strstr?relay
        FUNCTION ??strstr?relay,00H
        EXTERN ucharRH_data_H
        EXTERN ucharT_data_H

// C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 #include <ioCC2530.h>

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   65 
//   66 #include "SampleApp.h"
//   67 #include "SampleAppHw.h"
//   68 
//   69 #include "OnBoard.h"
//   70 
//   71 /* HAL */
//   72 #include "hal_lcd.h"
//   73 #include "hal_led.h"
//   74 #include "hal_key.h"
//   75 #include "MT_UART.h"
//   76 #include "MT_APP.h"
//   77 #include "MT.h"
//   78 //#include "DS1302.h"
//   79 #include "DHT11.h"
//   80 #include <stdio.h>
//   81 #include <string.h>
//   82 
//   83 /*********************************************************************
//   84  * MACROS
//   85  */
//   86 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])

        RSEG XDATA_I:XDATA:NOROOT(0)
//   87 uint8 flat = 1;
flat:
        DATA8
        DS 1
        REQUIRE `?<Initializer for flat>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 uint8 con_succ=0;
con_succ:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   89 uint8 food_flag=0;
food_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   90 //»ñÈ¡Ê³ÎïÖØÁ¿¶¨ÒåµÄ±äÁ¿

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   91 uint8 getmaopi_flag=0;
getmaopi_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   92 unsigned long HX711_Buffer = 0;
HX711_Buffer:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   93 unsigned long  Weight_Maopi = 0,Weight_Shiwu = 0;
Weight_Maopi:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
Weight_Shiwu:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   94 float Weight = 0;
Weight:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   95 uint16 count=0;
count:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   96 uint8 Sethour,Setmiunte;
Sethour:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
Setmiunte:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   97 #define GapValue 430
//   98 //ÐèÒªÐÞ¸ÄµÄÊÇÏÂÃæ4ÐÐ
//   99 #define  devkey   "REWZhCwwBa=6WWaBam6onjn5=HM="   //onenetÆ½Ì¨²úÆ·apikey
//  100 #define  devid    "1067058780"                      //onenetÆ½Ì¨Éè±¸id
//  101 #define  LYSSID   "Redmi_K40"                      // ÐÞ¸ÄÄãÂ·ÓÉÆ÷µÄSSId
//  102 #define  LYPASSWD "15876376419"                   // ÐÞ¸ÄÄãÂ·ÓÉÆ÷µÄÃÜÂë
//  103 
//  104 #define WIFIRESET       P0_6                            // P0.6¿Ú¿ØÖÆreset
//  105 //WIFIÁ¬½ÓÃüÁî
//  106 #define AT_C       "AT\r\n"
//  107 #define CWMODE_C   "AT+CWMODE=3\r\n"  //STA+APÄ£Ê½
//  108 //#define CIPSTART_C "AT+CIPSTART=\"TCP\",\"192.168.1.3\",8234\r\n" //Á¬½ÓHTTP·þÎñÆ÷192.168.1.4,8234  8234ÊÇ·þÎñÆ÷µÄ¶Ë¿ÚºÅ ---±¾µØ²âÊÔ
//  109 #define CIPSTART_C "AT+CIPSTART=\"TCP\",\"183.230.40.39\",6002\r\n"   //Á¬½ÓÔÆ·þÎñÆ÷
//  110 //#define CIPTIME_C "AT+CIPSTART=\"TCP\",\"www.beijing-time.org\",80\r\n"   //Á¬½ÓÊ±¼ä·þÎñÆ÷
//  111 #define CIPMODE_C  "AT+CIPMODE=1\r\n"   //Í¸´«Ä£Ê½
//  112 #define CIPSEND_C  "AT+CIPSEND\r\n"     //·¢ËÍÊý¾ÝµÄÖ¸Áî
//  113 
//  114 //#define HAL_LCD TRUE
//  115 /*********************************************************************
//  116  * CONSTANTS
//  117  */
//  118 
//  119 /*********************************************************************
//  120  * TYPEDEFS
//  121  */
//  122 
//  123 /*********************************************************************
//  124  * GLOBAL VARIABLES
//  125  */
//  126 
//  127 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//  128 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//  129 {
//  130   SAMPLEAPP_PERIODIC_CLUSTERID,
//  131   SAMPLEAPP_FLASH_CLUSTERID
//  132 };
//  133 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  134 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//  135 {
//  136   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  137   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  138   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  139   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  140   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  141   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  142   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  143   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  144   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  145 };
//  146 
//  147 // This is the Endpoint/Interface description.  It is defined here, but
//  148 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  149 // in the structure here and make it a "const" (in code space).  The
//  150 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  151 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  152 
//  153 /*********************************************************************
//  154  * EXTERNAL VARIABLES
//  155  */
//  156 
//  157 /*********************************************************************
//  158  * EXTERNAL FUNCTIONS
//  159  */
//  160 
//  161 /*********************************************************************
//  162  * LOCAL VARIABLES
//  163  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  165                           // This variable will be received when
//  166                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  168 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  170 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  171 afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  174 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  176 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  177 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  179 
//  180 /*********************************************************************
//  181  * LOCAL FUNCTIONS
//  182  */
//  183 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  184 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  185 void SampleApp_SendPeriodicMessage( void );
//  186 void SampleApp_SendFlashMessage( uint16 flashTime );
//  187 void SampleApp_Send_P2P_Message(void);
//  188 uint16 ReadGasData(void);
//  189 void ReSetWifi(void);
//  190 void USART_Receive_messege(mtOSALSerialData_t *MSGpkt);
//  191 void publish_msg(afIncomingMSGPacket_t *pkt);
//  192 void sub_msg(void);
//  193 void send_onenet(afIncomingMSGPacket_t *pkt);
//  194 unsigned int HX711_Read(void);
//  195 int get_data(const char* data_name,char* recv,int recv_len);
//  196 void LCD_CLS(void);
//  197 void Get_Maopi(void);
//  198 long Get_Weight(void);
//  199 /*********************************************************************
//  200  * NETWORK LAYER CALLBACKS
//  201  */
//  202 
//  203 /*********************************************************************
//  204  * PUBLIC FUNCTIONS
//  205  */
//  206 
//  207 /*********************************************************************
//  208  * @fn      SampleApp_Init
//  209  *
//  210  * @brief   Initialization function for the Generic App Task.
//  211  *          This is called during initialization and should contain
//  212  *          any application specific initialization (ie. hardware
//  213  *          initialization/setup, table initialization, power up
//  214  *          notificaiton ... ).
//  215  *
//  216  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  217  *                    used to send messages and set timers.
//  218  *
//  219  * @return  none
//  220  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  221 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  222 { 
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, ReSetWifi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HX711_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  223   unsigned char tmp[10];
//  224   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  225   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  226   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  227   // LCD_CLS();
//  228   //LCD_welcome();
//  229   MT_UartInit();                  //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  230   MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  231    HalUARTWrite(0,"success\n", 9);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "success\\n">` & 0xff
        MOV     R3,#(`?<Constant "success\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  232    //HalUARTWrite(1,"success2\n", 9);
//  233   //HalLcdInit();
//  234   
//  235  
//  236 
//  237    tmp[0] = HAL_UART_DMA+0x30;
//  238   tmp[1] = HAL_UART_ISR+0x30;
//  239   tmp[2] = HAL_UART_USB+0x30;
//  240     //HalUARTWrite(0, "start_time", strlen("start_time"));
//  241    // HalUARTWrite(0, "\0", 1);
//  242    P0SEL &= 0x7c;           //P0_7ÅäÖÃ³ÉÍ¨ÓÃio ÎÂÊª¶È   
        ANL     0xf3,#0x7c
//  243     P0DIR |=0x01;  //P0_0ÎªÊä³ö
        ORL     0xfd,#0x1
//  244    //  P0DIR |=0x02;  //P0_1ÎªÊä³ö
//  245    P0DIR &=0xfd; //P0_1ÎªÊäÈë
        ANL     0xfd,#0xfd
//  246 
//  247     // ds1302_init();
//  248     // ds1302_write_time();
//  249    ReSetWifi();
        ; Setup parameters for call to function ReSetWifi
        LCALL   ?Subroutine8 & 0xFFFF
//  250    Delay_ms(1000);                //µÈ´ýÄ£¿éÆô¶¯
//  251    HalUARTWrite(1,"AT\r\n",strlen("AT\r\n")); //·¢ËÍAT¼ì²âWiFiÄ£¿é
//  252     flat = 1;
//  253     Get_Maopi();
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function HX711_Read
        LCALL   ?Subroutine6 & 0xFFFF
//  254     //char buf_maopi[20];
//  255     
//  256     //sprintf((char *)buf_maopi,"{Weight_Maopi:%ld,}",Weight_Maopi);
//  257    //HalUARTWrite(0,buf_maopi, strlen(buf_maopi));  
//  258  
//  259   // Device hardware initialization can be added here or in main() (Zmain.c).
//  260   // If the hardware is application specific - add it here.
//  261   // If the hardware is other parts of the device add it in main().
//  262 
//  263  #if defined ( BUILD_ALL_DEVICES )
//  264   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  265   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  266   // together - if they are - we will start up a coordinator. Otherwise,
//  267   // the device will start as a router.
//  268   if ( readCoordinatorJumper() )
//  269     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  270   else
//  271     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  272 #endif // BUILD_ALL_DEVICES
//  273 
//  274 #if defined ( HOLD_AUTO_START )
//  275   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  276   //  from starting the device and wait for the application to
//  277   //  start the device.
//  278   ZDOInitDevice(0);
//  279 #endif
//  280 
//  281   // Setup for the periodic message's destination address
//  282   // Broadcast to everyone
//  283   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
??CrossCallReturnLabel_57:
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  284   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  285   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  286 
//  287   // Setup for the flash command's destination address - Group 1
//  288   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  289   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  290   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  291   
//  292   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  293   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  294   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  295 
//  296   // Fill out the endpoint description.
//  297   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  298   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  299   SampleApp_epDesc.simpleDesc
//  300             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  301   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  302 
//  303   // Register the endpoint description with the AF
//  304   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  305 
//  306   // Register for all key events - This app will handle all key events
//  307   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  308 
//  309   // By default, all devices start out in Group 1
//  310   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  311   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  312   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  313  
//  314 
//  315 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE P0DIR

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
TxBuf:
        DS 40
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
GasData:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond2) CFA_SP SP+-5
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        LCALL   ??HX711_Read?relay
        MOV     DPTR,#Weight_Maopi
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  316 
//  317 /*********************************************************************
//  318  * @fn      SampleApp_ProcessEvent
//  319  *
//  320  * @brief   Generic Application Task event processor.  This function
//  321  *          is called to process all events for the task.  Events
//  322  *          include timers, messages and any other user defined events.
//  323  *
//  324  * @param   task_id  - The OSAL assigned task ID.
//  325  * @param   events - events to process.  This is a bit map and can
//  326  *                   contain more than one event.
//  327  *
//  328  * @return  none
//  329  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  330 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  331 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, USART_Receive_messege
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_Send_P2P_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  332   afIncomingMSGPacket_t *MSGpkt;
//  333   (void)task_id;  // Intentionally unreferenced parameter
//  334   
//  335   
//  336   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
//  337   {
//  338     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  339     while ( MSGpkt )
//  340     {
//  341       switch ( MSGpkt->hdr.event )
//  342       {
//  343         // Received when a key is pressed
//  344         case KEY_CHANGE:
//  345           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  346           break;
//  347 
//  348         // Received when a messages is received (OTA) for this endpoint
//  349         case AF_INCOMING_MSG_CMD:
//  350           SampleApp_MessageMSGCB( MSGpkt );
//  351           break;
//  352         case CMD_SERIAL_MSG:
//  353               USART_Receive_messege((mtOSALSerialData_t *)MSGpkt);
//  354                //HalUARTWrite(1,"ATOK",strlen("ATOK"));
//  355               break;
//  356         
//  357 
//  358         // Received whenever the device changes state in the network
//  359         case ZDO_STATE_CHANGE:
//  360           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  361           if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
//  362                  (SampleApp_NwkState == DEV_ROUTER)
//  363               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  364           {
//  365             // Start sending the periodic message in a regular interval.
//  366             osal_start_timerEx( SampleApp_TaskID,
//  367                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  368                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  369           }
//  370           else
//  371           {
//  372             // Device is no longer in the network
//  373           }
//  374           break;
//  375 
//  376         default:
//  377           break;
//  378       }
//  379 
//  380       // Release the memory
//  381       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  382 
//  383       // Next - if one is available
//  384       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        DEC     A
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#-0x19
        JZ      ??SampleApp_ProcessEvent_7
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_8
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_8:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_7:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function USART_Receive_messege
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??USART_Receive_messege?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  385     }
//  386 
//  387     // return unprocessed events
//  388     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_9:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_10
//  389   }
//  390 
//  391   // Send a message out - This event is generated by a timer
//  392   //  (setup in SampleApp_Init()).
//  393   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_11
//  394   {
//  395     // Send the periodic message
//  396     //SampleApp_SendPeriodicMessage();
//  397     SampleApp_Send_P2P_Message();
        ; Setup parameters for call to function SampleApp_Send_P2P_Message
        LCALL   ??SampleApp_Send_P2P_Message?relay
//  398     //ds1302_read_time();
//  399   //  HalUARTWrite(0,time_buf,8);
//  400     //HalLcdWriteString(dis_time_buf,HAL_LCD_LINE_1);
//  401    // sprintf(time_buf,"time:%d",count++);
//  402      //HalLcdWriteString(time_buf,HAL_LCD_LINE_2);
//  403    // hour=dis_time_buf[8]*10+dis_time_buf[9];
//  404    // minute=dis_time_buf[10]*10+dis_time_buf[11];
//  405     
//  406    // if(hour==Sethour && minute==Setmiunte){
//  407    //   if(food_flag==0){
//  408    //       HalUARTWrite(0,"{ADD}",strlen("{ADD}"));
//  409    //       HalUARTWrite(0,"\0",1);
//  410    //       food_flag=60;
//  411    //   }
//  412    //    else food_flag--;               
//  413          
//  414   //  }
//  415   // HalLcdWriteString(dis_time_buf,HAL_LCD_LINE_1);
//  416     // Setup to send message again in normal period (+ a little jitter)
//  417     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  418         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT+(osal_rand() & 0x00FF)));
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  419    // osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  420     //    SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT);
//  421 
//  422     // return unprocessed events
//  423     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_9
//  424   }
//  425 
//  426   // Discard unknown events
//  427   return 0;
??SampleApp_ProcessEvent_11:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock8
??SampleApp_ProcessEvent_10:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  428 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
//  429 
//  430 /*********************************************************************
//  431  * Event Generation Functions
//  432  */
//  433 /*********************************************************************
//  434  * @fn      SampleApp_HandleKeys
//  435  *
//  436  * @brief   Handles all key events for this device.
//  437  *
//  438  * @param   shift - true if in shift/alt.
//  439  * @param   keys - bit field for key events. Valid entries:
//  440  *                 HAL_KEY_SW_2
//  441  *                 HAL_KEY_SW_1
//  442  *
//  443  * @return  none
//  444  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  445 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  446 {
        FUNCALL SampleApp_HandleKeys, SampleApp_SendFlashMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  447   (void)shift;  // Intentionally unreferenced parameter
//  448   
//  449   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_HandleKeys_0
//  450   {
//  451     /* This key sends the Flash Command is sent to Group 1.
//  452      * This device will not receive the Flash Command from this
//  453      * device (even if it belongs to group 1).
//  454      */
//  455     SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
        ; Setup parameters for call to function SampleApp_SendFlashMessage
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??SampleApp_SendFlashMessage?relay
//  456   }
//  457 
//  458   if ( keys & HAL_KEY_SW_2 )
??SampleApp_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??SampleApp_HandleKeys_1
//  459   {
//  460     /* The Flashr Command is sent to Group 1.
//  461      * This key toggles this device in and out of group 1.
//  462      * If this device doesn't belong to group 1, this application
//  463      * will not receive the Flash command sent to group 1.
//  464      */
//  465     aps_Group_t *grp;
//  466     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  467     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_FindGroup?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_HandleKeys_2
//  468     {
//  469       // Remove from the group
//  470       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_RemoveGroup?relay
        SJMP    ??SampleApp_HandleKeys_1
//  471     }
//  472     else
//  473     {
//  474       // Add to the flash group
//  475       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_2:
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  476     }
//  477   }
//  478 }
??SampleApp_HandleKeys_1:
        LJMP    ??Subroutine26_0 & 0xFFFF
        CFI EndBlock cfiBlock10
//  479 //ÉÏ´«Êý¾Ýµã

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  480 void send_onenet(afIncomingMSGPacket_t *pkt){
send_onenet:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function send_onenet
        CODE
        FUNCALL send_onenet, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_onenet, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_onenet, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 74)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  481   unsigned char send_buf[64];
//  482    memset(send_buf,0,64);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x40
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 76)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 74)
//  483   //×é°ü
//  484     send_buf[0]=0x30;
        LCALL   ?Subroutine4 & 0xFFFF
//  485     send_buf[1]=pkt->cmd.DataLength+6;
??CrossCallReturnLabel_3:
        ADD     A,#0x6
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  486     send_buf[2]=0x00;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  487     send_buf[3]=0x03;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  488     send_buf[4]=0x24; 
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x24
        MOVX    @DPTR,A
//  489     send_buf[5]=0x64;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x64
        MOVX    @DPTR,A
//  490     send_buf[6]=0x70;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x70
        MOVX    @DPTR,A
//  491     send_buf[7]=0x03;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  492     send_buf[8]=0x00;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  493     send_buf[9]=pkt->cmd.DataLength-2;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,#-0x2
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
//  494     strcpy(&send_buf[10],pkt->cmd.Data);
??CrossCallReturnLabel_5:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  495     //·¢ËÍ
//  496     HalUARTWrite(1, send_buf, pkt->cmd.DataLength+8);
??CrossCallReturnLabel_34:
        ADD     A,#0x8
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock11
//  497 
//  498 }
//  499 
//  500 
//  501 //·¢²¼Ö÷Ìâ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  502 void publish_msg(afIncomingMSGPacket_t *pkt){
publish_msg:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function publish_msg
        CODE
        FUNCALL publish_msg, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL publish_msg, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL publish_msg, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 74)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  503   unsigned char pub_buf[64];
//  504    memset(pub_buf,0,64);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x40
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 76)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 74)
//  505   //×é°ü
//  506     pub_buf[0]=0x30;
        LCALL   ?Subroutine4 & 0xFFFF
//  507     pub_buf[1]=pkt->cmd.DataLength+5;
??CrossCallReturnLabel_4:
        ADD     A,#0x5
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  508     pub_buf[2]=0x00;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  509     pub_buf[3]=0x03;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  510     pub_buf[4]=0x6D;   //'m'
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6d
        MOVX    @DPTR,A
//  511     pub_buf[5]=0x73;  //'s'
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x73
        MOVX    @DPTR,A
//  512     pub_buf[6]=0x67;   //'g'
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x67
        LCALL   ?Subroutine5 & 0xFFFF
//  513     strcpy(&pub_buf[7],pkt->cmd.Data);
??CrossCallReturnLabel_6:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  514     HalUARTWrite(1, pub_buf, pkt->cmd.DataLength+7);
??CrossCallReturnLabel_35:
        ADD     A,#0x7
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock12
//  515     // HalUARTWrite(0, pub_buf, pkt->cmd.DataLength+7);
//  516     // HalUARTWrite(0, '\0', 1);
//  517 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 74)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 74)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 74)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 74)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function strcpy
        ; Setup parameters for call to function strcpy
        MOV     A,R6
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 74)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 74)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x30
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1f
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21
//  518 
//  519 //¶©ÔÄÖ÷Ìâ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  520 void sub_msg(void){
sub_msg:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function sub_msg
        CODE
        FUNCALL sub_msg, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sub_msg, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 74)
//  521   unsigned char sub_buf[64];
//  522    memset(sub_buf,0,64);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x40
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 76)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 74)
//  523   //×é°ü
//  524     sub_buf[0]=0x82;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x7e
        MOVX    @DPTR,A
//  525     sub_buf[1]=0x08;  //°üµÄÊ£Óà³¤¶È
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
//  526     sub_buf[2]=0x00;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  527     sub_buf[3]=0x02;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  528     sub_buf[4]=0x00;   
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  529     sub_buf[5]=0x03;  
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  530     sub_buf[6]=0x6D;        //'m'
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6d
        MOVX    @DPTR,A
//  531     sub_buf[7]=0x73;     //'s'
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x73
        MOVX    @DPTR,A
//  532     sub_buf[8]=0x67;    //'g'
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x67
        MOVX    @DPTR,A
//  533     sub_buf[9]=0x00;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  534     HalUARTWrite(1, sub_buf, 10);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock22
//  535      //HalUARTWrite(0, sub_buf, 10);
//  536     //HalUARTWrite(0, '\0', 1);
//  537 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 76)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 76)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 76)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 147)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32
//  538 //ÌáÈ¡½ÓÊÕ×Ö·û´®ÖÐµÄÊý¾Ý

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  539 int get_data(const char* data_name,char* recv,int recv_len){
get_data:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function get_data
        CODE
        FUNCALL get_data, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_data, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_data, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_data, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_data, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 4,R4
        MOV     ?V0 + 5,R5
//  540     char *str_head,*str_tail;
//  541     int data=0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  542     int data_len,data_name_len;
//  543     data_name_len=strlen(data_name);	
        ; Setup parameters for call to function strlen
        LCALL   ??strlen?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  544     str_head=strstr(recv,data_name);
        ; Setup parameters for call to function strstr
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??strstr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  545     if(str_head==NULL) return 0;
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     ??get_data_0
??get_data_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??get_data_2 & 0xFFFF
//  546      //HalUARTWrite(0, str_head, strlen(str_head));
//  547     str_tail=strstr(str_head,",");
??get_data_0:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant ",">` & 0xff
        MOV     R5,#(`?<Constant ",">` >> 8) & 0xff
        LCALL   ??strstr?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
//  548     if(str_tail==NULL) return 0;
        MOV     A,R2
        ORL     A,?V0 + 9
        JZ      ??get_data_1
//  549     data_len=strlen(str_head)-strlen(str_tail)-data_name_len-1;
//  550     switch(data_len){
        ; Setup parameters for call to function strlen
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??strlen?relay
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     A,?V0 + 2
        ADD     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 1
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        ; Setup parameters for call to function strlen
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ??strlen?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,?V0 + 10
        CLR     C
        SUBB    A,?V0 + 8
        MOV     R0,A
        MOV     A,?V0 + 11
        SUBB    A,?V0 + 9
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        SUBB    A,?V0 + 1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for get_data>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??get_data_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??get_data_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??get_data_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??get_data_6
        CODE
//  551             case 1:data=str_head[data_name_len+1]-'0';break;
??get_data_4:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        ADD     A,#-0x30
        MOV     R6,A
        CLR     A
        ADDC    A,#-0x1
        SJMP    ??get_data_7
//  552             case 2:data=(str_head[data_name_len+1]-'0')*10+(str_head[data_name_len+2]-'0');break;
??get_data_5:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        ADD     A,R2
        MOV     R0,A
        MOV     A,B
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x10
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#-0x3
        SJMP    ??get_data_7
//  553             case 3:data=(str_head[data_name_len+1]-'0')*100+(str_head[data_name_len+2]-'0')*10+(str_head[data_name_len+3]-'0');break;
??get_data_6:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     B,#0x64
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     B,#0xa
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,R0
        ADD     A,R2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        ADD     A,R2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x30
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#-0x15
??get_data_7:
        MOV     R7,A
//  554            // case 4:data=(str_head[data_name_len+1]-'0')*1000+(str_head[data_name_len+2]-'0')*100+str_head[data_name_len+3]*10+str_head[data_name_len+4];break;
//  555             default:break;
//  556     
//  557     }
//  558             
//  559             return data;
??get_data_3:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
??get_data_2:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock33
//  560  }
//  561 
//  562 
//  563 /*********************************************************************
//  564  * LOCAL FUNCTIONS
//  565  */
//  566 
//  567 /*********************************************************************
//  568  * @fn      SampleApp_MessageMSGCB
//  569  *
//  570  * @brief   Data message processor callback.  This function processes
//  571  *          any incoming data - probably from other devices.  So, based
//  572  *          on cluster ID, perform the intended action.
//  573  *
//  574  * @param   none
//  575  *
//  576  * @return  none
//  577  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  578 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  579 {
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sub_msg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, send_onenet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, publish_msg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, get_data
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, get_data
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, get_data
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, get_data
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 118, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 118, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 104
        MOV     A,#-0x68
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  580   uint16 flashTime;
//  581  // char HttpData[170];
//  582   char send_data[70];
//  583   memset(send_data,0,70);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 2,#0x46
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
//  584  // unsigned char data[64];
//  585   unsigned char buftemp[32];
//  586   //unsigned char time_buf[32];
//  587   unsigned char heart[2]={0xc0,0x00};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {192, 0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {192, 0}>` & 0xff
        MOV     A,#0x2
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  588   uint8 hour,minute;
//  589   switch ( pkt->clusterId )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  590   {
//  591     case SAMPLEAPP_P2P_CLUSTERID:
//  592       
//  593       //×é°ü£¬·¢ËÍµ½stm32Ö÷¿Ø
//  594       strcpy(send_data,pkt->cmd.Data);
??SampleApp_MessageMSGCB_2:
        ; Setup parameters for call to function strcpy
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
//  595       send_data[pkt->cmd.DataLength-3]=',';
        MOV     A,?V0 + 0
        ADD     A,#0x1f
        MOV     R6,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_41:
        ADD     A,#-0x3
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOV     A,#0x2c
        LCALL   ?Subroutine3 & 0xFFFF
//  596       send_data[pkt->cmd.DataLength-2]='}';
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_42:
        ADD     A,#-0x2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOV     A,#0x7d
        LCALL   ?Subroutine3 & 0xFFFF
//  597       send_data[pkt->cmd.DataLength-1]='\r';
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_43:
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOV     A,#0xd
        LCALL   ?Subroutine3 & 0xFFFF
//  598       send_data[pkt->cmd.DataLength]='\n';
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,#0xa
        MOVX    @DPTR,A
//  599       HalUARTWrite(0,send_data,pkt->cmd.DataLength+1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine7 & 0xFFFF
//  600       HalUARTWrite(0, "\0", 1);
??CrossCallReturnLabel_7:
        LCALL   ??Subroutine27_0 & 0xFFFF
//  601       /*
//  602        ds1302_read_time();
//  603        sprintf(dis_time_buf,"y:%d,s:%d",(time_buf[6]>>4)*10+(time_buf[6]&0x0f)+2000,(time_buf[0]>>4)*10+(time_buf[0]&0x0f));
//  604       //HalUARTWrite(0,"{ADD}",strlen("{ADD}"));
//  605       HalLcdWriteString(dis_time_buf,HAL_LCD_LINE_1);
//  606       memset(dis_time_buf,0,16);
//  607      //sprintf(time_buf,"time:%d",count++);
//  608      //HalLcdWriteString(time_buf,HAL_LCD_LINE_2);
//  609       // hour=dis_time_buf[8]*10+dis_time_buf[9];
//  610       // minute=dis_time_buf[10]*10+dis_time_buf[11];
//  611        //HalLcdWriteString(time_buf,HAL_LCD_LINE_1);
//  612       if(hour==Sethour && minute==Setmiunte){
//  613         if(food_flag==0){
//  614           HalUARTWrite(0,"{ADD}",strlen("{ADD}"));
//  615           HalUARTWrite(0,"\0",1);
//  616           food_flag=60;
//  617       }
//  618        else food_flag--;               
//  619          
//  620       }
//  621       */
//  622     
//  623       //Èç¹ûMQTTÁ¬½Ó½¨Á¢Íê³É
//  624       if(flat==7)
??CrossCallReturnLabel_62:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  625       {   
//  626         //±£³ÖÐÄÌø
//  627         HalUARTWrite(1,heart,2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  628         //¶©ÔÄÖ÷Ìâ
//  629         sub_msg();
        ; Setup parameters for call to function sub_msg
        LCALL   ??sub_msg?relay
//  630         //ÉÏ´«Êý¾Ýµãµ½OneNETÔÆÆ½Ì¨
//  631         send_onenet(pkt);
        ; Setup parameters for call to function send_onenet
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??send_onenet?relay
//  632         //·¢²¼Ö÷Ìâ
//  633         publish_msg(pkt);    
        ; Setup parameters for call to function publish_msg
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??publish_msg?relay
//  634         //ÔÚOLEDÏÔÊ¾
//  635           memset(buftemp,0,32);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
//  636           sprintf(buftemp,"temp:%d",get_data("\"temp\"",send_data,pkt->cmd.DataLength+1));
        ; Setup parameters for call to function sprintf
        ; Setup parameters for call to function get_data
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#`?<Constant "\\"temp\\"">` & 0xff
        MOV     R3,#(`?<Constant "\\"temp\\"">` >> 8) & 0xff
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     R4,#`?<Constant "temp:%d">` & 0xff
        MOV     R5,#(`?<Constant "temp:%d">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
//  637          HalLcdWriteString(buftemp,HAL_LCD_LINE_1);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  638          memset(buftemp,0,32);
??CrossCallReturnLabel_36:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
//  639          sprintf(buftemp,"humid:%d",get_data("\"humid\"",send_data,pkt->cmd.DataLength+1));
        ; Setup parameters for call to function sprintf
        ; Setup parameters for call to function get_data
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#`?<Constant "\\"humid\\"">` & 0xff
        MOV     R3,#(`?<Constant "\\"humid\\"">` >> 8) & 0xff
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     R4,#`?<Constant "humid:%d">` & 0xff
        MOV     R5,#(`?<Constant "humid:%d">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
//  640         HalLcdWriteString(buftemp,HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  641          memset(buftemp,0,32);
??CrossCallReturnLabel_37:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
//  642          sprintf(buftemp,"air:%d",get_data("\"Air\"",send_data,pkt->cmd.DataLength+1));
        ; Setup parameters for call to function sprintf
        ; Setup parameters for call to function get_data
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#`?<Constant "\\"Air\\"">` & 0xff
        MOV     R3,#(`?<Constant "\\"Air\\"">` >> 8) & 0xff
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     R4,#`?<Constant "air:%d">` & 0xff
        MOV     R5,#(`?<Constant "air:%d">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
//  643         HalLcdWriteString(buftemp,HAL_LCD_LINE_3);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  644         memset(buftemp,0,32);
??CrossCallReturnLabel_38:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
//  645          sprintf(buftemp,"food:%d",get_data("\"food\"",send_data,pkt->cmd.DataLength+1));
        ; Setup parameters for call to function sprintf
        ; Setup parameters for call to function get_data
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#`?<Constant "\\"food\\"">` & 0xff
        MOV     R3,#(`?<Constant "\\"food\\"">` >> 8) & 0xff
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 118)
        MOV     R4,#`?<Constant "food:%d">` & 0xff
        MOV     R5,#(`?<Constant "food:%d">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 116)
//  646         HalLcdWriteString(buftemp,HAL_LCD_LINE_4);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
        SJMP    ??SampleApp_MessageMSGCB_0
//  647 
//  648        
//  649       }
//  650        else
//  651       {
//  652         //SystemReset();
//  653       }       // »Ø³µ»»ÐÐ
//  654       
//  655       break;    
//  656     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  657       /*
//  658       HalUARTWrite(0,pkt->cmd.Data,pkt->cmd.DataLength);
//  659       HalUARTWrite(0, "\0", 1);
//  660       memset(buftemp,0,32);
//  661       sprintf(buftemp,"food:%d",get_data("food",pkt->cmd.Data,pkt->cmd.DataLength+1));
//  662       HalLcdWriteString(buftemp,HAL_LCD_LINE_1);
//  663       */
//  664       break;
//  665 
//  666     case SAMPLEAPP_FLASH_CLUSTERID:
//  667       flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  668       HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
??SampleApp_MessageMSGCB_1:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        ; Setup parameters for call to function HalLedBlink
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  669       break;
//  670   }
//  671 }
??SampleApp_MessageMSGCB_0:
        MOV     A,#0x68
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 118)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        LCALL   ??get_data?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function memset
        ; Setup parameters for call to function memset
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 116)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x22
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64
//  672 
//  673 /*********************************************************************
//  674  * @fn      SampleApp_SendPeriodicMessage
//  675  *
//  676  * @brief   Send the periodic message.
//  677  *
//  678  * @param   none
//  679  *
//  680  * @return  none
//  681  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  682 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  683 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  684  
//  685   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  686                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  687                        1,
//  688                        (uint8*)&SampleAppPeriodicCounter,
//  689                        &SampleApp_TransID,
//  690                        AF_DISCV_ROUTE,
//  691                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
        MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        SJMP    ??Subroutine25_0
        CFI EndBlock cfiBlock65
//  692   {
//  693   }
//  694   else
//  695   {
//  696     // Error occurred in request to send.
//  697   }
//  698 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 74)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        CFI EndBlock cfiBlock66
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 74)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
        MOV     A,#0x40
        CFI EndBlock cfiBlock67
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock68
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiBlock69 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock69
//  699 
//  700 /*********************************************************************
//  701  * @fn      SampleApp_SendFlashMessage
//  702  *
//  703  * @brief   Send the flash message to group 1.
//  704  *
//  705  * @param   flashTime - in milliseconds
//  706  *
//  707  * @return  none
//  708  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  709 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock70 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  710 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  711   uint8 buffer[3];
//  712   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  713   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  714   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  715 
//  716   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  717                        SAMPLEAPP_FLASH_CLUSTERID,
//  718                        3,
//  719                        buffer,
//  720                        &SampleApp_TransID,
//  721                        AF_DISCV_ROUTE,
//  722                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  723   {
//  724   }
//  725   else
//  726   {
//  727     // Error occurred in request to send.
//  728   }
//  729 }
        MOV     A,#0x3
        SJMP    ??Subroutine25_0
        CFI EndBlock cfiBlock70
//  730 
//  731 //¶ÁÈ¡MQ2´«¸ÐÆ÷Êý¾Ý
//  732 unsigned char TxBuf[40];
//  733 uint16 GasData;

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  734 uint16 ReadGasData(void)
ReadGasData:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI Function ReadGasData
        CODE
//  735 {
        ; Saved register size: 0
        ; Auto size: 0
//  736   uint16 reading = 0;
//  737   
//  738   /* Enable channel */
//  739   ADCCFG |= 0x40;
        ORL     0xf2,#0x40
//  740   
//  741   /* writing to this register starts the extra conversion */
//  742   ADCCON3 = 0x86;// AVDD5 Òý½Å  00£º 64 ³éÈ¡ÂÊ(7 Î»ENOB)  0110£º AIN6
        MOV     0xb6,#-0x7a
//  743   
//  744   /* Wait for the conversion to be done */
//  745   while (!(ADCCON1 & 0x80));
??ReadGasData_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??ReadGasData_0
//  746   
//  747   /* Disable channel after done conversion */
//  748   ADCCFG &= (0x40 ^ 0xFF); //°´Î»Òì»ò¡£Èç1010^1111=0101£¨¶þ½øÖÆ£©
        ANL     0xf2,#0xbf
//  749   
//  750   /* Read the result */
//  751   reading = ADCL;
        MOV     A,0xba
//  752   reading |= (int16) (ADCH << 8); 
//  753   
//  754   reading >>= 8;
//  755   
//  756   return (reading);
        MOV     A,0xbb
        MOV     R2,A
        CLR     A
        MOV     R3,A
        LJMP    ?BRET
        CFI EndBlock cfiBlock71
        REQUIRE ADCCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
//  757 }
//  758 //¸´Î»WiFiÄ£¿éº¯Êý

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  759 void ReSetWifi(void)
ReSetWifi:
        CFI Block cfiBlock72 Using cfiCommon0
        CFI Function ReSetWifi
        CODE
//  760 {
        FUNCALL ReSetWifi, Delay_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReSetWifi, Delay_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  761   P0DIR |= 0x40;                  //P0.6¶¨ÒåÎªÊä³ö
        ORL     0xfd,#0x40
//  762   WIFIRESET = 0;                  //µÍµçÆ½¸´Î»---------------------
        CLR     0x80.6
//  763   Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  764   WIFIRESET = 1;                  //¸ßµçÆ½¹¤×÷------------
        SETB    0x80.6
//  765    Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
        CFI EndBlock cfiBlock72
//  766 }
        REQUIRE ?Subroutine2
        REQUIRE P0DIR
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock73
//  767 
//  768 //´®¿Ú½ÓÊÕÊý¾Ý´¦Àíº¯Êý

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  769 void USART_Receive_messege(mtOSALSerialData_t *MSGpkt)
USART_Receive_messege:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function USART_Receive_messege
        CODE
//  770 {
        FUNCALL USART_Receive_messege, sub_msg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, ReSetWifi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 147, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 147, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 149, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 149, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, LCD_CLS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL USART_Receive_messege, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 135
        MOV     A,#0x79
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 145)
//  771   
//  772    //HalUARTWrite(0, "ZIGBEE-WIFI OK8\r\n", 17);
//  773     char nn[100];  //mqttÁ¬½Ó»º´æ
//  774      char disbuf[32];
//  775      int i;
//  776      //MQTTÁ¬½ÓÖ¸Áî                       
//  777     unsigned char concmd[]={0x10,0x21,0x00,0x04,0x4D,0x51,0x54,0x54,0x04,0xC0,0x00,0x78,0x00,0x0A,0x31,0x30,0x37,0x39,0x39,0x36,0x38,0x39,0x34,0x37,0x00,0x06,0x35,0x39,0x30,0x39,0x34,0x35,0x00,0x01,0x32};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {16, 33, 0, 4, 77, 81, 84, 84, 4, 1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {16, 33, 0, 4, 77, 81, 84, 84, 4, 1` & 0xff
        MOV     A,#0x23
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  778     mtOSALSerialData_t *p =MSGpkt;
//  779   
//  780     if(flat==7) //ÊÕµ½WIFIºÍÆ½Ì¨½»»¥Êý¾Ý
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPTR,#flat
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      $+5
        LJMP    ??USART_Receive_messege_0 & 0xFFFF
//  781     
//  782       if(con_succ==0 && p->msg[0]>1){
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#con_succ
        MOVX    A,@DPTR
        JNZ     ??USART_Receive_messege_1
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JC      ??USART_Receive_messege_1
//  783         if(p->msg[1]==0x20 && p->msg[2]==0x02) 
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x20
        JNZ     ??USART_Receive_messege_2
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??USART_Receive_messege_2
//  784         {
//  785             con_succ=1;
        MOV     DPTR,#con_succ
        MOV     A,#0x1
        MOVX    @DPTR,A
//  786             sub_msg();
        ; Setup parameters for call to function sub_msg
        LCALL   ??sub_msg?relay
        SJMP    ??USART_Receive_messege_0
//  787         }
//  788         else 
//  789           HalUARTWrite(1,concmd,35);
??USART_Receive_messege_2:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x23
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        SJMP    ??CrossCallReturnLabel_8
//  790       
//  791       }
//  792 
//  793       else{
//  794         if(p->msg[0]>7){
??USART_Receive_messege_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x8
        JNC     $+5
        LJMP    ??USART_Receive_messege_3 & 0xFFFF
//  795           if(p->msg[1]==0x30 && p->msg[5]=='m' && p->msg[6]=='s' && p->msg[7]=='g')
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x30
        JZ      $+5
        LJMP    ??USART_Receive_messege_3 & 0xFFFF
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6d
        JZ      $+5
        LJMP    ??USART_Receive_messege_3 & 0xFFFF
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x73
        JZ      $+5
        LJMP    ??USART_Receive_messege_3 & 0xFFFF
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x67
        JZ      $+5
        LJMP    ??USART_Receive_messege_3 & 0xFFFF
//  796             {
//  797               HalUARTWrite(0,(unsigned char*)(&p->msg[8]), p->msg[0]-7);
        ; Setup parameters for call to function HalUARTWrite
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,#-0x7
        MOV     R4,A
        CLR     A
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,R0
        ADD     A,#0x8
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ?Subroutine7 & 0xFFFF
//  798                 HalUARTWrite(0,"\0",1);
//  799                // Sethour=get_data("hour",(char*)(&p->msg[8]), p->msg[0]-7);
//  800              //  Setmiunte=get_data("minute",(char*)(&p->msg[8]), p->msg[0]-7);
//  801                //sprintf(disbuf,"hour:%d,minu:%d",Sethour,Setmiunte);
//  802                
//  803                 //LCD_CLS();
//  804                 //HalLcdWriteString(disbuf,HAL_LCD_LINE_4);
//  805             }
//  806         
//  807         
//  808         }
//  809           
//  810       
//  811       }
??CrossCallReturnLabel_8:
        LCALL   ??HalUARTWrite?relay
//  812       
//  813       
//  814       //HalUARTWrite(0,(uint8 *)(&p->msg[1]), p->msg[0]);
//  815     if(flat==1) //·¢ATÃüÁî
??USART_Receive_messege_0:
        MOV     R4,#`?<Constant "OK">` & 0xff
        MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
        MOV     DPTR,#flat
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??USART_Receive_messege_4
//  816     {
//  817       // HalUARTWrite(1,(unsigned char*)(&p->msg[1]), p->msg[0]);
//  818        //HalUARTWrite(0,(uint8 *)(&p->msg[1]), p->msg[0]);
//  819        if(strstr((char const *)(&p->msg[1]),"OK"))
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        JZ      ??USART_Receive_messege_5
//  820        {
//  821           HalUARTWrite(1,CWMODE_C,strlen(CWMODE_C));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CWMODE=3\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CWMODE=3\\r\\n">` >> 8) & 0xff
        LCALL   ?Subroutine9 & 0xFFFF
//  822           
//  823           flat=2;
??CrossCallReturnLabel_60:
        MOV     A,#0x2
??USART_Receive_messege_6:
        MOVX    @DPTR,A
//  824           Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
??USART_Receive_messege_7:
        LCALL   ??Delay_ms?relay
        LJMP    ??USART_Receive_messege_3 & 0xFFFF
//  825        }
//  826         else if(strstr((char const *)(&p->msg[1]),"ERROR"))  //Ê§°Ü¾ÍÖØÆô
??USART_Receive_messege_5:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "ERROR">` & 0xff
        MOV     R5,#(`?<Constant "ERROR">` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ     $+5
        LJMP    ??USART_Receive_messege_3 & 0xFFFF
//  827        {
//  828           ReSetWifi();//ÖØÆôWiFi
??USART_Receive_messege_8:
        ; Setup parameters for call to function ReSetWifi
        LCALL   ?Subroutine8 & 0xFFFF
//  829           Delay_ms(1000);
//  830           HalUARTWrite(1,"AT\r\n",4);
//  831           flat=1;    
//  832        }
//  833     }
??CrossCallReturnLabel_10:
        LJMP    ??USART_Receive_messege_3 & 0xFFFF
//  834      else if(flat==2) //Á´½ÓWiFi
??USART_Receive_messege_4:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??USART_Receive_messege_9 & 0xFFFF
//  835     {
//  836        if(strstr((char const *)(&p->msg[1]),"OK"))
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        JNZ     $+5
        LJMP    ??USART_Receive_messege_3 & 0xFFFF
//  837        {
//  838           memset(nn,0,100);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x64
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 147)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 145)
//  839           sprintf(nn,"AT+CWJAP= \"%s\",\"%s\"\r\n",LYSSID,LYPASSWD);
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 0,#`?<Constant "15876376419">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "15876376419">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 147)
        MOV     ?V0 + 0,#`?<Constant "Redmi_K40">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Redmi_K40">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 149)
        MOV     R4,#`?<Constant "AT+CWJAP= \\"%s\\",\\"%s\\"\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "AT+CWJAP= \\"%s\\",\\"%s\\"\\r\\n">` >> 8) & 0xff
        MOV     A,#0x27
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 145)
//  840           HalUARTWrite(1,(unsigned char*)nn, strlen(nn));//Á¬½Ó±¾µØWiFi
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x23
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x23
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  841           //ÏÔÊ¾Á¬½ÓÂ·ÓÉ
//  842           LCD_CLS();
        ; Setup parameters for call to function LCD_CLS
        LCALL   ??LCD_CLS?relay
//  843           for(i=0; i<2; i++){
        MOV     R6,#0x0
        MOV     R7,#0x0
//  844             LCD_P16x16Ch(16*i, 0, i+4);
??USART_Receive_messege_10:
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     A,R6
        ADD     A,#0x4
        MOV     R3,A
        MOV     R2,#0x0
        LCALL   ?Subroutine13 & 0xFFFF
//  845            }
??CrossCallReturnLabel_30:
        JC      ??USART_Receive_messege_10
//  846            for(i=2; i<5; i++){
        MOV     R6,#0x2
        MOV     R7,#0x0
//  847             LCD_P16x16Ch(16*i, 0, i+6);
??USART_Receive_messege_11:
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     A,R6
        ADD     A,#0x6
        MOV     R3,A
        MOV     R2,#0x0
        LCALL   ?Subroutine17 & 0xFFFF
//  848            }
??CrossCallReturnLabel_39:
        SUBB    A,#0x5
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_54:
        JC      ??USART_Receive_messege_11
//  849           flat=3;
        MOV     DPTR,#flat
        MOV     A,#0x3
        MOVX    @DPTR,A
//  850           Delay_ms(1000);Delay_ms(1000);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,A
        LCALL   ??Delay_ms?relay
        ; Setup parameters for call to function Delay_ms
??USART_Receive_messege_12:
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Delay_ms?relay
//  851           Delay_ms(1000);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Delay_ms?relay
//  852           Delay_ms(1000);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LJMP    ??USART_Receive_messege_7 & 0xFFFF
//  853        }
//  854     }
//  855      else if(flat==3) //Á´½Ó·þÎñÆ÷
??USART_Receive_messege_9:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??USART_Receive_messege_13
//  856     {
//  857     
//  858          HalUARTWrite(1,CIPSTART_C, strlen(CIPSTART_C));//Á¬½Ó·þÎñÆ÷
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x28
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"18...">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"18...">` >> 8) & 0xff
        LCALL   ?Subroutine9 & 0xFFFF
//  859          flat=4;
??CrossCallReturnLabel_61:
        MOV     A,#0x4
        MOVX    @DPTR,A
//  860         // HalLcdWriteString("connect onenet",HAL_LCD_LINE_2);
//  861          //ÏÔÊ¾Á¬½ÓOneNETÖÐ
//  862             for(i=0; i<2; i++){
        MOV     R6,#0x0
        MOV     R7,#0x0
//  863             LCD_P16x16Ch(16*i, 2, i+4);
??USART_Receive_messege_14:
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     A,R6
        ADD     A,#0x4
        MOV     R3,A
        MOV     R2,#0x2
        LCALL   ?Subroutine13 & 0xFFFF
//  864            }
??CrossCallReturnLabel_31:
        JC      ??USART_Receive_messege_14
//  865            LCD_P8x16Str(32, 2,"OneNET");
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "OneNET">` & 0xff
        MOV     R5,#(`?<Constant "OneNET">` >> 8) & 0xff
        MOV     R2,#0x2
        MOV     R1,#0x20
        LCALL   ??LCD_P8x16Str?relay
//  866             LCD_P16x16Ch(80, 2, 10);
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0xa
        MOV     R2,#0x2
        MOV     R1,#0x50
        LCALL   ??LCD_P16x16Ch?relay
//  867            
//  868          Delay_ms(1000);Delay_ms(1000);Delay_ms(1000);
        ; Setup parameters for call to function Delay_ms
        SJMP    ??USART_Receive_messege_12
//  869       
//  870       
//  871       
//  872 
//  873     }
//  874     else if(flat==4)  //ÉèÖÃÍ¸´«Ä£Ê½
??USART_Receive_messege_13:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??USART_Receive_messege_15
//  875     {
//  876        if(strstr((char const *)(&p->msg[1]),"OK"))
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        JNZ     $+5
        LJMP    ??USART_Receive_messege_8 & 0xFFFF
//  877        {
//  878           HalUARTWrite(1,CIPMODE_C, strlen(CIPMODE_C));//ÉèÖÃÍ¸´«
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  879            HalUARTWrite(0,"cipmode\n", strlen("cipmode\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "cipmode\\n">` & 0xff
        MOV     R3,#(`?<Constant "cipmode\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Subroutine27_0 & 0xFFFF
//  880           flat=5;
//  881          
//  882           Delay_ms(500);
//  883        }
//  884        else 
//  885        {
//  886           ReSetWifi();//ÖØÆôWiFi
//  887           Delay_ms(1000);
//  888           HalUARTWrite(1,"AT\r\n",4);
//  889           flat=1;    
//  890          // HalUARTWrite(0, "ZIGBEE-WIFI OK6\r\n", 17);
//  891        }
//  892     }
??CrossCallReturnLabel_63:
        MOV     A,#0x5
        LJMP    ??USART_Receive_messege_6 & 0xFFFF
//  893      else if(flat==5) //·¢ËÍÊý¾ÝµÄÃüÁî
??USART_Receive_messege_15:
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??USART_Receive_messege_16
//  894     {
//  895        if(strstr((char const *)(&p->msg[1]),"OK"))
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        JNZ     $+5
        LJMP    ??USART_Receive_messege_8 & 0xFFFF
//  896        {
//  897           HalUARTWrite(1,CIPSEND_C, strlen(CIPSEND_C));//·¢ËÍ
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  898           HalUARTWrite(0,"cipsend\n", strlen("cipsend\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "cipsend\\n">` & 0xff
        MOV     R3,#(`?<Constant "cipsend\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Subroutine27_0 & 0xFFFF
//  899           flat=6;
//  900           Delay_ms(500);
//  901          
//  902        }
//  903        else 
//  904        {
//  905           ReSetWifi();//ÖØÆôWiFi
//  906           Delay_ms(1000);
//  907           HalUARTWrite(1,"AT\r\n",4);
//  908           flat=1;    
//  909        }
//  910     }
??CrossCallReturnLabel_64:
        MOV     A,#0x6
        LJMP    ??USART_Receive_messege_6 & 0xFFFF
//  911     else if(flat==6)  //×¼±¸·¢ËÍÊý¾Ýµ½·þÎñÆ÷
??USART_Receive_messege_16:
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??USART_Receive_messege_3
//  912     {
//  913        if(strstr((char const *)(&p->msg[1]),">"))
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant ">">` & 0xff
        MOV     R5,#(`?<Constant ">">` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        JNZ     $+5
        LJMP    ??USART_Receive_messege_8 & 0xFFFF
//  914        {      
//  915          
//  916          
//  917            //HalLcdWriteString("connected",HAL_LCD_LINE_2);
//  918          //Á¬½Ó³É¹¦
//  919           for(i=0; i<4; i++){
        MOV     R6,#0x0
        MOV     R7,#0x0
//  920             LCD_P16x16Ch(16*i, 4, i+4);
??USART_Receive_messege_17:
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     A,R6
        ADD     A,#0x4
        MOV     R3,A
        MOV     R2,#0x4
        LCALL   ?Subroutine17 & 0xFFFF
//  921            }
??CrossCallReturnLabel_40:
        SUBB    A,#0x4
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_55:
        JC      ??USART_Receive_messege_17
//  922            
//  923             flat=7;
        MOV     DPTR,#flat
        MOV     A,#0x7
        MOVX    @DPTR,A
//  924             HalUARTWrite(1,concmd,35);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x23
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  925           //HalUARTWrite(0,concmd,strlen(concmd));
//  926        }
//  927        else 
//  928        {
//  929           ReSetWifi();//ÖØÆôWiFi
//  930           Delay_ms(1000);
//  931           HalUARTWrite(1,"AT\r\n",4);
//  932           flat=1;    
//  933        }
//  934     }
//  935 
//  936 }
??USART_Receive_messege_3:
        MOV     A,#-0x79
        LJMP    ??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_52:
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_40
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_30
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_31
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf0
        MOV     R1,A
        LCALL   ??LCD_P16x16Ch?relay
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        MOV     A,R6
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_53:
        SUBB    A,#0x2
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_56:
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_30
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_31
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiPicker90 Using cfiCommon1
        CFI (cfiPicker90) NoFunction
        CFI (cfiPicker90) Picker
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??strstr?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOV     R1,#0x1
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        LCALL   ??HalUARTWrite?relay
        MOV     DPTR,#flat
        RET
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        LCALL   ??ReSetWifi?relay
        ; Setup parameters for call to function Delay_ms
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Delay_ms?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
        MOV     DPTR,#flat
        MOV     A,#0x1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 116)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 145)
        CFI Block cfiPicker112 Using cfiCommon1
        CFI (cfiPicker112) NoFunction
        CFI (cfiPicker112) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\000">` & 0xff
        MOV     R3,#(`?<Constant "\\000">` >> 8) & 0xff
        MOV     R1,#0x0
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiPicker112
//  937 
//  938 //»ñÈ¡Ã«Æ¤ÖØÁ¿
//  939 //****************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  940 void Get_Maopi(void)
Get_Maopi:
        CFI Block cfiBlock113 Using cfiCommon0
        CFI Function Get_Maopi
        CODE
//  941 {
        FUNCALL Get_Maopi, HX711_Read
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  942   Weight_Maopi = HX711_Read();    
        ; Setup parameters for call to function HX711_Read
        LCALL   ?Subroutine6 & 0xFFFF
//  943 }
??CrossCallReturnLabel_58:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock113
//  944 //****************************************************
//  945 //³ÆÖØ
//  946 //****************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  947 long Get_Weight(void)
Get_Weight:
        CFI Block cfiBlock114 Using cfiCommon0
        CFI Function Get_Weight
        CODE
//  948 { //char buf_hx711[20];
        FUNCALL Get_Weight, HX711_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  949   HX711_Buffer = HX711_Read();
        ; Setup parameters for call to function HX711_Read
        LCALL   ??HX711_Read?relay
        MOV     DPTR,#HX711_Buffer
        LCALL   ??Subroutine23_0 & 0xFFFF
//  950   //sprintf((char *)buf_hx711,"{HX711_Buffer:%ld,}",HX711_Buffer);
//  951    //HalUARTWrite(0,buf_hx711, strlen(buf_hx711));  
//  952   Weight_Shiwu = HX711_Buffer;
??CrossCallReturnLabel_59:
        MOV     DPTR,#HX711_Buffer
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#Weight_Shiwu
        LCALL   ?XSTORE_R2345
//  953   if(Weight_Shiwu>Weight_Maopi){
        MOV     DPTR,#Weight_Shiwu
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPH,#(Weight_Maopi >> 8) & 0xff
        MOV     DPL,#Weight_Maopi & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GT_X
        JNC     ??Get_Weight_0
//  954   Weight_Shiwu = Weight_Shiwu - Weight_Maopi;       //»ñÈ¡ÊµÎïµÄAD²ÉÑùÊýÖµ¡£
        MOV     DPTR,#Weight_Maopi
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#Weight_Shiwu
        MOV     R0,#?V0 + 0
        LCALL   ?L_SUB_FROM_X
        SJMP    ??Get_Weight_1
//  955   }
//  956   else{
//  957     Weight_Shiwu=0;
??Get_Weight_0:
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#Weight_Shiwu
        LCALL   ?XSTORE_R2345
//  958   }
//  959   
//  960    //sprintf((char *)buf_hx711,"{Weight_Shiwu:%ld,}",Weight_Shiwu);
//  961    //HalUARTWrite(0,buf_hx711, strlen(buf_hx711));
//  962   Weight_Shiwu = (long)((float)Weight_Shiwu/GapValue);  
??Get_Weight_1:
        MOV     DPTR,#Weight_Shiwu
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_43d70000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     DPTR,#Weight_Shiwu
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  963   return Weight_Shiwu;
        MOV     DPTR,#Weight_Shiwu
        LCALL   ?XLOAD_R2345
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock114
//  964 }
//  965 
//  966 //¶ÁÑ¹Á¦´«¸ÐÆ÷Êý¾Ý
//  967 //#define ADDO P0_1
//  968 //#define ADSK P0_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  969 unsigned int HX711_Read(void)
HX711_Read:
        CFI Block cfiBlock115 Using cfiCommon0
        CFI Function HX711_Read
        CODE
//  970 {
        FUNCALL HX711_Read, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HX711_Read, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  971  unsigned int Count;
//  972  unsigned char i;
//  973  P0_1=1;
        SETB    0x80.1
//  974  //ADSK=1;
//  975 Delay_us();
        ; Setup parameters for call to function Delay_us
        LCALL   ??Delay_us?relay
//  976  P0_0=0; //Ê¹ÄÜAD£¨PD_SCK ÖÃµÍ£©
        CLR     0x80.0
//  977  Delay_us();
        ; Setup parameters for call to function Delay_us
        LCALL   ??Delay_us?relay
//  978  Count=0;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  979  while(P0_1); //AD×ª»»Î´½áÊøÔòµÈ´ý£¬·ñÔò¿ªÊ¼¶ÁÈ¡
??HX711_Read_0:
        MOV     C,0x80.1
        JC      ??HX711_Read_0
//  980  for (i=0;i<24;i++)
        MOV     R0,#0x18
//  981  {
//  982  P0_0=1; //PD_SCK ÖÃ¸ß£¨·¢ËÍÂö³å£©
??HX711_Read_1:
        SETB    0x80.0
//  983  Count=Count<<1; //ÏÂ½µÑØÀ´Ê±±äÁ¿Count×óÒÆÒ»Î»£¬ÓÒ²à²¹Áã
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
        MOV     A,R3
        RLC     A
        MOV     R3,A
//  984  P0_0=0; //PD_SCK ÖÃµÍ
        CLR     0x80.0
//  985  if(P0_1) Count++;
        MOV     C,0x80.1
        JNC     ??HX711_Read_2
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
//  986  }
??HX711_Read_2:
        DEC     R0
        MOV     A,R0
        JNZ     ??HX711_Read_1
//  987  P0_0=1;
        SETB    0x80.0
//  988  Count=Count^0x800000;//µÚ25¸öÂö³åÏÂ½µÑØÀ´Ê±£¬×ª»»Êý¾Ý
//  989  P0_0=0;
        CLR     0x80.0
//  990  return(Count);
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock115
        REQUIRE _A_P0
//  991 }
//  992 
//  993 /*********************************************************************
//  994  * @fn      SampleApp_Send_P2P_Message
//  995  *
//  996  * @brief   point to point.
//  997  *
//  998  * @param   none
//  999  *
// 1000  * @return  none
// 1001  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1002 void SampleApp_Send_P2P_Message( void )
SampleApp_Send_P2P_Message:
        CFI Block cfiBlock116 Using cfiCommon0
        CFI Function SampleApp_Send_P2P_Message
        CODE
// 1003 {
        FUNCALL SampleApp_Send_P2P_Message, ReadGasData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, DHT11
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, Get_Weight
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1004  
// 1005   //unsigned char pre_txbuf[20];
// 1006   /*
// 1007   if(getmaopi_flag==0){
// 1008    Get_Maopi();
// 1009    getmaopi_flag=1;
// 1010   }*/
// 1011   //¶ÁÈ¡ÑÌÎí´«¸ÐÆ÷Òý½ÅÉÏµÄad×ª»»Öµ
// 1012   GasData = ReadGasData();  
        ; Setup parameters for call to function ReadGasData
        LCALL   ??ReadGasData?relay
        MOV     DPTR,#GasData
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1013    //¶ÁÈ¡ÎÂÊª¶È´«¸ÐÆ÷Êý¾Ý
// 1014   DHT11();
        ; Setup parameters for call to function DHT11
        LCALL   ??DHT11?relay
// 1015     //¶ÁÈ¡Ñ¹Á¦´«¸ÐÆ÷Êý¾Ý
// 1016    unsigned long food=Get_Weight();
        ; Setup parameters for call to function Get_Weight
        LCALL   ??Get_Weight?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
// 1017    
// 1018   sprintf((char *)TxBuf,"{\"Air\":%d,\"temp\":%d,\"humid\":%d,\"food\":%ld}\r\n",GasData,ucharT_data_H,ucharRH_data_H,food);
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPTR,#ucharRH_data_H
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPTR,#ucharT_data_H
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     DPTR,#GasData
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#`?<Constant "{\\"Air\\":%d,\\"temp\\":%d,\\"...">` & 0xff
        MOV     R5,#(`?<Constant "{\\"Air\\":%d,\\"temp\\":%d,\\"...">` >> 8) & 0xff
        MOV     R2,#TxBuf & 0xff
        MOV     R3,#(TxBuf >> 8) & 0xff
        LCALL   ??sprintf?relay
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1019   HalUARTWrite(0,TxBuf, strlen(TxBuf));                 //´®¿ÚÏÔÊ¾  
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     R2,#TxBuf & 0xff
        MOV     R3,#(TxBuf >> 8) & 0xff
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#TxBuf & 0xff
        MOV     R3,#(TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
// 1020     
// 1021   if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
// 1022                        SAMPLEAPP_P2P_CLUSTERID,
// 1023                       strlen(TxBuf),
// 1024                       TxBuf,
// 1025                        &SampleApp_TransID,
// 1026                        AF_DISCV_ROUTE,
// 1027                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#TxBuf & 0xff
        MOV     ?V0 + 1,#(TxBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        ; Setup parameters for call to function strlen
        MOV     R2,#TxBuf & 0xff
        MOV     R3,#(TxBuf >> 8) & 0xff
        LCALL   ??strlen?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_P2P_DstAddr & 0xff
        MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        JZ      ??SampleApp_Send_P2P_Message_0
// 1028   {
// 1029   }
// 1030   else
// 1031   {
// 1032      HalUARTWrite(0,"TxBuf error", 11); 
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "TxBuf error">` & 0xff
        MOV     R3,#(`?<Constant "TxBuf error">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
// 1033     // Error occurred in request to send.
// 1034   }
// 1035 /*
// 1036    if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
// 1037                        SAMPLEAPP_PERIODIC_CLUSTERID,
// 1038                       strlen(pre_txbuf),
// 1039                       pre_txbuf,
// 1040                        &SampleApp_TransID,
// 1041                        AF_DISCV_ROUTE,
// 1042                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
// 1043   {
// 1044   }
// 1045   else
// 1046   {
// 1047      HalUARTWrite(0,"pre_txbuf error", 15); 
// 1048     // Error occurred in request to send.
// 1049   }
// 1050 */
// 1051 }
??SampleApp_Send_P2P_Message_0:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock116

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for flat>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??send_onenet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    send_onenet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??publish_msg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    publish_msg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sub_msg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sub_msg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_data?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    get_data

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadGasData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadGasData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReSetWifi?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReSetWifi

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??USART_Receive_messege?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    USART_Receive_messege

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Get_Maopi?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Get_Maopi

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Get_Weight?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Get_Weight

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HX711_Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HX711_Read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Send_P2P_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Send_P2P_Message

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "success\\n">`:
        DB "success\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT\\r\\n">`:
        DB "AT\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ",">`:
        DB ","

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {192, 0}>`:
        DATA8
        DB 192
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "\\000">`:
        DB 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "temp:%d">`:
        DB "temp:%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"temp\\"">`:
        DB "\"temp\""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "humid:%d">`:
        DB "humid:%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"humid\\"">`:
        DB "\"humid\""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "air:%d">`:
        DB "air:%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"Air\\"">`:
        DB "\"Air\""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "food:%d">`:
        DB "food:%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"food\\"">`:
        DB "\"food\""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {16, 33, 0, 4, 77, 81, 84, 84, 4, 1`:
        DB 16
        DB 33
        DB 0
        DB 4
        DB 77
        DB 81
        DB 84
        DB 84
        DB 4
        DB 192
        DB 0
        DB 120
        DB 0
        DB 10
        DB 49
        DB 48
        DB 55
        DB 57
        DB 57
        DB 54
        DB 56
        DB 57
        DB 52
        DB 55
        DB 0
        DB 6
        DB 53
        DB 57
        DB 48
        DB 57
        DB 52
        DB 53
        DB 0
        DB 1
        DB 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK">`:
        DB "OK"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWMODE=3\\r\\n">`:
        DB "AT+CWMODE=3\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ERROR">`:
        DB "ERROR"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWJAP= \\"%s\\",\\"%s\\"\\r\\n">`:
        DB "AT+CWJAP= \"%s\",\"%s\"\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Redmi_K40">`:
        DB "Redmi_K40"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "15876376419">`:
        DB "15876376419"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSTART=\\"TCP\\",\\"18...">`:
        DB "AT+CIPSTART=\"TCP\",\"183.230.40.39\",6002\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OneNET">`:
        DB "OneNET"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMODE=1\\r\\n">`:
        DB "AT+CIPMODE=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "cipmode\\n">`:
        DB "cipmode\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSEND\\r\\n">`:
        DB "AT+CIPSEND\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "cipsend\\n">`:
        DB "cipsend\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ">">`:
        DB ">"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "{\\"Air\\":%d,\\"temp\\":%d,\\"...">`:
        DB "{\"Air\":%d,\"temp\":%d,\"humid\":%d,\"food\":%ld}\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TxBuf error">`:
        DB "TxBuf error"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_43d70000:
        DD 43D70000H

        END
// 1052 /*********************************************************************
// 1053 *********************************************************************/
// 
// 3 419 bytes in segment BANKED_CODE
//   102 bytes in segment BANK_RELAYS
//     8 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//   367 bytes in segment XDATA_ROM_C
//   130 bytes in segment XDATA_Z
// 
// 3 522 bytes of CODE  memory
//   359 bytes of CONST memory (+ 8 bytes shared)
//     0 bytes of DATA  memory (+ 8 bytes shared)
//   131 bytes of XDATA memory
//
//Errors: none
//Warnings: 20

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         14/May/2023  18:48:48 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Sour #
#                          ce\SampleApp.c                                     #
#    Command line       =  -f C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg       #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg         #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Sour #
#                          ce\SampleApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D         #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\86158\Desktop\8.Æ #
#                          øÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\Lis #
#                          t\ -lA C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\CoordinatorEB-Pro\List\                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB-Pro\Obj\ -e --debug             #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\86158\Desktop\8.Æ #
#                          øÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\ -I                   #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\SOURCE\ -I C:\Users\86158\Desktop\8.ÆøÌå´« #
#                          ¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\   #
#                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\MT\ -I           #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I     #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB #
#                          \ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC #
#                          \ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\  #
#                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I     #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I      #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I        #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I            #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I  #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I  #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I     #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I  #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04 #
#                          \ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\ #
#                          srf04\SINGLE_CHIP\ -Ohz --require_prototypes       #
#    List file          =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB-Pro\List\SampleApp.lst          #
#    Object file        =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB-Pro\Obj\SampleApp.r51           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          
     66          #include "SampleApp.h"
     67          #include "SampleAppHw.h"
     68          
     69          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     70          
     71          /* HAL */
     72          #include "hal_lcd.h"
     73          #include "hal_led.h"
     74          #include "hal_key.h"
     75          #include "MT_UART.h"
     76          #include "MT_APP.h"
     77          #include "MT.h"
     78          
     79          #include "DHT11.h"
     80          #include <stdio.h>
     81          #include <string.h>
     82          
     83          /*********************************************************************
     84           * MACROS
     85           */
     86          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])

   \                                 In  segment XDATA_I, align 1, keep-with-next
     87          uint8 flat = 1;
   \                     flat:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for flat>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          uint8 con_succ=0;
   \                     con_succ:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     89          //ÐèÒªÐÞ¸ÄµÄÊÇÏÂÃæ4ÐÐ
     90          #define  devkey   "REWZhCwwBa=6WWaBam6onjn5=HM="   //onenetÆ½Ì¨²úÆ·apikey
     91          #define  devid    "1067058780"                      //onenetÆ½Ì¨Éè±¸id
     92          #define  LYSSID   "Redmi_K40"                      // ÐÞ¸ÄÄãÂ·ÓÉÆ÷µÄSSId
     93          #define  LYPASSWD "15876376419"                   // ÐÞ¸ÄÄãÂ·ÓÉÆ÷µÄÃÜÂë
     94          
     95          #define WIFIRESET       P0_6                            // P0.6¿Ú¿ØÖÆreset
     96          //WIFIÁ¬½ÓÃüÁî
     97          #define AT_C       "AT\r\n"
     98          #define CWMODE_C   "AT+CWMODE=3\r\n"  //STA+APÄ£Ê½
     99          //#define CIPSTART_C "AT+CIPSTART=\"TCP\",\"192.168.1.3\",8234\r\n" //Á¬½ÓHTTP·þÎñÆ÷192.168.1.4,8234  8234ÊÇ·þÎñÆ÷µÄ¶Ë¿ÚºÅ ---±¾µØ²âÊÔ
    100          #define CIPSTART_C "AT+CIPSTART=\"TCP\",\"183.230.40.39\",6002\r\n"   //Á¬½ÓÔÆ·þÎñÆ÷
    101          #define CIPMODE_C  "AT+CIPMODE=1\r\n"   //Í¸´«Ä£Ê½
    102          #define CIPSEND_C  "AT+CIPSEND\r\n"     //·¢ËÍÊý¾ÝµÄÖ¸Áî
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          /*********************************************************************
    109           * TYPEDEFS
    110           */
    111          
    112          /*********************************************************************
    113           * GLOBAL VARIABLES
    114           */
    115          
    116          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    117          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    118          {
    119            SAMPLEAPP_PERIODIC_CLUSTERID,
    120            SAMPLEAPP_FLASH_CLUSTERID
    121          };
    122          

   \                                 In  segment XDATA_ROM_C, align 1
    123          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    124          {
    125            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    126            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    127            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    128            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    129            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    130            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    131            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    132            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    133            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    134          };
    135          
    136          // This is the Endpoint/Interface description.  It is defined here, but
    137          // filled-in in SampleApp_Init().  Another way to go would be to fill
    138          // in the structure here and make it a "const" (in code space).  The
    139          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    141          
    142          /*********************************************************************
    143           * EXTERNAL VARIABLES
    144           */
    145          
    146          /*********************************************************************
    147           * EXTERNAL FUNCTIONS
    148           */
    149          
    150          /*********************************************************************
    151           * LOCAL VARIABLES
    152           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154                                    // This variable will be received when
    155                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    165                                  

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          unsigned char concmd[]={0x10,0x21,0x00,0x04,0x4D,0x51,0x54,0x54,0x04,0xC0,0x00,0x78,0x00,0x0A,0x31,0x30,0x37,0x39,0x39,0x36,0x38,0x39,0x34,0x37,0x00,0x06,0x35,0x39,0x30,0x39,0x34,0x35,0x00,0x01,0x32};
   \                     concmd:
   \   000000                DS 35
   \   000023                REQUIRE `?<Initializer for concmd>`
   \   000023                REQUIRE __INIT_XDATA_I
    167            

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          
    171          /*********************************************************************
    172           * LOCAL FUNCTIONS
    173           */
    174          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    175          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    176          void SampleApp_SendPeriodicMessage( void );
    177          void SampleApp_SendFlashMessage( uint16 flashTime );
    178          void SampleApp_Send_P2P_Message(void);
    179          uint16 ReadGasData(void);
    180          void ReSetWifi(void);
    181          void USART_Receive_messege(mtOSALSerialData_t *MSGpkt);
    182          void publish_msg(afIncomingMSGPacket_t *pkt);
    183          void sub_msg(void);
    184          void send_onenet(afIncomingMSGPacket_t *pkt);
    185          /*********************************************************************
    186           * NETWORK LAYER CALLBACKS
    187           */
    188          
    189          /*********************************************************************
    190           * PUBLIC FUNCTIONS
    191           */
    192          
    193          /*********************************************************************
    194           * @fn      SampleApp_Init
    195           *
    196           * @brief   Initialization function for the Generic App Task.
    197           *          This is called during initialization and should contain
    198           *          any application specific initialization (ie. hardware
    199           *          initialization/setup, table initialization, power up
    200           *          notificaiton ... ).
    201           *
    202           * @param   task_id - the ID assigned by OSAL.  This ID should be
    203           *                    used to send messages and set timers.
    204           *
    205           * @return  none
    206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    207          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    208          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    209            unsigned char tmp[10];
                                 ^
Warning[Pe550]: variable "tmp" was set but never used
    210            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    211            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    212            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    213            
    214            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    215            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    216             //HalUARTWrite(0,"success\n", 9);
    217             //HalUARTWrite(1,"success2\n", 9);
    218             tmp[0] = HAL_UART_DMA+0x30;
    219            tmp[1] = HAL_UART_ISR+0x30;
    220            tmp[2] = HAL_UART_USB+0x30;
    221              //HalUARTWrite(0, tmp, 6);
    222             P0SEL &= 0x7f;           //P0_7ÅäÖÃ³ÉÍ¨ÓÃio ÎÂÊª¶È
   \   00001E   53F37F       ANL     0xf3,#0x7f
    223             ReSetWifi();
   \   000021                ; Setup parameters for call to function ReSetWifi
   \   000021   12....       LCALL   ?Subroutine1 & 0xFFFF
    224             Delay_ms(1000);                //µÈ´ýÄ£¿éÆô¶¯
    225            HalUARTWrite(1,"AT\r\n",strlen("AT\r\n")); //·¢ËÍAT¼ì²âWiFiÄ£¿é
    226            flat = 1;
    227           
    228            // Device hardware initialization can be added here or in main() (Zmain.c).
    229            // If the hardware is application specific - add it here.
    230            // If the hardware is other parts of the device add it in main().
    231          
    232           #if defined ( BUILD_ALL_DEVICES )
    233            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    234            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    235            // together - if they are - we will start up a coordinator. Otherwise,
    236            // the device will start as a router.
    237            if ( readCoordinatorJumper() )
    238              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    239            else
    240              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    241          #endif // BUILD_ALL_DEVICES
    242          
    243          #if defined ( HOLD_AUTO_START )
    244            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    245            //  from starting the device and wait for the application to
    246            //  start the device.
    247            ZDOInitDevice(0);
    248          #endif
    249          
    250            // Setup for the periodic message's destination address
    251            // Broadcast to everyone
    252            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \                     ??CrossCallReturnLabel_0:
   \   000024   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000027   740F         MOV     A,#0xf
   \   000029   F0           MOVX    @DPTR,A
    253            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002A   A3           INC     DPTR
   \   00002B   7414         MOV     A,#0x14
   \   00002D   F0           MOVX    @DPTR,A
    254            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000031   74FF         MOV     A,#-0x1
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   F0           MOVX    @DPTR,A
    255          
    256            // Setup for the flash command's destination address - Group 1
    257            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000036   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000039   7401         MOV     A,#0x1
   \   00003B   F0           MOVX    @DPTR,A
    258            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003C   A3           INC     DPTR
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    259            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
    260            
    261            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000049   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   00004C   7402         MOV     A,#0x2
   \   00004E   F0           MOVX    @DPTR,A
    262            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00004F   A3           INC     DPTR
   \   000050   7414         MOV     A,#0x14
   \   000052   F0           MOVX    @DPTR,A
    263            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000053   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   F0           MOVX    @DPTR,A
    264          
    265            // Fill out the endpoint description.
    266            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    267            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000060   A3           INC     DPTR
   \   000061   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000067   F0           MOVX    @DPTR,A
    268            SampleApp_epDesc.simpleDesc
    269                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006F   F0           MOVX    @DPTR,A
    270            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000070   A3           INC     DPTR
   \   000071   E4           CLR     A
   \   000072   F0           MOVX    @DPTR,A
    271          
    272            // Register the endpoint description with the AF
    273            afRegister( &SampleApp_epDesc );
   \   000073                ; Setup parameters for call to function afRegister
   \   000073   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000075   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000077   12....       LCALL   ??afRegister?relay
    274          
    275            // Register for all key events - This app will handle all key events
    276            RegisterForKeys( SampleApp_TaskID );
   \   00007A                ; Setup parameters for call to function RegisterForKeys
   \   00007A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??RegisterForKeys?relay
    277          
    278            // By default, all devices start out in Group 1
    279            SampleApp_Group.ID = 0x0001;
   \   000082   90....       MOV     DPTR,#SampleApp_Group
   \   000085   7401         MOV     A,#0x1
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
    280            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000098   7C07         MOV     R4,#0x7
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A0   12....       LCALL   ??osal_memcpy?relay
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    281            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A8                ; Setup parameters for call to function aps_AddGroup
   \   0000A8   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AA   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000AC   7914         MOV     R1,#0x14
   \   0000AE   12....       LCALL   ??aps_AddGroup?relay
    282          
    283          #if defined ( LCD_SUPPORTED )
    284            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B1                ; Setup parameters for call to function HalLcdWriteString
   \   0000B1   7901         MOV     R1,#0x1
   \   0000B3   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B5   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B7   12....       LCALL   ??HalLcdWriteString?relay
    285          #endif
    286          }
   \   0000BA   7F03         MOV     R7,#0x3
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000BF                REQUIRE P0SEL

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ??ReSetWifi?relay
   \   000003                ; Setup parameters for call to function Delay_ms
   \   000003                ; Setup parameters for call to function Delay_ms
   \   000003   7AE8         MOV     R2,#-0x18
   \   000005   7B03         MOV     R3,#0x3
   \   000007   12....       LCALL   ??Delay_ms?relay
   \   00000A                ; Setup parameters for call to function HalUARTWrite
   \   00000A                ; Setup parameters for call to function HalUARTWrite
   \   00000A   7C04         MOV     R4,#0x4
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7A..         MOV     R2,#`?<Constant "AT\\r\\n">` & 0xff
   \   000010   7B..         MOV     R3,#(`?<Constant "AT\\r\\n">` >> 8) & 0xff
   \   000012   7901         MOV     R1,#0x1
   \   000014   12....       LCALL   ??HalUARTWrite?relay
   \   000017   90....       MOV     DPTR,#flat
   \   00001A   7401         MOV     A,#0x1
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   22           RET
    287          
    288          /*********************************************************************
    289           * @fn      SampleApp_ProcessEvent
    290           *
    291           * @brief   Generic Application Task event processor.  This function
    292           *          is called to process all events for the task.  Events
    293           *          include timers, messages and any other user defined events.
    294           *
    295           * @param   task_id  - The OSAL assigned task ID.
    296           * @param   events - events to process.  This is a bit map and can
    297           *                   contain more than one event.
    298           *
    299           * @return  none
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    302          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    303            afIncomingMSGPacket_t *MSGpkt;
    304            (void)task_id;  // Intentionally unreferenced parameter
    305          
    306            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    307            {
    308              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   8026         SJMP    ??SampleApp_ProcessEvent_1
    309              while ( MSGpkt )
    310              {
    311                switch ( MSGpkt->hdr.event )
    312                {
    313                  // Received when a key is pressed
    314                  case KEY_CHANGE:
    315                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    316                    break;
    317          
    318                  // Received when a messages is received (OTA) for this endpoint
    319                  case AF_INCOMING_MSG_CMD:
    320                    SampleApp_MessageMSGCB( MSGpkt );
    321                    break;
    322                  case CMD_SERIAL_MSG:
    323                        USART_Receive_messege((mtOSALSerialData_t *)MSGpkt);
    324                         //HalUARTWrite(1,"ATOK",strlen("ATOK"));
    325                        break;
    326                  
    327          
    328                  // Received whenever the device changes state in the network
    329                  case ZDO_STATE_CHANGE:
    330                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    331                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    332                           (SampleApp_NwkState == DEV_ROUTER)
    333                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000018   6407         XRL     A,#0x7
   \   00001A   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6406         XRL     A,#0x6
   \   00001F   7010         JNZ     ??SampleApp_ProcessEvent_4
    334                    {
    335                      // Start sending the periodic message in a regular interval.
    336                      osal_start_timerEx( SampleApp_TaskID,
    337                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    338                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   7CE8         MOV     R4,#-0x18
   \   000023   7D03         MOV     R5,#0x3
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_start_timerEx?relay
    339                    }
    340                    else
    341                    {
    342                      // Device is no longer in the network
    343                    }
    344                    break;
    345          
    346                  default:
    347                    break;
    348                }
    349          
    350                // Release the memory
    351                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000031                ; Setup parameters for call to function osal_msg_deallocate
   \   000031   AA..         MOV     R2,?V0 + 0
   \   000033   AB..         MOV     R3,?V0 + 1
   \   000035   12....       LCALL   ??osal_msg_deallocate?relay
    352          
    353                // Next - if one is available
    354                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000038                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000038   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??osal_msg_receive?relay
   \   000040   8A..         MOV     ?V0 + 0,R2
   \   000042   8B..         MOV     ?V0 + 1,R3
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   45..         ORL     A,?V0 + 1
   \   000048   603E         JZ      ??SampleApp_ProcessEvent_5
   \   00004A   85..82       MOV     DPL,?V0 + 0
   \   00004D   85..83       MOV     DPH,?V0 + 1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   14           DEC     A
   \   000052   602B         JZ      ??SampleApp_ProcessEvent_6
   \   000054   24E7         ADD     A,#-0x19
   \   000056   601E         JZ      ??SampleApp_ProcessEvent_7
   \   000058   245A         ADD     A,#0x5a
   \   00005A   6006         JZ      ??SampleApp_ProcessEvent_8
   \   00005C   24EF         ADD     A,#-0x11
   \   00005E   60B2         JZ      ??SampleApp_ProcessEvent_2
   \   000060   80CF         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_8:
   \   000062                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FA           MOV     R2,A
   \   000067   85..82       MOV     DPL,?V0 + 0
   \   00006A   85..83       MOV     DPH,?V0 + 1
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000074   80BB         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000076                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000076   AA..         MOV     R2,?V0 + 0
   \   000078   AB..         MOV     R3,?V0 + 1
   \   00007A   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007D   80B2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   00007F                ; Setup parameters for call to function USART_Receive_messege
   \   00007F   AA..         MOV     R2,?V0 + 0
   \   000081   AB..         MOV     R3,?V0 + 1
   \   000083   12....       LCALL   ??USART_Receive_messege?relay
   \   000086   80A9         SJMP    ??SampleApp_ProcessEvent_4
    355              }
    356          
    357              // return unprocessed events
    358              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000088   EE           MOV     A,R6
   \   000089   FA           MOV     R2,A
   \   00008A   EF           MOV     A,R7
   \   00008B   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_9:
   \   00008D   FB           MOV     R3,A
   \   00008E   802A         SJMP    ??SampleApp_ProcessEvent_10
    359            }
    360          
    361            // Send a message out - This event is generated by a timer
    362            //  (setup in SampleApp_Init()).
    363            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000090   EE           MOV     A,R6
   \   000091   A2E0         MOV     C,0xE0 /* A   */.0
   \   000093   5021         JNC     ??SampleApp_ProcessEvent_11
    364            {
    365              // Send the periodic message
    366              //SampleApp_SendPeriodicMessage();
    367              SampleApp_Send_P2P_Message();
   \   000095                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000095   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    368          
    369              // Setup to send message again in normal period (+ a little jitter)
    370              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    371                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT+(osal_rand() & 0x00FF)));
   \   000098                ; Setup parameters for call to function osal_rand
   \   000098   12....       LCALL   ??osal_rand?relay
   \   00009B                ; Setup parameters for call to function osal_start_timerEx
   \   00009B   EA           MOV     A,R2
   \   00009C   24E8         ADD     A,#-0x18
   \   00009E   FC           MOV     R4,A
   \   00009F   E4           CLR     A
   \   0000A0   3403         ADDC    A,#0x3
   \   0000A2   FD           MOV     R5,A
   \   0000A3   7A01         MOV     R2,#0x1
   \   0000A5   7B00         MOV     R3,#0x0
   \   0000A7   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   12....       LCALL   ??osal_start_timerEx?relay
    372          
    373              // return unprocessed events
    374              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000AF   EE           MOV     A,R6
   \   0000B0   6401         XRL     A,#0x1
   \   0000B2   FA           MOV     R2,A
   \   0000B3   EF           MOV     A,R7
   \   0000B4   80D7         SJMP    ??SampleApp_ProcessEvent_9
    375            }
    376          
    377            // Discard unknown events
    378            return 0;
   \                     ??SampleApp_ProcessEvent_11:
   \   0000B6   7A00         MOV     R2,#0x0
   \   0000B8   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000BA   7F04         MOV     R7,#0x4
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
    379          }
    380          
    381          /*********************************************************************
    382           * Event Generation Functions
    383           */
    384          /*********************************************************************
    385           * @fn      SampleApp_HandleKeys
    386           *
    387           * @brief   Handles all key events for this device.
    388           *
    389           * @param   shift - true if in shift/alt.
    390           * @param   keys - bit field for key events. Valid entries:
    391           *                 HAL_KEY_SW_2
    392           *                 HAL_KEY_SW_1
    393           *
    394           * @return  none
    395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    396          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    397          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    398            (void)shift;  // Intentionally unreferenced parameter
    399            
    400            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    401            {
    402              /* This key sends the Flash Command is sent to Group 1.
    403               * This device will not receive the Flash Command from this
    404               * device (even if it belongs to group 1).
    405               */
    406              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    407            }
    408          
    409            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    410            {
    411              /* The Flashr Command is sent to Group 1.
    412               * This key toggles this device in and out of group 1.
    413               * If this device doesn't belong to group 1, this application
    414               * will not receive the Flash command sent to group 1.
    415               */
    416              aps_Group_t *grp;
    417              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    418              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    419              {
    420                // Remove from the group
    421                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    422              }
    423              else
    424              {
    425                // Add to the flash group
    426                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    427              }
    428            }
    429          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine16_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    430          //ÉÏ´«Êý¾Ýµã

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void send_onenet(afIncomingMSGPacket_t *pkt){
   \                     send_onenet:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    432            unsigned char send_buf[64];
    433             memset(send_buf,0,64);
   \   00000E                ; Setup parameters for call to function memset
   \   00000E   75..40       MOV     ?V0 + 0,#0x40
   \   000011   75..00       MOV     ?V0 + 1,#0x0
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   7C00         MOV     R4,#0x0
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
    434            //×é°ü
    435              send_buf[0]=0x30;
   \   000028   12....       LCALL   ?Subroutine3 & 0xFFFF
    436              send_buf[1]=pkt->cmd.DataLength+6;
   \                     ??CrossCallReturnLabel_5:
   \   00002B   2406         ADD     A,#0x6
   \   00002D   C0E0         PUSH    A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
    437              send_buf[2]=0x00;
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
    438              send_buf[3]=0x03;
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   7403         MOV     A,#0x3
   \   000045   F0           MOVX    @DPTR,A
    439              send_buf[4]=0x24; 
   \   000046   04           INC     A
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7424         MOV     A,#0x24
   \   00004C   F0           MOVX    @DPTR,A
    440              send_buf[5]=0x64;
   \   00004D   7405         MOV     A,#0x5
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7464         MOV     A,#0x64
   \   000054   F0           MOVX    @DPTR,A
    441              send_buf[6]=0x70;
   \   000055   7406         MOV     A,#0x6
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7470         MOV     A,#0x70
   \   00005C   F0           MOVX    @DPTR,A
    442              send_buf[7]=0x03;
   \   00005D   7407         MOV     A,#0x7
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   7403         MOV     A,#0x3
   \   000064   F0           MOVX    @DPTR,A
    443              send_buf[8]=0x00;
   \   000065   7408         MOV     A,#0x8
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E4           CLR     A
   \   00006B   12....       LCALL   ?Subroutine12 & 0xFFFF
    444              send_buf[9]=pkt->cmd.DataLength-2;
   \                     ??CrossCallReturnLabel_29:
   \   00006E   24FE         ADD     A,#-0x2
   \   000070   C0E0         PUSH    A
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   D0E0         POP     A
   \   000079   12....       LCALL   ?Subroutine5 & 0xFFFF
    445              strcpy(&send_buf[10],pkt->cmd.Data);
                            ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

      strcpy(&send_buf[10],pkt->cmd.Data);
                           ^
"C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",445  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??CrossCallReturnLabel_7:
   \   00007C   740A         MOV     A,#0xa
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?Subroutine11 & 0xFFFF
    446              //·¢ËÍ
    447              HalUARTWrite(1, send_buf, pkt->cmd.DataLength+8);
   \                     ??CrossCallReturnLabel_27:
   \   000084   2408         ADD     A,#0x8
   \   000086   02....       LJMP    ?Subroutine0 & 0xFFFF
    448          
    449          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??strcpy?relay
   \   000007                ; Setup parameters for call to function HalUARTWrite
   \   000007                ; Setup parameters for call to function HalUARTWrite
   \   000007   85..82       MOV     DPL,?V0 + 0
   \   00000A   85..83       MOV     DPH,?V0 + 1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function strcpy
   \   000001                ; Setup parameters for call to function strcpy
   \   000001   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7430         MOV     A,#0x30
   \   000008   F0           MOVX    @DPTR,A
   \   000009   EE           MOV     A,R6
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 0,R0
   \   000013   89..         MOV     ?V0 + 1,R1
   \   000015   8882         MOV     DPL,R0
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??memset?relay
   \   000007   7402         MOV     A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTWrite
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV     A,R6
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   FC           MOV     R4,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005                REQUIRE ??Subroutine14_0
   \   000005                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   FD           MOV     R5,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   7901         MOV     R1,#0x1
   \   00000D   12....       LCALL   ??HalUARTWrite?relay
   \   000010   7440         MOV     A,#0x40
   \   000012                REQUIRE ??Subroutine15_0
   \   000012                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine16_0
   \   000003                ; // Fall through to label ??Subroutine16_0
    450          
    451          
    452          //·¢²¼Ö÷Ìâ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          void publish_msg(afIncomingMSGPacket_t *pkt){
   \                     publish_msg:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    454            unsigned char pub_buf[64];
    455             memset(pub_buf,0,64);
   \   00000E                ; Setup parameters for call to function memset
   \   00000E   75..40       MOV     ?V0 + 0,#0x40
   \   000011   75..00       MOV     ?V0 + 1,#0x0
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   7C00         MOV     R4,#0x0
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
    456            //×é°ü
    457              pub_buf[0]=0x30;
   \   000028   12....       LCALL   ?Subroutine3 & 0xFFFF
    458              pub_buf[1]=pkt->cmd.DataLength+5;
   \                     ??CrossCallReturnLabel_6:
   \   00002B   2405         ADD     A,#0x5
   \   00002D   C0E0         PUSH    A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
    459              pub_buf[2]=0x00;
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
    460              pub_buf[3]=0x03;
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   7403         MOV     A,#0x3
   \   000045   F0           MOVX    @DPTR,A
    461              pub_buf[4]=0x6D;   //'m'
   \   000046   04           INC     A
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   746D         MOV     A,#0x6d
   \   00004C   F0           MOVX    @DPTR,A
    462              pub_buf[5]=0x73;  //'s'
   \   00004D   7405         MOV     A,#0x5
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7473         MOV     A,#0x73
   \   000054   F0           MOVX    @DPTR,A
    463              pub_buf[6]=0x67;   //'g'
   \   000055   7406         MOV     A,#0x6
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7467         MOV     A,#0x67
   \   00005C   12....       LCALL   ?Subroutine5 & 0xFFFF
    464              strcpy(&pub_buf[7],pkt->cmd.Data);
                            ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

      strcpy(&pub_buf[7],pkt->cmd.Data);
                         ^
"C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",464  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??CrossCallReturnLabel_8:
   \   00005F   7407         MOV     A,#0x7
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   12....       LCALL   ?Subroutine11 & 0xFFFF
    465              HalUARTWrite(1, pub_buf, pkt->cmd.DataLength+7);
   \                     ??CrossCallReturnLabel_28:
   \   000067   2407         ADD     A,#0x7
   \   000069   02....       LJMP    ?Subroutine0 & 0xFFFF
    466          }
    467          
    468          //¶©ÔÄÖ÷Ìâ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    469          void sub_msg(void){
   \                     sub_msg:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    470            unsigned char sub_buf[64];
    471             memset(sub_buf,0,64);
   \   00000A                ; Setup parameters for call to function memset
   \   00000A   75..40       MOV     ?V0 + 0,#0x40
   \   00000D   75..00       MOV     ?V0 + 1,#0x0
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C00         MOV     R4,#0x0
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    472            //×é°ü
    473              sub_buf[0]=0x82;
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   7482         MOV     A,#-0x7e
   \   00002C   F0           MOVX    @DPTR,A
    474              sub_buf[1]=0x08;  //°üµÄÊ£Óà³¤¶È
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7408         MOV     A,#0x8
   \   000034   F0           MOVX    @DPTR,A
    475              sub_buf[2]=0x00;
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E4           CLR     A
   \   00003B   F0           MOVX    @DPTR,A
    476              sub_buf[3]=0x02;
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7402         MOV     A,#0x2
   \   000043   F0           MOVX    @DPTR,A
    477              sub_buf[4]=0x00;   
   \   000044   7404         MOV     A,#0x4
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
    478              sub_buf[5]=0x03;  
   \   00004B   7405         MOV     A,#0x5
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7403         MOV     A,#0x3
   \   000052   F0           MOVX    @DPTR,A
    479              sub_buf[6]=0x6D;        //'m'
   \   000053   7406         MOV     A,#0x6
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   746D         MOV     A,#0x6d
   \   00005A   F0           MOVX    @DPTR,A
    480              sub_buf[7]=0x73;     //'s'
   \   00005B   7407         MOV     A,#0x7
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   7473         MOV     A,#0x73
   \   000062   F0           MOVX    @DPTR,A
    481              sub_buf[8]=0x67;    //'g'
   \   000063   7408         MOV     A,#0x8
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   7467         MOV     A,#0x67
   \   00006A   F0           MOVX    @DPTR,A
    482              sub_buf[9]=0x00;
   \   00006B   7409         MOV     A,#0x9
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E4           CLR     A
   \   000071   F0           MOVX    @DPTR,A
    483              HalUARTWrite(1, sub_buf, 10);
   \   000072                ; Setup parameters for call to function HalUARTWrite
   \   000072   7C0A         MOV     R4,#0xa
   \   000074   02....       LJMP    ??Subroutine14_0 & 0xFFFF
    484          }
    485          
    486          
    487          /*********************************************************************
    488           * LOCAL FUNCTIONS
    489           */
    490          
    491          /*********************************************************************
    492           * @fn      SampleApp_MessageMSGCB
    493           *
    494           * @brief   Data message processor callback.  This function processes
    495           *          any incoming data - probably from other devices.  So, based
    496           *          on cluster ID, perform the intended action.
    497           *
    498           * @param   none
    499           *
    500           * @return  none
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    503          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 72
   \   000005   74B8         MOV     A,#-0x48
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    504            uint16 flashTime;
    505            char HttpData[170];
    506            char send_data[70];
    507            unsigned char data[64];
    508            unsigned char heart[2]={0xc0,0x00};
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {192, 0}>` >> 8) & 0xff
   \   00001B   7582..       MOV     DPL,#`?<Constant {192, 0}>` & 0xff
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    509            switch ( pkt->clusterId )
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000037   0200         DW        2
   \   000039   02           DB        2
   \   00003A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00003E   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000040   ....         DW        ??SampleApp_MessageMSGCB_2
    510            {
    511              case SAMPLEAPP_P2P_CLUSTERID:
    512          
    513                //HalUARTWrite(0, "ZIGBEE-WIFI OK1\r\n\0", 18);
    514                //sprintf(send_data,"%s\0",pkt->cmd.Data);
    515                //strcat(pkt->cmd.Data,'\0');
    516                //HalUARTWrite(0,send_data,pkt->cmd.DataLength+1);
    517                strcpy(send_data,pkt->cmd.Data);
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \                     ??SampleApp_MessageMSGCB_2:
   \   000042                ; Setup parameters for call to function strcpy
   \   000042   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000045   FC           MOV     R4,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FD           MOV     R5,A
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   \   000052   12....       LCALL   ??strcpy?relay
    518                send_data[pkt->cmd.DataLength-3]=',';
   \   000055   EE           MOV     A,R6
   \   000056   241F         ADD     A,#0x1f
   \   000058   F8           MOV     R0,A
   \   000059   EF           MOV     A,R7
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   F9           MOV     R1,A
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FA           MOV     R2,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FB           MOV     R3,A
   \   000066   7402         MOV     A,#0x2
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00006E   24FD         ADD     A,#-0x3
   \   000070   F582         MOV     DPL,A
   \   000072   EB           MOV     A,R3
   \   000073   34FF         ADDC    A,#-0x1
   \   000075   F583         MOV     DPH,A
   \   000077   742C         MOV     A,#0x2c
   \   000079   12....       LCALL   ?Subroutine2 & 0xFFFF
    519                send_data[pkt->cmd.DataLength-2]='}';
   \                     ??CrossCallReturnLabel_2:
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000082   24FE         ADD     A,#-0x2
   \   000084   F582         MOV     DPL,A
   \   000086   EB           MOV     A,R3
   \   000087   34FF         ADDC    A,#-0x1
   \   000089   F583         MOV     DPH,A
   \   00008B   747D         MOV     A,#0x7d
   \   00008D   12....       LCALL   ?Subroutine2 & 0xFFFF
    520                send_data[pkt->cmd.DataLength-1]='\r';
   \                     ??CrossCallReturnLabel_3:
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000096   24FF         ADD     A,#-0x1
   \   000098   F582         MOV     DPL,A
   \   00009A   EB           MOV     A,R3
   \   00009B   34FF         ADDC    A,#-0x1
   \   00009D   F583         MOV     DPH,A
   \   00009F   740D         MOV     A,#0xd
   \   0000A1   12....       LCALL   ?Subroutine2 & 0xFFFF
    521                send_data[pkt->cmd.DataLength]='\n';
   \                     ??CrossCallReturnLabel_4:
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   E582         MOV     A,DPL
   \   0000A9   2A           ADD     A,R2
   \   0000AA   F582         MOV     DPL,A
   \   0000AC   E583         MOV     A,DPH
   \   0000AE   3B           ADDC    A,R3
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   740A         MOV     A,#0xa
   \   0000B3   12....       LCALL   ?Subroutine12 & 0xFFFF
    522                HalUARTWrite(0,send_data,pkt->cmd.DataLength+1);
                                      ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

    char HttpData[170];
         ^
"C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",505  Warning[Pe177]: 
          variable "HttpData" was declared but never referenced

    unsigned char data[64];
                  ^
"C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",507  Warning[Pe177]: 
          variable "data" was declared but never referenced
   \                     ??CrossCallReturnLabel_30:
   \   0000B6   2401         ADD     A,#0x1
   \   0000B8   FC           MOV     R4,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   3400         ADDC    A,#0x0
   \   0000BD   FD           MOV     R5,A
   \   0000BE   7402         MOV     A,#0x2
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   AA82         MOV     R2,DPL
   \   0000C5   AB83         MOV     R3,DPH
   \   0000C7   12....       LCALL   ?Subroutine6 & 0xFFFF
    523                HalUARTWrite(0, "\0", 1);
   \                     ??CrossCallReturnLabel_9:
   \   0000CA   12....       LCALL   ??Subroutine17_0 & 0xFFFF
    524                if(flat==7)
   \                     ??CrossCallReturnLabel_39:
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   6407         XRL     A,#0x7
   \   0000D0   7056         JNZ     ??SampleApp_MessageMSGCB_0
    525                {   
    526                  //±£³ÖÐÄÌø
    527                  HalUARTWrite(1,heart,2);
   \   0000D2                ; Setup parameters for call to function HalUARTWrite
   \   0000D2   7C02         MOV     R4,#0x2
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   85..82       MOV     DPL,?XSP + 0
   \   0000D9   85..83       MOV     DPH,?XSP + 1
   \   0000DC   AA82         MOV     R2,DPL
   \   0000DE   AB83         MOV     R3,DPH
   \   0000E0   7901         MOV     R1,#0x1
   \   0000E2   12....       LCALL   ??HalUARTWrite?relay
    528                  send_onenet(pkt);
   \   0000E5                ; Setup parameters for call to function send_onenet
   \   0000E5   EE           MOV     A,R6
   \   0000E6   FA           MOV     R2,A
   \   0000E7   EF           MOV     A,R7
   \   0000E8   FB           MOV     R3,A
   \   0000E9   12....       LCALL   ??send_onenet?relay
    529                  publish_msg(pkt);
   \   0000EC                ; Setup parameters for call to function publish_msg
   \   0000EC   EE           MOV     A,R6
   \   0000ED   FA           MOV     R2,A
   \   0000EE   EF           MOV     A,R7
   \   0000EF   FB           MOV     R3,A
   \   0000F0   12....       LCALL   ??publish_msg?relay
   \   0000F3   8033         SJMP    ??SampleApp_MessageMSGCB_0
    530                 
    531                }
    532                 else
    533                {
    534                  //SystemReset();
    535                }       // »Ø³µ»»ÐÐ
    536                
    537                break;    
    538              case SAMPLEAPP_PERIODIC_CLUSTERID:
    539               
    540                break;
    541          
    542              case SAMPLEAPP_FLASH_CLUSTERID:
    543                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    544                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   0000F5   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000F8   F8           MOV     R0,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC                ; Setup parameters for call to function HalLedBlink
   \   0000FC   8882         MOV     DPL,R0
   \   0000FE   8983         MOV     DPH,R1
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   FA           MOV     R2,A
   \   000103   8882         MOV     DPL,R0
   \   000105   8983         MOV     DPH,R1
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F9           MOV     R1,A
   \   00010B   EA           MOV     A,R2
   \   00010C   2400         ADD     A,#0x0
   \   00010E   F5..         MOV     ?V0 + 0,A
   \   000110   E4           CLR     A
   \   000111   39           ADDC    A,R1
   \   000112   F5..         MOV     ?V0 + 1,A
   \   000114   7402         MOV     A,#0x2
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   12....       LCALL   ?US_SHR
   \   00011B   AC..         MOV     R4,?V0 + 0
   \   00011D   AD..         MOV     R5,?V0 + 1
   \   00011F   7B32         MOV     R3,#0x32
   \   000121   7A04         MOV     R2,#0x4
   \   000123   7908         MOV     R1,#0x8
   \   000125   12....       LCALL   ??HalLedBlink?relay
    545                break;
    546            }
    547          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000128   7448         MOV     A,#0x48
   \   00012A   02....       LJMP    ??Subroutine15_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E582         MOV     A,DPL
   \   000002   2A           ADD     A,R2
   \   000003   FA           MOV     R2,A
   \   000004   E583         MOV     A,DPH
   \   000006   3B           ADDC    A,R3
   \   000007   FB           MOV     R3,A
   \   000008   EA           MOV     A,R2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   7402         MOV     A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\000">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\000">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   12....       LCALL   ??HalUARTWrite?relay
   \   000003   90....       MOV     DPTR,#flat
   \   000006   22           RET
    548          
    549          /*********************************************************************
    550           * @fn      SampleApp_SendPeriodicMessage
    551           *
    552           * @brief   Send the periodic message.
    553           *
    554           * @param   none
    555           *
    556           * @return  none
    557           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    558          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    559          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    560           
    561            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    562                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    563                                 1,
    564                                 (uint8*)&SampleAppPeriodicCounter,
    565                                 &SampleApp_TransID,
    566                                 AF_DISCV_ROUTE,
    567                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   80..         SJMP    ??Subroutine15_0
    568            {
    569            }
    570            else
    571            {
    572              // Error occurred in request to send.
    573            }
    574          }
    575          
    576          /*********************************************************************
    577           * @fn      SampleApp_SendFlashMessage
    578           *
    579           * @brief   Send the flash message to group 1.
    580           *
    581           * @param   flashTime - in milliseconds
    582           *
    583           * @return  none
    584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    585          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    586          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    587            uint8 buffer[3];
    588            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    589            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    590            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    591          
    592            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    593                                 SAMPLEAPP_FLASH_CLUSTERID,
    594                                 3,
    595                                 buffer,
    596                                 &SampleApp_TransID,
    597                                 AF_DISCV_ROUTE,
    598                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    599            {
    600            }
    601            else
    602            {
    603              // Error occurred in request to send.
    604            }
    605          }
   \   000071   7403         MOV     A,#0x3
   \   000073   80..         SJMP    ??Subroutine15_0
    606          
    607          //¶ÁÈ¡MQ2´«¸ÐÆ÷Êý¾Ý

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    608          unsigned char TxBuf[30];
   \                     TxBuf:
   \   000000                DS 30
   \   00001E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    609          uint16 GasData;
   \                     GasData:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    610          uint16 ReadGasData(void)
   \                     ReadGasData:
    611          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    612            uint16 reading = 0;
    613            
    614            /* Enable channel */
    615            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    616            
    617            /* writing to this register starts the extra conversion */
    618            ADCCON3 = 0x86;// AVDD5 Òý½Å  00£º 64 ³éÈ¡ÂÊ(7 Î»ENOB)  0110£º AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    619            
    620            /* Wait for the conversion to be done */
    621            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    622            
    623            /* Disable channel after done conversion */
    624            ADCCFG &= (0x40 ^ 0xFF); //°´Î»Òì»ò¡£Èç1010^1111=0101£¨¶þ½øÖÆ£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    625            
    626            /* Read the result */
    627            reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    628            reading |= (int16) (ADCH << 8); 
    629            
    630            reading >>= 8;
    631            
    632            return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    633          }
    634          //¸´Î»WiFiÄ£¿éº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    635          void ReSetWifi(void)
   \                     ReSetWifi:
    636          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    637            P0DIR |= 0x40;                  //P0.6¶¨ÒåÎªÊä³ö
   \   000004   43FD40       ORL     0xfd,#0x40
    638            WIFIRESET = 0;                  //µÍµçÆ½¸´Î»---------------------
   \   000007   C286         CLR     0x80.6
    639            Delay_ms(500);
   \   000009                ; Setup parameters for call to function Delay_ms
   \   000009   7AF4         MOV     R2,#-0xc
   \   00000B   7B01         MOV     R3,#0x1
   \   00000D   12....       LCALL   ??Delay_ms?relay
    640            WIFIRESET = 1;                  //¸ßµçÆ½¹¤×÷------------
   \   000010   D286         SETB    0x80.6
    641             Delay_ms(500);
   \   000012                ; Setup parameters for call to function Delay_ms
   \   000012   7AF4         MOV     R2,#-0xc
   \   000014   7B01         MOV     R3,#0x1
   \   000016   12....       LCALL   ??Delay_ms?relay
    642          }
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
   \   000020                REQUIRE P0DIR
   \   000020                REQUIRE _A_P0
    643          
    644          //´®¿Ú½ÓÊÕÊý¾Ý´¦Àíº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          void USART_Receive_messege(mtOSALSerialData_t *MSGpkt)
   \                     USART_Receive_messege:
    646          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 100
   \   000005   749C         MOV     A,#-0x64
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    647            
    648             //HalUARTWrite(0, "ZIGBEE-WIFI OK8\r\n", 17);
    649              char nn[100];  //mqttÁ¬½Ó»º´æ
    650             // unsigned char recv_buf[64];
    651              mtOSALSerialData_t *p =MSGpkt;
    652             // HalUARTWrite(1,(unsigned char*)(&p->msg[1]), p->msg[0]);
    653              if(flat==7) //ÊÕµ½WIFIºÍÆ½Ì¨½»»¥Êý¾Ý
   \   00000A   EA           MOV     A,R2
   \   00000B   2402         ADD     A,#0x2
   \   00000D   F8           MOV     R0,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   FE           MOV     R6,A
   \   000014   E9           MOV     A,R1
   \   000015   FF           MOV     R7,A
   \   000016   90....       MOV     DPTR,#flat
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6407         XRL     A,#0x7
   \   00001C   6003         JZ      $+5
   \   00001E   02....       LJMP    ??USART_Receive_messege_0 & 0xFFFF
    654          
    655                if(con_succ==0){
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   90....       MOV     DPTR,#con_succ
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   7028         JNZ     ??USART_Receive_messege_1
    656                  if(p->msg[1]==0x20 && p->msg[2]==0x02) 
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6420         XRL     A,#0x20
   \   000038   7016         JNZ     ??USART_Receive_messege_2
   \   00003A   8882         MOV     DPL,R0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6402         XRL     A,#0x2
   \   000043   700B         JNZ     ??USART_Receive_messege_2
    657                  {
    658                      con_succ=1;
   \   000045   90....       MOV     DPTR,#con_succ
   \   000048   7401         MOV     A,#0x1
   \   00004A   F0           MOVX    @DPTR,A
    659                      sub_msg();
   \   00004B                ; Setup parameters for call to function sub_msg
   \   00004B   12....       LCALL   ??sub_msg?relay
   \   00004E   806E         SJMP    ??USART_Receive_messege_0
    660                  }
    661                  else 
    662                    HalUARTWrite(1,concmd,35);
   \                     ??USART_Receive_messege_2:
   \   000050                ; Setup parameters for call to function HalUARTWrite
   \   000050   7C23         MOV     R4,#0x23
   \   000052   7D00         MOV     R5,#0x0
   \   000054   7A..         MOV     R2,#concmd & 0xff
   \   000056   7B..         MOV     R3,#(concmd >> 8) & 0xff
   \   000058   7901         MOV     R1,#0x1
   \   00005A   805F         SJMP    ??CrossCallReturnLabel_10
    663                
    664                }
    665                else{
    666                  if(p->msg[0]>7){
   \                     ??USART_Receive_messege_1:
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   C3           CLR     C
   \   00005E   9408         SUBB    A,#0x8
   \   000060   5003         JNC     $+5
   \   000062   02....       LJMP    ??USART_Receive_messege_3 & 0xFFFF
    667                    if(p->msg[1]==0x30 && p->msg[5]=='m' && p->msg[6]=='s' && p->msg[7]=='g')
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6430         XRL     A,#0x30
   \   000069   6003         JZ      $+5
   \   00006B   02....       LJMP    ??USART_Receive_messege_3 & 0xFFFF
   \   00006E   8882         MOV     DPL,R0
   \   000070   8983         MOV     DPH,R1
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   646D         XRL     A,#0x6d
   \   00007A   6003         JZ      $+5
   \   00007C   02....       LJMP    ??USART_Receive_messege_3 & 0xFFFF
   \   00007F   8882         MOV     DPL,R0
   \   000081   8983         MOV     DPH,R1
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   6473         XRL     A,#0x73
   \   00008C   6003         JZ      $+5
   \   00008E   02....       LJMP    ??USART_Receive_messege_3 & 0xFFFF
   \   000091   8882         MOV     DPL,R0
   \   000093   8983         MOV     DPH,R1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6467         XRL     A,#0x67
   \   00009F   6003         JZ      $+5
   \   0000A1   02....       LJMP    ??USART_Receive_messege_3 & 0xFFFF
    668                      {
    669                        
    670                         HalUARTWrite(0,(unsigned char*)(&p->msg[8]), p->msg[0]-7);
   \   0000A4                ; Setup parameters for call to function HalUARTWrite
   \   0000A4   8882         MOV     DPL,R0
   \   0000A6   8983         MOV     DPH,R1
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   24F9         ADD     A,#-0x7
   \   0000AB   FC           MOV     R4,A
   \   0000AC   E4           CLR     A
   \   0000AD   34FF         ADDC    A,#-0x1
   \   0000AF   FD           MOV     R5,A
   \   0000B0   E8           MOV     A,R0
   \   0000B1   2408         ADD     A,#0x8
   \   0000B3   FA           MOV     R2,A
   \   0000B4   E9           MOV     A,R1
   \   0000B5   3400         ADDC    A,#0x0
   \   0000B7   FB           MOV     R3,A
   \   0000B8   12....       LCALL   ?Subroutine6 & 0xFFFF
    671                          HalUARTWrite(0,"\0",1);
    672                      }
    673                  
    674                  
    675                  }
    676                    
    677                
    678                }
   \                     ??CrossCallReturnLabel_10:
   \   0000BB   12....       LCALL   ??HalUARTWrite?relay
    679                
    680                
    681                //HalUARTWrite(0,(uint8 *)(&p->msg[1]), p->msg[0]);
    682              if(flat==1) //·¢ATÃüÁî
   \                     ??USART_Receive_messege_0:
   \   0000BE   7C..         MOV     R4,#`?<Constant "OK">` & 0xff
   \   0000C0   7D..         MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
   \   0000C2   90....       MOV     DPTR,#flat
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   6401         XRL     A,#0x1
   \   0000C8   702F         JNZ     ??USART_Receive_messege_4
    683              {
    684                // HalUARTWrite(1,(unsigned char*)(&p->msg[1]), p->msg[0]);
    685                 //HalUARTWrite(0,(uint8 *)(&p->msg[1]), p->msg[0]);
    686                 if(strstr((char const *)(&p->msg[1]),"OK"))
   \   0000CA                ; Setup parameters for call to function strstr
   \   0000CA   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000CD   6018         JZ      ??USART_Receive_messege_5
    687                 {
    688                    HalUARTWrite(1,CWMODE_C,strlen(CWMODE_C));
   \   0000CF                ; Setup parameters for call to function HalUARTWrite
   \   0000CF   7C0D         MOV     R4,#0xd
   \   0000D1   7D00         MOV     R5,#0x0
   \   0000D3   7A..         MOV     R2,#`?<Constant "AT+CWMODE=3\\r\\n">` & 0xff
   \   0000D5   7B..         MOV     R3,#(`?<Constant "AT+CWMODE=3\\r\\n">` >> 8) & 0xff
   \   0000D7   12....       LCALL   ?Subroutine4 & 0xFFFF
    689                    
    690                    flat=2;
   \                     ??CrossCallReturnLabel_34:
   \   0000DA   7402         MOV     A,#0x2
   \                     ??USART_Receive_messege_6:
   \   0000DC   F0           MOVX    @DPTR,A
    691                    Delay_ms(500);
   \   0000DD                ; Setup parameters for call to function Delay_ms
   \   0000DD   7AF4         MOV     R2,#-0xc
   \   0000DF   7B01         MOV     R3,#0x1
   \                     ??USART_Receive_messege_7:
   \   0000E1   12....       LCALL   ??Delay_ms?relay
   \   0000E4   02....       LJMP    ??USART_Receive_messege_3 & 0xFFFF
    692                 }
    693                  else if(strstr((char const *)(&p->msg[1]),"ERROR"))  //Ê§°Ü¾ÍÖØÆô
   \                     ??USART_Receive_messege_5:
   \   0000E7                ; Setup parameters for call to function strstr
   \   0000E7   7C..         MOV     R4,#`?<Constant "ERROR">` & 0xff
   \   0000E9   7D..         MOV     R5,#(`?<Constant "ERROR">` >> 8) & 0xff
   \   0000EB   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000EE   7003         JNZ     $+5
   \   0000F0   02....       LJMP    ??USART_Receive_messege_3 & 0xFFFF
    694                 {
    695                    ReSetWifi();//ÖØÆôWiFi
   \                     ??USART_Receive_messege_8:
   \   0000F3                ; Setup parameters for call to function ReSetWifi
   \   0000F3   12....       LCALL   ?Subroutine1 & 0xFFFF
    696                    Delay_ms(1000);
    697                    HalUARTWrite(1,"AT\r\n",4);
    698                    flat=1;    
    699                 }
    700              }
   \                     ??CrossCallReturnLabel_1:
   \   0000F6   02....       LJMP    ??USART_Receive_messege_3 & 0xFFFF
    701               else if(flat==2) //Á´½ÓWiFi
   \                     ??USART_Receive_messege_4:
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   6402         XRL     A,#0x2
   \   0000FC   707B         JNZ     ??USART_Receive_messege_9
    702              {
    703                 if(strstr((char const *)(&p->msg[1]),"OK"))
   \   0000FE                ; Setup parameters for call to function strstr
   \   0000FE   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000101   7003         JNZ     $+5
   \   000103   02....       LJMP    ??USART_Receive_messege_3 & 0xFFFF
    704                 {
    705                    memset(nn,0,100);
   \   000106                ; Setup parameters for call to function memset
   \   000106   75..64       MOV     ?V0 + 0,#0x64
   \   000109   75..00       MOV     ?V0 + 1,#0x0
   \   00010C   78..         MOV     R0,#?V0 + 0
   \   00010E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000111   7C00         MOV     R4,#0x0
   \   000113   7D00         MOV     R5,#0x0
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
    706                    sprintf(nn,"AT+CWJAP=\"%s\",\"%s\"\r\n",LYSSID,LYPASSWD);
   \   000120                ; Setup parameters for call to function sprintf
   \   000120   75....       MOV     ?V0 + 0,#`?<Constant "15876376419">` & 0xff
   \   000123   75....       MOV     ?V0 + 1,#(`?<Constant "15876376419">` >> 8) & 0xff
   \   000126   78..         MOV     R0,#?V0 + 0
   \   000128   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012B   75....       MOV     ?V0 + 0,#`?<Constant "Redmi_K40">` & 0xff
   \   00012E   75....       MOV     ?V0 + 1,#(`?<Constant "Redmi_K40">` >> 8) & 0xff
   \   000131   78..         MOV     R0,#?V0 + 0
   \   000133   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000136   7C..         MOV     R4,#`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` & 0xff
   \   000138   7D..         MOV     R5,#(`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` >> 8) & 0xff
   \   00013A   7404         MOV     A,#0x4
   \   00013C   12....       LCALL   ?XSTACK_DISP0_8
   \   00013F   AA82         MOV     R2,DPL
   \   000141   AB83         MOV     R3,DPH
   \   000143   12....       LCALL   ??sprintf?relay
   \   000146   7404         MOV     A,#0x4
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
    707                    HalUARTWrite(1,(unsigned char*)nn, strlen(nn));//Á¬½Ó±¾µØWiFi
   \   00014B                ; Setup parameters for call to function HalUARTWrite
   \   00014B                ; Setup parameters for call to function strlen
   \   00014B   85..82       MOV     DPL,?XSP + 0
   \   00014E   85..83       MOV     DPH,?XSP + 1
   \   000151   AA82         MOV     R2,DPL
   \   000153   AB83         MOV     R3,DPH
   \   000155   12....       LCALL   ??strlen?relay
   \   000158   EA           MOV     A,R2
   \   000159   FC           MOV     R4,A
   \   00015A   EB           MOV     A,R3
   \   00015B   FD           MOV     R5,A
   \   00015C   85..82       MOV     DPL,?XSP + 0
   \   00015F   85..83       MOV     DPH,?XSP + 1
   \   000162   AA82         MOV     R2,DPL
   \   000164   AB83         MOV     R3,DPH
   \   000166   12....       LCALL   ?Subroutine4 & 0xFFFF
    708                   
    709                    flat=3;
   \                     ??CrossCallReturnLabel_35:
   \   000169   7403         MOV     A,#0x3
   \   00016B   F0           MOVX    @DPTR,A
    710                    Delay_ms(1000);Delay_ms(1000);
   \   00016C                ; Setup parameters for call to function Delay_ms
   \   00016C   7AE8         MOV     R2,#-0x18
   \   00016E   FB           MOV     R3,A
   \                     ??USART_Receive_messege_10:
   \   00016F   12....       LCALL   ??Delay_ms?relay
   \   000172                ; Setup parameters for call to function Delay_ms
   \   000172   7AE8         MOV     R2,#-0x18
   \   000174   7B03         MOV     R3,#0x3
   \   000176   02....       LJMP    ??USART_Receive_messege_7 & 0xFFFF
    711                 }
    712              }
    713               else if(flat==3) //Á´½Ó·þÎñÆ÷
   \                     ??USART_Receive_messege_9:
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   6403         XRL     A,#0x3
   \   00017C   7020         JNZ     ??USART_Receive_messege_11
    714              {
    715                 if(strstr((char const *)(&p->msg[1]),"OK"))
   \   00017E                ; Setup parameters for call to function strstr
   \   00017E   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000181   6079         JZ      ??USART_Receive_messege_3
    716                 {             
    717                   HalUARTWrite(1,CIPSTART_C, strlen(CIPSTART_C));//Á¬½Ó·þÎñÆ÷
   \   000183                ; Setup parameters for call to function HalUARTWrite
   \   000183   7C28         MOV     R4,#0x28
   \   000185   7D00         MOV     R5,#0x0
   \   000187   7A..         MOV     R2,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"18...">` & 0xff
   \   000189   7B..         MOV     R3,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"18...">` >> 8) & 0xff
   \   00018B   12....       LCALL   ?Subroutine4 & 0xFFFF
    718                   flat=4;
   \                     ??CrossCallReturnLabel_36:
   \   00018E   7404         MOV     A,#0x4
   \   000190   F0           MOVX    @DPTR,A
    719                  
    720                   Delay_ms(1000);Delay_ms(1000);Delay_ms(1000);
   \   000191                ; Setup parameters for call to function Delay_ms
   \   000191   7AE8         MOV     R2,#-0x18
   \   000193   7B03         MOV     R3,#0x3
   \   000195   12....       LCALL   ??Delay_ms?relay
   \   000198                ; Setup parameters for call to function Delay_ms
   \   000198   7AE8         MOV     R2,#-0x18
   \   00019A   7B03         MOV     R3,#0x3
   \   00019C   80D1         SJMP    ??USART_Receive_messege_10
    721                 }
    722              }
    723              else if(flat==4)  //ÉèÖÃÍ¸´«Ä£Ê½
   \                     ??USART_Receive_messege_11:
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   6404         XRL     A,#0x4
   \   0001A1   7018         JNZ     ??USART_Receive_messege_12
    724              {
    725                 if(strstr((char const *)(&p->msg[1]),"OK"))
   \   0001A3                ; Setup parameters for call to function strstr
   \   0001A3   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0001A6   7003         JNZ     $+5
   \   0001A8   02....       LJMP    ??USART_Receive_messege_8 & 0xFFFF
    726                 {
    727                    HalUARTWrite(1,CIPMODE_C, strlen(CIPMODE_C));//ÉèÖÃÍ¸´«
   \   0001AB                ; Setup parameters for call to function HalUARTWrite
   \   0001AB   7C0E         MOV     R4,#0xe
   \   0001AD   7D00         MOV     R5,#0x0
   \   0001AF   7A..         MOV     R2,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
   \   0001B1   7B..         MOV     R3,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
   \   0001B3   12....       LCALL   ?Subroutine4 & 0xFFFF
    728                    flat=5;
    729                   
    730                    Delay_ms(500);
    731                 }
    732                 else 
    733                 {
    734                    ReSetWifi();//ÖØÆôWiFi
    735                    Delay_ms(1000);
    736                    HalUARTWrite(1,"AT\r\n",4);
    737                    flat=1;    
    738                   // HalUARTWrite(0, "ZIGBEE-WIFI OK6\r\n", 17);
    739                 }
    740              }
   \                     ??CrossCallReturnLabel_37:
   \   0001B6   7405         MOV     A,#0x5
   \   0001B8   02....       LJMP    ??USART_Receive_messege_6 & 0xFFFF
    741               else if(flat==5) //·¢ËÍÊý¾ÝµÄÃüÁî
   \                     ??USART_Receive_messege_12:
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   6405         XRL     A,#0x5
   \   0001BE   7018         JNZ     ??USART_Receive_messege_13
    742              {
    743                 if(strstr((char const *)(&p->msg[1]),"OK"))
   \   0001C0                ; Setup parameters for call to function strstr
   \   0001C0   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001C3   7003         JNZ     $+5
   \   0001C5   02....       LJMP    ??USART_Receive_messege_8 & 0xFFFF
    744                 {
    745                    HalUARTWrite(1,CIPSEND_C, strlen(CIPSEND_C));//·¢ËÍ
   \   0001C8                ; Setup parameters for call to function HalUARTWrite
   \   0001C8   7C0C         MOV     R4,#0xc
   \   0001CA   7D00         MOV     R5,#0x0
   \   0001CC   7A..         MOV     R2,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
   \   0001CE   7B..         MOV     R3,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
   \   0001D0   12....       LCALL   ?Subroutine4 & 0xFFFF
    746                    flat=6;
    747                    Delay_ms(500);
    748                   
    749                 }
    750                 else 
    751                 {
    752                    ReSetWifi();//ÖØÆôWiFi
    753                    Delay_ms(1000);
    754                    HalUARTWrite(1,"AT\r\n",4);
    755                    flat=1;    
    756                 }
    757              }
   \                     ??CrossCallReturnLabel_38:
   \   0001D3   7406         MOV     A,#0x6
   \   0001D5   02....       LJMP    ??USART_Receive_messege_6 & 0xFFFF
    758              else if(flat==6)  //×¼±¸·¢ËÍÊý¾Ýµ½·þÎñÆ÷
   \                     ??USART_Receive_messege_13:
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   6406         XRL     A,#0x6
   \   0001DB   701F         JNZ     ??USART_Receive_messege_3
    759              {
    760                 if(strstr((char const *)(&p->msg[1]),">"))
   \   0001DD                ; Setup parameters for call to function strstr
   \   0001DD   7C..         MOV     R4,#`?<Constant ">">` & 0xff
   \   0001DF   7D..         MOV     R5,#(`?<Constant ">">` >> 8) & 0xff
   \   0001E1   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001E4   7003         JNZ     $+5
   \   0001E6   02....       LJMP    ??USART_Receive_messege_8 & 0xFFFF
    761                 {           
    762                  
    763                    
    764                      flat=7;
   \   0001E9   90....       MOV     DPTR,#flat
   \   0001EC   7407         MOV     A,#0x7
   \   0001EE   F0           MOVX    @DPTR,A
    765                      HalUARTWrite(1,concmd,35);
   \   0001EF                ; Setup parameters for call to function HalUARTWrite
   \   0001EF   7C23         MOV     R4,#0x23
   \   0001F1   7D00         MOV     R5,#0x0
   \   0001F3   7A..         MOV     R2,#concmd & 0xff
   \   0001F5   7B..         MOV     R3,#(concmd >> 8) & 0xff
   \   0001F7   7901         MOV     R1,#0x1
   \   0001F9   12....       LCALL   ??HalUARTWrite?relay
    766                   
    767                      
    768                      //HalUARTWrite(0,concmd,strlen(concmd));
    769                 }
    770                 else 
    771                 {
    772                    ReSetWifi();//ÖØÆôWiFi
    773                    Delay_ms(1000);
    774                    HalUARTWrite(1,"AT\r\n",4);
    775                    flat=1;    
    776                 }
    777              }
    778          
    779          
    780          
    781          
    782          }
   \                     ??USART_Receive_messege_3:
   \   0001FC   7464         MOV     A,#0x64
   \   0001FE   02....       LJMP    ??Subroutine15_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2401         ADD     A,#0x1
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??strstr?relay
   \   000010   8B..         MOV     ?V0 + 1,R3
   \   000012   EA           MOV     A,R2
   \   000013   45..         ORL     A,?V0 + 1
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7901         MOV     R1,#0x1
   \   000002                REQUIRE ??Subroutine17_0
   \   000002                ; // Fall through to label ??Subroutine17_0
    783          
    784          
    785          /*********************************************************************
    786           * @fn      SampleApp_Send_P2P_Message
    787           *
    788           * @brief   point to point.
    789           *
    790           * @param   none
    791           *
    792           * @return  none
    793           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    794          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    795          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    796            GasData = ReadGasData();  //¶ÁÈ¡ÑÌÎí´«¸ÐÆ÷Òý½ÅÉÏµÄad×ª»»Öµ£¬²¢Ã»ÓÐ»»Ëã³ÉÄÜ±íÊ¾ÑÌÎíÅ¨¶ÈµÄÖµ
   \   000005                ; Setup parameters for call to function ReadGasData
   \   000005   12....       LCALL   ??ReadGasData?relay
   \   000008   90....       MOV     DPTR,#GasData
   \   00000B   EA           MOV     A,R2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EB           MOV     A,R3
   \   00000F   F0           MOVX    @DPTR,A
    797              //ÑÝÊ¾ÈçºÎÊ¹ÓÃ2530Ð¾Æ¬µÄAD¹¦ÄÜ£¬¸ü¾ßÌåÔÚ×éÍøÖÐ¸ø³ö
    798              
    799              //¶ÁÈ¡µ½µÄÊýÖµ×ª»»³É×Ö·û´®£¬¹©´®¿Úº¯ÊýÊä³ö
    800            /*
    801              TxBuf[0] = GasData / 100 + '0';
    802              TxBuf[1] = GasData / 10%10 + '0';
    803              TxBuf[2] = GasData % 10 + '0';
    804              TxBuf[3] = '\n';
    805              TxBuf[4] = 0;
    806              */
    807            DHT11();
   \   000010                ; Setup parameters for call to function DHT11
   \   000010   12....       LCALL   ??DHT11?relay
    808            sprintf((char *)TxBuf,"{\"Air\":%d,\"temp\":%d,\"humid\":%d}\r\n",GasData,ucharT_data_H,ucharRH_data_H);
   \   000013                ; Setup parameters for call to function sprintf
   \   000013   90....       MOV     DPTR,#ucharRH_data_H
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   75..00       MOV     ?V0 + 1,#0x0
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   90....       MOV     DPTR,#ucharT_data_H
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 0,A
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   90....       MOV     DPTR,#GasData
   \   00002F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000032   7C..         MOV     R4,#`?<Constant "{\\"Air\\":%d,\\"temp\\":%d,\\"...">` & 0xff
   \   000034   7D..         MOV     R5,#(`?<Constant "{\\"Air\\":%d,\\"temp\\":%d,\\"...">` >> 8) & 0xff
   \   000036   7A..         MOV     R2,#TxBuf & 0xff
   \   000038   7B..         MOV     R3,#(TxBuf >> 8) & 0xff
   \   00003A   12....       LCALL   ??sprintf?relay
   \   00003D   7406         MOV     A,#0x6
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
    809            //sprintf((char *)TxBuf,",;Air,%d,temp,%d,humid,%d\r\n",GasData,ucharT_data_H,ucharRH_data_H);
    810               //HalUARTWrite(0,TxBuf, strlen(TxBuf));                 //´®¿ÚÏÔÊ¾
    811          
    812               
    813               
    814            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    815                                 SAMPLEAPP_P2P_CLUSTERID,
    816                                strlen(TxBuf),
                                              ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
    817                                TxBuf,
    818                                 &SampleApp_TransID,
    819                                 AF_DISCV_ROUTE,
    820                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000042                ; Setup parameters for call to function AF_DataRequest
   \   000042   75..1E       MOV     ?V0 + 0,#0x1e
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00004D   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   75....       MOV     ?V0 + 0,#TxBuf & 0xff
   \   000058   75....       MOV     ?V0 + 1,#(TxBuf >> 8) & 0xff
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060                ; Setup parameters for call to function strlen
   \   000060   7A..         MOV     R2,#TxBuf & 0xff
   \   000062   7B..         MOV     R3,#(TxBuf >> 8) & 0xff
   \   000064   12....       LCALL   ??strlen?relay
   \   000067   8A..         MOV     ?V0 + 0,R2
   \   000069   8B..         MOV     ?V0 + 1,R3
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   75..04       MOV     ?V0 + 0,#0x4
   \   000073   75..00       MOV     ?V0 + 1,#0x0
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   7920         MOV     R1,#0x20
   \   00007D   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00007F   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000081   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   000083   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   000085   12....       LCALL   ??AF_DataRequest?relay
   \   000088   7409         MOV     A,#0x9
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   E9           MOV     A,R1
   \   00008E   600D         JZ      ??SampleApp_Send_P2P_Message_0
    821            {
    822            }
    823            else
    824            {
    825               HalUARTWrite(0,"error", 5); 
   \   000090                ; Setup parameters for call to function HalUARTWrite
   \   000090   7C05         MOV     R4,#0x5
   \   000092   7D00         MOV     R5,#0x0
   \   000094   7A..         MOV     R2,#`?<Constant "error">` & 0xff
   \   000096   7B..         MOV     R3,#(`?<Constant "error">` >> 8) & 0xff
   \   000098   7900         MOV     R1,#0x0
   \   00009A   12....       LCALL   ??HalUARTWrite?relay
    826              // Error occurred in request to send.
    827            }
    828          }
   \                     ??SampleApp_Send_P2P_Message_0:
   \   00009D   02....       LJMP    ??Subroutine16_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for flat>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for concmd>`:
   \   000000   10           DB 16
   \   000001   21           DB 33
   \   000002   00           DB 0
   \   000003   04           DB 4
   \   000004   4D           DB 77
   \   000005   51           DB 81
   \   000006   54           DB 84
   \   000007   54           DB 84
   \   000008   04           DB 4
   \   000009   C0           DB 192
   \   00000A   00           DB 0
   \   00000B   78           DB 120
   \   00000C   00           DB 0
   \   00000D   0A           DB 10
   \   00000E   31           DB 49
   \   00000F   30           DB 48
   \   000010   37           DB 55
   \   000011   39           DB 57
   \   000012   39           DB 57
   \   000013   36           DB 54
   \   000014   38           DB 56
   \   000015   39           DB 57
   \   000016   34           DB 52
   \   000017   37           DB 55
   \   000018   00           DB 0
   \   000019   06           DB 6
   \   00001A   35           DB 53
   \   00001B   39           DB 57
   \   00001C   30           DB 48
   \   00001D   39           DB 57
   \   00001E   34           DB 52
   \   00001F   35           DB 53
   \   000020   00           DB 0
   \   000021   01           DB 1
   \   000022   32           DB 50

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??send_onenet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    send_onenet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??publish_msg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    publish_msg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sub_msg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sub_msg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReSetWifi?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReSetWifi

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??USART_Receive_messege?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    USART_Receive_messege

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT\\r\\n">`:
   \   000000   41540D0A     DB "AT\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {192, 0}>`:
   \   000000   C0           DB 192
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\000">`:
   \   000000   0000         DB 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK">`:
   \   000000   4F4B00       DB "OK"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=3\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=3\015\012"
   \            574D4F44
   \            453D330D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR">`:
   \   000000   4552524F     DB "ERROR"
   \            5200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`:
   \   000000   41542B43     DB "AT+CWJAP=\"%s\",\"%s\"\015\012"
   \            574A4150
   \            3D222573
   \            222C2225
   \            73220D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Redmi_K40">`:
   \   000000   5265646D     DB "Redmi_K40"
   \            695F4B34
   \            3000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "15876376419">`:
   \   000000   31353837     DB "15876376419"
   \            36333736
   \            34313900

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSTART=\\"TCP\\",\\"18...">`:
   \   000000   41542B43     DB "AT+CIPSTART=\"TCP\",\"183.230.40.39\",6002\015\012"
   \            49505354
   \            4152543D
   \            22544350
   \            222C2231
   \            38332E32
   \            33302E34
   \            302E3339
   \            222C3630
   \            30320D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=1\015\012"
   \            49504D4F
   \            44453D31
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND\015\012"
   \            49505345
   \            4E440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ">">`:
   \   000000   3E00         DB ">"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "{\\"Air\\":%d,\\"temp\\":%d,\\"...">`:
   \   000000   7B224169     DB "{\"Air\":%d,\"temp\":%d,\"humid\":%d}\015\012"
   \            72223A25
   \            642C2274
   \            656D7022
   \            3A25642C
   \            2268756D
   \            6964223A
   \            25647D0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "error">`:
   \   000000   6572726F     DB "error"
   \            7200    
    829          /*********************************************************************
    830          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReSetWifi                          2      0    110
       -> Delay_ms                      4      0      0
       -> Delay_ms                      4      0      0
     ReadGasData                        0      0     10
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> ReSetWifi                     0      0     22
       -> Delay_ms                      0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     94
       -> strcpy                        0      0    164
       -> HalUARTWrite                  0      0    164
       -> HalUARTWrite                  0      0    164
       -> HalUARTWrite                  0      0    164
       -> send_onenet                   0      0    164
       -> publish_msg                   0      0    164
       -> HalLedBlink                   0      0    164
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> USART_Receive_messege         0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         0      0     31
       -> ReadGasData                   0      0     20
       -> DHT11                         0      0     20
       -> sprintf                       0      0     32
       -> strlen                        0      0     30
       -> AF_DataRequest                0      0     38
       -> HalUARTWrite                  0      0     20
     USART_Receive_messege              0      0    126
       -> sub_msg                       0      0    220
       -> HalUARTWrite                  0      0    220
       -> HalUARTWrite                  0      0    220
       -> HalUARTWrite                  0      0    220
       -> strstr                        0      0    220
       -> HalUARTWrite                  0      0    220
       -> Delay_ms                      0      0    220
       -> strstr                        0      0    220
       -> ReSetWifi                     0      0    220
       -> Delay_ms                      0      0    220
       -> HalUARTWrite                  0      0    220
       -> strstr                        0      0    220
       -> memset                        0      0    224
       -> sprintf                       0      0    228
       -> strlen                        0      0    220
       -> HalUARTWrite                  0      0    220
       -> Delay_ms                      0      0    220
       -> Delay_ms                      0      0    220
       -> strstr                        0      0    220
       -> HalUARTWrite                  0      0    220
       -> Delay_ms                      0      0    220
       -> Delay_ms                      0      0    220
       -> Delay_ms                      0      0    220
       -> strstr                        0      0    220
       -> HalUARTWrite                  0      0    220
       -> Delay_ms                      0      0    220
       -> strstr                        0      0    220
       -> HalUARTWrite                  0      0    220
       -> Delay_ms                      0      0    220
       -> strstr                        0      0    220
       -> HalUARTWrite                  0      0    220
     publish_msg                        1      0    158
       -> memset                        0      0    152
       -> strcpy                        0      0    148
       -> HalUARTWrite                  0      0    148
     send_onenet                        1      0    158
       -> memset                        0      0    152
       -> strcpy                        0      0    148
       -> HalUARTWrite                  0      0    148
     sub_msg                            0      0    186
       -> memset                        0      0    152
       -> HalUARTWrite                  0      0    148


   Segment part sizes:

     Function/Label                              Bytes
     --------------                              -----
     _A_P0                                          1
     ADCCON1                                        1
     ADCCON3                                        1
     ADCL                                           1
     ADCH                                           1
     ADCCFG                                         1
     P0SEL                                          1
     P0DIR                                          1
     flat                                           1
     con_succ                                       1
     SampleApp_ClusterList                          4
     SampleApp_SimpleDesc                          12
     SampleApp_epDesc                               6
     SampleApp_TaskID                               1
     SampleApp_NwkState                             1
     SampleApp_TransID                              1
     SampleApp_Periodic_DstAddr                    12
     SampleApp_Flash_DstAddr                       12
     SampleApp_P2P_DstAddr                         12
     SampleApp_Group                               18
     concmd                                        35
     SampleAppPeriodicCounter                       1
     SampleAppFlashCounter                          1
     SampleApp_Init                               191
     ?Subroutine1                                  30
     SampleApp_ProcessEvent                       191
     SampleApp_HandleKeys                          62
     ??Subroutine16_0                               5
     send_onenet                                  137
     ?Subroutine11                                 15
     ?Subroutine5                                   9
     ?Subroutine3                                  27
     ?Subroutine8                                  10
     ?Subroutine12                                  7
     ?Subroutine13                                 12
     ?Subroutine0                                   5
     ??Subroutine14_0                              18
     ??Subroutine15_0                               3
     publish_msg                                  108
     sub_msg                                      119
     SampleApp_MessageMSGCB                       301
     ?Subroutine10                                  4
     ?Subroutine9                                  10
     ?Subroutine2                                  10
     ?Subroutine6                                  16
     ??Subroutine17_0                               7
     SampleApp_SendPeriodicMessage                 68
     SampleApp_SendFlashMessage                   117
     TxBuf                                         30
     GasData                                        2
     ReadGasData                                   25
     ReSetWifi                                     32
     USART_Receive_messege                        513
     ?Subroutine7                                  22
     ?Subroutine4                                   2
     SampleApp_Send_P2P_Message                   160
     ?<Initializer for flat>                        1
     ?<Initializer for concmd>                     35
     ??SampleApp_Init?relay                         6
     ??SampleApp_ProcessEvent?relay                 6
     ??SampleApp_HandleKeys?relay                   6
     ??send_onenet?relay                            6
     ??publish_msg?relay                            6
     ??sub_msg?relay                                6
     ??SampleApp_MessageMSGCB?relay                 6
     ??SampleApp_SendPeriodicMessage?relay          6
     ??SampleApp_SendFlashMessage?relay             6
     ??ReadGasData?relay                            6
     ??ReSetWifi?relay                              6
     ??USART_Receive_messege?relay                  6
     ??SampleApp_Send_P2P_Message?relay             6
     ?<Constant "AT\r\n">                           5
     ?<Constant "Group 1">                          8
     ?<Constant "SampleApp">                       10
     ?<Constant {192, 0}>                           2
     ?<Constant "\000">                             2
     ?<Constant "OK">                               3
     ?<Constant "AT+CWMODE=3\r\n">                 14
     ?<Constant "ERROR">                            6
     ?<Constant "AT+CWJAP=\"%s\",\"%s\"\r\n">      21
     ?<Constant "Redmi_K40">                       10
     ?<Constant "15876376419">                     12
     ?<Constant "AT+CIPSTART=\"TCP\",\"18...">     41
     ?<Constant "AT+CIPMODE=1\r\n">                15
     ?<Constant "AT+CIPSEND\r\n">                  13
     ?<Constant ">">                                2
     ?<Constant "{\"Air\":%d,\"temp\":%d,\"...">   34
     ?<Constant "error">                            6

 
 2 236 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     8 bytes in segment SFR_AN
    36 bytes in segment XDATA_I
    36 bytes in segment XDATA_ID
   220 bytes in segment XDATA_ROM_C
    98 bytes in segment XDATA_Z
 
 2 350 bytes of CODE  memory
   220 bytes of CONST memory
     0 bytes of DATA  memory (+ 8 bytes shared)
   134 bytes of XDATA memory

Errors: none
Warnings: 10

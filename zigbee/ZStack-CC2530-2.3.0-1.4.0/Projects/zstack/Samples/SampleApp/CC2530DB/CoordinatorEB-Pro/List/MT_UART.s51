///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        14/May/2023  16:33:05 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Components\mt\MT_UART.c              /
//    Command line       =  -f C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg    /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\86158\Desktop\8.Æ /
//                          øÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Components\mt /
//                          \MT_UART.c -D ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK   /
//                          -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\CoordinatorEB-Pro\List\ -lA                /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\CoordinatorEB-Pro\List\ --diag_suppress    /
//                          Pe001,Pa010 -o C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ /
//                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e   /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷ /
//                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\SOURCE\ -I                /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\ZMAIN\TI2530DB\ -I                /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\MT\ -I           /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I  /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC253 /
//                          0EB\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStac /
//                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU /
//                          \CCSOC\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZS /
//                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ /
//                          INCLUDE\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\Z /
//                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC /
//                          K\AF\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC /
//                          \ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-C /
//                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ /
//                           -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC /
//                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\   /
//                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\    /
//                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I  /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         /
//                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\  /
//                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDAT /
//                          A\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD /
//                          E\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L /
//                          EVEL\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ /
//                          ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS /
//                          \MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz            /
//                          --require_prototypes                              /
//    List file          =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\CoordinatorEB-Pro\List\MT_UART.s51         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_UART

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MT_UartCalcFCS?relay
        FUNCTION ??MT_UartCalcFCS?relay,0203H
        PUBLIC ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,0203H
        PUBLIC ??MT_UartProcessZToolData?relay
        FUNCTION ??MT_UartProcessZToolData?relay,0203H
        PUBLIC ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,0203H
        PUBLIC ??rxCB?relay
        FUNCTION ??rxCB?relay,0203H
        PUBLIC App_TaskID
        PUBLIC CMD_Token
        PUBLIC FSC_Token
        PUBLIC LEN_Token
        PUBLIC MT_UartCalcFCS
        FUNCTION MT_UartCalcFCS,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MT_UartInit
        FUNCTION MT_UartInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 58, STACK
        PUBLIC MT_UartProcessZToolData
        FUNCTION MT_UartProcessZToolData,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC pMsg
        PUBLIC rxCB
        FUNCTION rxCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC state
        PUBLIC tempDataLen
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalUARTOpen         SYMBOL "HalUARTOpen"
HalUARTRead         SYMBOL "HalUARTRead"
HalUARTWrite        SYMBOL "HalUARTWrite"
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
MT_UartCalcFCS      SYMBOL "MT_UartCalcFCS"
??MT_UartCalcFCS?relay SYMBOL "?relay", MT_UartCalcFCS
MT_UartInit         SYMBOL "MT_UartInit"
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
MT_UartProcessZToolData SYMBOL "MT_UartProcessZToolData"
??MT_UartProcessZToolData?relay SYMBOL "?relay", MT_UartProcessZToolData
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
rxCB                SYMBOL "rxCB"
??rxCB?relay        SYMBOL "?relay", rxCB

        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H

// C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_UART.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_UART.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:  This module handles anything dealing with the serial port.
//    7 
//    8   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License").  You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product.  Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38 ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "hal_uart.h"
//   46 #include "MT.h"
//   47 #include "MT_UART.h"
//   48 #include "OSAL_Memory.h"
//   49 
//   50 
//   51 /***************************************************************************************************
//   52  * MACROS
//   53  ***************************************************************************************************/
//   54 
//   55 /***************************************************************************************************
//   56  * CONSTANTS
//   57  ***************************************************************************************************/
//   58 /* State values for ZTool protocal */
//   59 #define SOP_STATE      0x00
//   60 #define CMD_STATE1     0x01
//   61 #define CMD_STATE2     0x02
//   62 #define LEN_STATE      0x03
//   63 #define DATA_STATE     0x04
//   64 #define FCS_STATE      0x05
//   65 
//   66 /***************************************************************************************************
//   67  *                                         GLOBAL VARIABLES
//   68  ***************************************************************************************************/
//   69 /* Used to indentify the application ID for osal task */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   70 byte App_TaskID;
App_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   71 
//   72 /* ZTool protocal parameters */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   73 uint8 state;
state:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   74 uint8  CMD_Token[2];
CMD_Token:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   75 uint8  LEN_Token;
LEN_Token:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   76 uint8  FSC_Token;
FSC_Token:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   77 mtOSALSerialData_t  *pMsg;
pMsg:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 uint8  tempDataLen;
tempDataLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   79 
//   80 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//   81 uint16  MT_UartMaxZAppBufLen;
//   82 bool    MT_UartZAppRxStatus;
//   83 #endif
//   84 
//   85 
//   86 /***************************************************************************************************
//   87  *                                          LOCAL FUNCTIONS
//   88  ***************************************************************************************************/
//   89 
//   90 /***************************************************************************************************
//   91  * @fn      MT_UartInit
//   92  *
//   93  * @brief   Initialize MT with UART support
//   94  *
//   95  * @param   None
//   96  *
//   97  * @return  None
//   98 ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   99 void  MT_UartInit ()
MT_UartInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_UartInit
        CODE
//  100 {
        FUNCALL MT_UartInit, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartInit, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 58
        MOV     A,#-0x3a
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 58)
//  101   halUARTCfg_t uartConfig;
//  102   halUARTCfg_t uartConfig1;
//  103 
//  104   /* Initialize APP ID */
//  105   App_TaskID = 0;
        MOV     DPTR,#App_TaskID
        CLR     A
        MOVX    @DPTR,A
//  106 
//  107   /* UART0 Configuration */
//  108   uartConfig.configured           = TRUE;
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  109   uartConfig.baudRate             = HAL_UART_BR_9600;
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  110   uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  111   uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  112   uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
        MOV     A,#0x27
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  113   uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  114   uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  115   uartConfig.intEnable            = TRUE;
        MOV     A,#0x33
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  116   
//  117    /* UART1 Configuration */
//  118   uartConfig1.configured           = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  119   uartConfig1.baudRate             = MT_UART_DEFAULT_BAUDRATE;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  120   uartConfig1.flowControl          = MT_UART_DEFAULT_OVERFLOW;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  121   uartConfig1.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  122   uartConfig1.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  123   uartConfig1.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  124   uartConfig1.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  125   uartConfig1.intEnable            = TRUE;
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  126 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  127   uartConfig.callBackFunc         = MT_UartProcessZToolData;
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??MT_UartProcessZToolData?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??MT_UartProcessZToolData?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  128   uartConfig1.callBackFunc         = MT_UartProcessZToolData;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??MT_UartProcessZToolData?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??MT_UartProcessZToolData?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  129   // uartConfig.callBackFunc         = rxCB;
//  130 #elif defined (ZAPP_P1) || defined (ZAPP_P2)
//  131   uartConfig.callBackFunc         = MT_UartProcessZAppData;
//  132 #else
//  133   uartConfig.callBackFunc         = NULL;
//  134 #endif
//  135 
//  136   /* Start UART */
//  137 #if defined (MT_UART_DEFAULT_PORT)
//  138   HalUARTOpen (0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  139    HalUARTOpen (1, &uartConfig1);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTOpen?relay
//  140 #else
//  141   /* Silence IAR compiler warning */
//  142   (void)uartConfig;
//  143 #endif
//  144 
//  145   /* Initialize for ZApp */
//  146 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//  147   /* Default max bytes that ZAPP can take */
//  148   MT_UartMaxZAppBufLen  = 1;
//  149   MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
//  150 #endif
//  151 
//  152 }
        MOV     A,#0x3a
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  153 
//  154 /***************************************************************************************************
//  155  * @fn      MT_SerialRegisterTaskID
//  156  *
//  157  * @brief   This function registers the taskID of the application so it knows
//  158  *          where to send the messages whent they come in.
//  159  *
//  160  * @param   void
//  161  *
//  162  * @return  void
//  163  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  164 void MT_UartRegisterTaskID( byte taskID )
MT_UartRegisterTaskID:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function MT_UartRegisterTaskID
        CODE
//  165 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  166   App_TaskID = taskID;
        MOV     A,R1
        MOV     DPTR,#App_TaskID
        MOVX    @DPTR,A
//  167 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock2
//  168 
//  169 /***************************************************************************************************
//  170  * @fn      SPIMgr_CalcFCS
//  171  *
//  172  * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
//  173  *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
//  174  *
//  175  * @param   byte *msg_ptr - message pointer
//  176  * @param   byte len - length (in bytes) of message
//  177  *
//  178  * @return  result byte
//  179  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  180 byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
MT_UartCalcFCS:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function MT_UartCalcFCS
        CODE
//  181 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  182   byte x;
//  183   byte xorResult;
//  184 
//  185   xorResult = 0;
        MOV     R1,#0x0
//  186 
//  187   for ( x = 0; x < len; x++, msg_ptr++ )
        MOV     R0,#0x0
        SJMP    ??MT_UartCalcFCS_0
//  188     xorResult = xorResult ^ *msg_ptr;
??MT_UartCalcFCS_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     R0
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
??MT_UartCalcFCS_0:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JC      ??MT_UartCalcFCS_1
//  189 
//  190   return ( xorResult );
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
//  191 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192 void rxCB( uint8 port, uint8 event )
rxCB:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function rxCB
        CODE
//  193 {
        FUNCALL rxCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
//  194     unsigned char buf[30];
//  195     unsigned char len;
//  196     
//  197     len = HalUARTRead(1,  buf, 30);//¶ÁÈ¡´®¿ÚÊý¾Ý£¬·µ»ØÊý¾Ý³¤¶È
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1e
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
//  198     if(len)
        JZ      ??rxCB_0
//  199     {
//  200         HalUARTWrite(0, buf, len);//Í¨¹ý´®¿ÚÔ­Ñù·µ»ØÊý¾Ý Ò²¿ÉÒÔÐÞ¸ÄÊý¾Ý·µ»ØÓÃÓÚÇø·ÖÊý¾Ý
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  201         len = 0;
//  202     }
//  203 }
??rxCB_0:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  204 
//  205 
//  206 /***************************************************************************************************
//  207  * @fn      MT_UartProcessZToolData
//  208  *
//  209  * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
//  210  *          |  1  |     1        |    2    |  0-Len   |   1   |
//  211  *
//  212  *          Parses the data and determine either is SPI or just simply serial data
//  213  *          then send the data to correct place (MT or APP)
//  214  *
//  215  * @param   port     - UART port
//  216  *          event    - Event that causes the callback
//  217  *
//  218  *
//  219  * @return  None
//  220  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  221 void MT_UartProcessZToolData ( uint8 port, uint8 event )
MT_UartProcessZToolData:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function MT_UartProcessZToolData
        CODE
//  222 {
        FUNCALL MT_UartProcessZToolData, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R1
//  223   
//  224   uint8 *p;
//  225 
//  226   uint8 len = Hal_UART_RxBufLen(port); //ÏÈ»ñÈ¡ÐèÒª½ÓÊÕµÄÊý¾Ý³¤¶È
        ; Setup parameters for call to function Hal_UART_RxBufLen
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        MOV     R0,A
//  227 
//  228   if (len <= 0) //Èç¹ûÃ»ÓÐÊý¾Ý½ÓÊÕÔòÖ±½Ó·µ»Ø
        JZ      ??MT_UartProcessZToolData_0
//  229     return;
//  230 
//  231  
//  232   pMsg = (mtOSALSerialData_t *)osal_msg_allocate(sizeof(mtOSALSerialData_t)+len+1); 
        MOV     DPL,R0
        MOV     R6,DPL
        ; Setup parameters for call to function osal_msg_allocate
        ADD     A,#0x5
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_msg_allocate?relay
        MOV     DPTR,#pMsg
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  233    pMsg->msg[2] = port; 
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  234   //×¼±¸ÏûÏ¢µÄ»º³åÇø£¬len±íÊ¾´®¿ÚÊý¾Ý³¤¶È£¬ ¶à¼ÓµÄÒ»¸ö×Ö½ÚÓÃÓÚ´æ·Å´Ë´Î½ÓÊÕµÄÊý¾Ý³¤¶È¡£ 
//  235   pMsg->msg = (uint8 *)(pMsg+1); //msgÖ¸ÏòÊý¾ÝµÄ¿ªÊ¼´æ·ÅÎ»ÖÃ
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        ADD     A,#0x4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  236   p = &(pMsg->msg[1]); //±£ÁôÒ»¸ö×Ö½ÚÎ»ÖÃÓÃÓÚ´æ·Å½ÓÊÕµÄÊý¾Ý³¤¶È
//  237   len = HalUARTRead (port, p, len); //½ÓÊÕÊý¾Ý  
        ; Setup parameters for call to function HalUARTRead
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??HalUARTRead?relay
//  238   //HalUARTWrite(0,p, len);
//  239   pMsg->msg[0] = len;  //¼ÇÂ¼Êý¾Ý³¤¶È¡£ ´æ·ÅµÄ¸ñÊ½: "ÏûÏ¢½á¹¹ÌåÄÚÈÝ" £« "³¤¶È" + "½ÓÊÕµ½µÄÊý¾ÝÄÚÈÝ"
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,R2
        MOVX    @DPTR,A
//  240   pMsg->hdr.event = CMD_SERIAL_MSG; //ÉèÖÃÏûÏ¢ÀàÐÍ
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  241 
//  242   osal_msg_send( App_TaskID, (byte *)pMsg ); //·¢³öÏûÏ¢
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#App_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  243          
//  244          
//  245 
//  246   }
??MT_UartProcessZToolData_0:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_6, ??CrossCallReturnLabel_3
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_0
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_1
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     DPTR,#pMsg
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_1
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_6, ??CrossCallReturnLabel_2
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_6, ??CrossCallReturnLabel_3
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_0
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_1
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_4:
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartRegisterTaskID?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartRegisterTaskID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartCalcFCS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartCalcFCS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartProcessZToolData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartProcessZToolData

        END
//  247   
//  248 //
//  249 //  uint8  ch;
//  250 //  uint8  bytesInRxBuffer;
//  251 //  
//  252 //  (void)event;  // Intentionally unreferenced parameter
//  253 //
//  254 //  while (Hal_UART_RxBufLen(port))
//  255 //  {
//  256 //    HalUARTRead (port, &ch, 1);
//  257 //
//  258 //    switch (state)
//  259 //    {
//  260 //      case SOP_STATE:
//  261 //        if (ch == MT_UART_SOF)
//  262 //          state = LEN_STATE;
//  263 //        break;
//  264 //
//  265 //      case LEN_STATE:
//  266 //        LEN_Token = ch;
//  267 //
//  268 //        tempDataLen = 0;
//  269 //
//  270 //        /* Allocate memory for the data */
//  271 //        pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
//  272 //                                                        MT_RPC_FRAME_HDR_SZ + LEN_Token );
//  273 //
//  274 //        if (pMsg)
//  275 //        {
//  276 //          /* Fill up what we can */
//  277 //          pMsg->hdr.event = CMD_SERIAL_MSG;
//  278 //          pMsg->msg = (uint8*)(pMsg+1);
//  279 //          pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
//  280 //          state = CMD_STATE1;
//  281 //        }
//  282 //        else
//  283 //        {
//  284 //          state = SOP_STATE;
//  285 //          return;
//  286 //        }
//  287 //        break;
//  288 //
//  289 //      case CMD_STATE1:
//  290 //        pMsg->msg[MT_RPC_POS_CMD0] = ch;
//  291 //        state = CMD_STATE2;
//  292 //        break;
//  293 //
//  294 //      case CMD_STATE2:
//  295 //        pMsg->msg[MT_RPC_POS_CMD1] = ch;
//  296 //        /* If there is no data, skip to FCS state */
//  297 //        if (LEN_Token)
//  298 //        {
//  299 //          state = DATA_STATE;
//  300 //        }
//  301 //        else
//  302 //        {
//  303 //          state = FCS_STATE;
//  304 //        }
//  305 //        break;
//  306 //
//  307 //      case DATA_STATE:
//  308 //
//  309 //        /* Fill in the buffer the first byte of the data */
//  310 //        pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
//  311 //
//  312 //        /* Check number of bytes left in the Rx buffer */
//  313 //        bytesInRxBuffer = Hal_UART_RxBufLen(port);
//  314 //
//  315 //        /* If the remain of the data is there, read them all, otherwise, just read enough */
//  316 //        if (bytesInRxBuffer <= LEN_Token - tempDataLen)
//  317 //        {
//  318 //          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
//  319 //          tempDataLen += bytesInRxBuffer;
//  320 //        }
//  321 //        else
//  322 //        {
//  323 //          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
//  324 //          tempDataLen += (LEN_Token - tempDataLen);
//  325 //        }
//  326 //
//  327 //        /* If number of bytes read is equal to data length, time to move on to FCS */
//  328 //        if ( tempDataLen == LEN_Token )
//  329 //            state = FCS_STATE;
//  330 //
//  331 //        break;
//  332 //
//  333 //      case FCS_STATE:
//  334 //
//  335 //        FSC_Token = ch;
//  336 //
//  337 //        /* Make sure it's correct */
//  338 //        if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
//  339 //        {
//  340 //          osal_msg_send( App_TaskID, (byte *)pMsg );
//  341 //        }
//  342 //        else
//  343 //        {
//  344 //          /* deallocate the msg */
//  345 //          osal_msg_deallocate ( (uint8 *)pMsg );
//  346 //        }
//  347 //
//  348 //        /* Reset the state, send or discard the buffers at this point */
//  349 //        state = SOP_STATE;
//  350 //
//  351 //        break;
//  352 //
//  353 //      default:
//  354 //       break;
//  355 //    }
//  356 //  }
//  357 
//  358 
//  359 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//  360 /***************************************************************************************************
//  361  * @fn      MT_UartProcessZAppData
//  362  *
//  363  * @brief   | SOP | CMD  |   Data Length   | FSC  |
//  364  *          |  1  |  2   |       1         |  1   |
//  365  *
//  366  *          Parses the data and determine either is SPI or just simply serial data
//  367  *          then send the data to correct place (MT or APP)
//  368  *
//  369  * @param   port    - UART port
//  370  *          event   - Event that causes the callback
//  371  *
//  372  *
//  373  * @return  None
//  374  ***************************************************************************************************/
//  375 void MT_UartProcessZAppData ( uint8 port, uint8 event )
//  376 {
//  377 
//  378   osal_event_hdr_t  *msg_ptr;
//  379   uint16 length = 0;
//  380   uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
//  381 
//  382   /*
//  383      If maxZAppBufferLength is 0 or larger than current length
//  384      the entire length of the current buffer is returned.
//  385   */
//  386   if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
//  387   {
//  388     length = MT_UartMaxZAppBufLen;
//  389   }
//  390   else
//  391   {
//  392     length = rxBufLen;
//  393   }
//  394 
//  395   /* Verify events */
//  396   if (event == HAL_UART_TX_FULL)
//  397   {
//  398     // Do something when TX if full
//  399     return;
//  400   }
//  401 
//  402   if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
//  403   {
//  404     if ( App_TaskID )
//  405     {
//  406       /*
//  407          If Application is ready to receive and there is something
//  408          in the Rx buffer then send it up
//  409       */
//  410       if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
//  411       {
//  412         /* Disable App flow control until it processes the current data */
//  413          MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
//  414 
//  415         /* 2 more bytes are added, 1 for CMD type, other for length */
//  416         msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
//  417         if ( msg_ptr )
//  418         {
//  419           msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
//  420           msg_ptr->status = length;
//  421 
//  422           /* Read the data of Rx buffer */
//  423           HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
//  424 
//  425           /* Send the raw data to application...or where ever */
//  426           osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
//  427         }
//  428       }
//  429     }
//  430   }
//  431 }
//  432 
//  433 /***************************************************************************************************
//  434  * @fn      SPIMgr_ZAppBufferLengthRegister
//  435  *
//  436  * @brief
//  437  *
//  438  * @param   maxLen - Max Length that the application wants at a time
//  439  *
//  440  * @return  None
//  441  *
//  442  ***************************************************************************************************/
//  443 void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
//  444 {
//  445   /* If the maxLen is larger than the RX buff, something is not right */
//  446   if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
//  447     MT_UartMaxZAppBufLen = maxLen;
//  448   else
//  449     MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
//  450 }
//  451 
//  452 /***************************************************************************************************
//  453  * @fn      SPIMgr_AppFlowControl
//  454  *
//  455  * @brief
//  456  *
//  457  * @param   status - ready to send or not
//  458  *
//  459  * @return  None
//  460  *
//  461  ***************************************************************************************************/
//  462 void MT_UartAppFlowControl ( bool status )
//  463 {
//  464 
//  465   /* Make sure only update if needed */
//  466   if (status != MT_UartZAppRxStatus )
//  467   {
//  468     MT_UartZAppRxStatus = status;
//  469   }
//  470 
//  471   /* App is ready to read again, ProcessZAppData have to be triggered too */
//  472   if (status == MT_UART_ZAPP_RX_READY)
//  473   {
//  474     MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
//  475   }
//  476 
//  477 }
//  478 
//  479 #endif //ZAPP
//  480 
//  481 /***************************************************************************************************
//  482 ***************************************************************************************************/
// 
// 473 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   9 bytes in segment XDATA_Z
// 
// 503 bytes of CODE  memory
//   9 bytes of XDATA memory
//
//Errors: none
//Warnings: none

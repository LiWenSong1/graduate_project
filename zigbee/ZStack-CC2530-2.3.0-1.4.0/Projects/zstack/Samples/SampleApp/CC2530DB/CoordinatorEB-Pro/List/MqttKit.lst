###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         05/May/2023  19:20:44 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\MQTT\MqttKit.c                                #
#    Command line       =  -f C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg       #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg         #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\MQTT\MqttKit.c -D ZIGBEEPRO -D ZTOOL_P1 -D    #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\86158\Desktop\8.Æ #
#                          øÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\Lis #
#                          t\ -lA C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\CoordinatorEB-Pro\List\                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB-Pro\Obj\ -e --debug             #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\86158\Desktop\8.Æ #
#                          øÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\ -I                   #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\SOURCE\ -I C:\Users\86158\Desktop\8.ÆøÌå´« #
#                          ¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\   #
#                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\MT\ -I           #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I     #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB #
#                          \ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC #
#                          \ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\  #
#                          -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I     #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I      #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I       #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I        #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I            #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I  #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I  #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I     #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I  #
#                          C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04 #
#                          \ -I C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\ #
#                          srf04\SINGLE_CHIP\ -Ohz --require_prototypes       #
#    List file          =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB-Pro\List\MqttKit.lst            #
#    Object file        =  C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB-Pro\Obj\MqttKit.r51             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\86158\Desktop\8.ÆøÌå´«¸ÐÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\MQTT\MqttKit.c
      1          /**
      2          	************************************************************
      3          	************************************************************
      4          	************************************************************
      5          	*	ÎÄ¼þÃû£º 	MqttKit.c
      6          	*
      7          	*	×÷Õß£º 		ÕÅ¼ÌÈð
      8          	*
      9          	*	ÈÕÆÚ£º 		2018-04-27
     10          	*
     11          	*	°æ±¾£º 		V1.6
     12          	*
     13          	*	ËµÃ÷£º 		MQTTÐ­Òé
     14          	*
     15          	*	ÐÞ¸Ä¼ÇÂ¼£º	V1.1£º½â¾öMQTT_PacketSubscribe¶©ÔÄ²»Îª2¸ötopic
     16          	*						¸öÊýÊ±Ð­Òé´íÎóµÄbug
     17          	*				V1.2£ºÐÞ¸´MQTT_PacketCmdRespµÄbug
     18          	*				V1.3£º½«strncpyÌæ»»Îªmemcpy£¬½â¾öÇ±ÔÚbug
     19          	*				V1.4£ºÐÞ¸´	MQTT_PacketPublishAck
     20          	*							MQTT_PacketPublishRel
     21          	*							º¯Êý·â°ü´íÎóµÄbug
     22          	*				V1.5£ºÔö¼Ó	MQTT_UnPacketCmd
     23          	*							MQTT_UnPacketPublish
     24          	*							½Ó¿Ú¶ÔÏûÏ¢ÄÚÈÝ³¤¶ÈµÄÌáÈ¡²ÎÊý
     25          	*				V1.6£ºÔö¼Ó¶þ½øÖÆÎÄ¼þÉÏ´«½Ó¿Ú
     26          	************************************************************
     27          	************************************************************
     28          	************************************************************
     29          **/
     30          
     31          //Ð­ÒéÍ·ÎÄ¼þ
     32          #include "MqttKit.h"
     33          
     34          //C¿â
     35          #include <string.h>
     36          #include <stdio.h>
     37          
     38          
     39          #define CMD_TOPIC_PREFIX		"$creq"
     40          
     41          
     42          //==========================================================
     43          //	º¯ÊýÃû³Æ£º	EDP_NewBuffer
     44          //
     45          //	º¯Êý¹¦ÄÜ£º	ÉêÇëÄÚ´æ
     46          //
     47          //	Èë¿Ú²ÎÊý£º	edpPacket£º°ü½á¹¹Ìå
     48          //				size£º´óÐ¡
     49          //
     50          //	·µ»Ø²ÎÊý£º	ÎÞ
     51          //
     52          //	ËµÃ÷£º		1.¿ÉÊ¹ÓÃ¶¯Ì¬·ÖÅäÀ´·ÖÅäÄÚ´æ
     53          //				2.¿ÉÊ¹ÓÃ¾Ö²¿»òÈ«¾ÖÊý×éÀ´Ö¸¶¨ÄÚ´æ
     54          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     55          void MQTT_NewBuffer(MQTT_PACKET_STRUCTURE *mqttPacket, uint32 size)
   \                     MQTT_NewBuffer:
     56          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
     57          	
     58          	uint32 i = 0;
   \   00000D   75..00       MOV     ?V0 + 6,#0x0
   \   000010   75..00       MOV     ?V0 + 7,#0x0
     59          
     60          	if(mqttPacket->_data == NULL)
   \   000013   EA           MOV     A,R2
   \   000014   2404         ADD     A,#0x4
   \   000016   F5..         MOV     ?V0 + 2,A
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F5..         MOV     ?V0 + 3,A
   \   00001D   EA           MOV     A,R2
   \   00001E   2402         ADD     A,#0x2
   \   000020   F5..         MOV     ?V0 + 4,A
   \   000022   EB           MOV     A,R3
   \   000023   3400         ADDC    A,#0x0
   \   000025   F5..         MOV     ?V0 + 5,A
   \   000027   EA           MOV     A,R2
   \   000028   2406         ADD     A,#0x6
   \   00002A   F8           MOV     R0,A
   \   00002B   EB           MOV     A,R3
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F9           MOV     R1,A
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   702A         JNZ     ??MQTT_NewBuffer_0
     61          	{
     62          		mqttPacket->_memFlag = MEM_FLAG_ALLOC;
   \   00003C   7401         MOV     A,#0x1
   \   00003E   F0           MOVX    @DPTR,A
     63          		
     64          		mqttPacket->_data = (uint8 *)MQTT_MallocBuffer(size);
   \   00003F                ; Setup parameters for call to function __xdata_malloc
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   ?Subroutine50 & 0xFFFF
     65          		if(mqttPacket->_data != NULL)
   \                     ??CrossCallReturnLabel_138:
   \   000046   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000049   6043         JZ      ??MQTT_NewBuffer_1
     66          		{
     67          			mqttPacket->_len = 0;
   \   00004B   85..82       MOV     DPL,?V0 + 4
   \   00004E   85..83       MOV     DPH,?V0 + 5
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   12....       LCALL   ?Subroutine52 & 0xFFFF
     68          			
     69          			mqttPacket->_size = size;
   \                     ??CrossCallReturnLabel_81:
   \   000057   EE           MOV     A,R6
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   EF           MOV     A,R7
   \   00005B   F0           MOVX    @DPTR,A
     70          			
     71          			for(; i < mqttPacket->_size; i++)
   \                     ??MQTT_NewBuffer_2:
   \   00005C   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00005F   502D         JNC     ??MQTT_NewBuffer_1
     72          				mqttPacket->_data[i] = 0;
   \   000061   12....       LCALL   ?Subroutine28 & 0xFFFF
     73          		}
     74          	}
   \                     ??CrossCallReturnLabel_41:
   \   000064   80F6         SJMP    ??MQTT_NewBuffer_2
     75          	else
     76          	{
     77          		mqttPacket->_memFlag = MEM_FLAG_STATIC;
   \                     ??MQTT_NewBuffer_0:
   \   000066   7402         MOV     A,#0x2
   \   000068   F0           MOVX    @DPTR,A
   \   000069   8003         SJMP    ??CrossCallReturnLabel_42
     78          		
     79          		for(; i < mqttPacket->_size; i++)
     80          			mqttPacket->_data[i] = 0;
   \                     ??MQTT_NewBuffer_3:
   \   00006B   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00006E   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000071   40F8         JC      ??MQTT_NewBuffer_3
     81          		
     82          		mqttPacket->_len = 0;
   \   000073   85..82       MOV     DPL,?V0 + 4
   \   000076   85..83       MOV     DPH,?V0 + 5
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   F0           MOVX    @DPTR,A
     83          		
     84          		if(mqttPacket->_size < size)
   \   00007D   C3           CLR     C
   \   00007E   E8           MOV     A,R0
   \   00007F   9E           SUBB    A,R6
   \   000080   E9           MOV     A,R1
   \   000081   9F           SUBB    A,R7
   \   000082   500A         JNC     ??MQTT_NewBuffer_1
     85          			mqttPacket->_data = NULL;
   \   000084   85..82       MOV     DPL,?V0 + 0
   \   000087   85..83       MOV     DPH,?V0 + 1
   \   00008A   E4           CLR     A
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   F0           MOVX    @DPTR,A
     86          	}
     87          
     88          }
   \                     ??MQTT_NewBuffer_1:
   \   00008E                REQUIRE ?Subroutine0
   \   00008E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ??__xdata_malloc?relay
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   EA           MOV     A,R2
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   EB           MOV     A,R3
   \   00000D                REQUIRE ??Subroutine89_0
   \   00000D                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000009   C3           CLR     C
   \   00000A   E5..         MOV     A,?V0 + 6
   \   00000C   98           SUBB    A,R0
   \   00000D   E5..         MOV     A,?V0 + 7
   \   00000F   99           SUBB    A,R1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   25..         ADD     A,?V0 + 6
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   35..         ADDC    A,?V0 + 7
   \   00000E   8882         MOV     DPL,R0
   \   000010   F583         MOV     DPH,A
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E5..         MOV     A,?V0 + 6
   \   000016   2401         ADD     A,#0x1
   \   000018   F5..         MOV     ?V0 + 6,A
   \   00001A   E5..         MOV     A,?V0 + 7
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F5..         MOV     ?V0 + 7,A
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   49           ORL     A,R1
   \   000004   22           RET
     89          
     90          //==========================================================
     91          //	º¯ÊýÃû³Æ£º	MQTT_DeleteBuffer
     92          //
     93          //	º¯Êý¹¦ÄÜ£º	ÊÍ·ÅÊý¾ÝÄÚ´æ
     94          //
     95          //	Èë¿Ú²ÎÊý£º	edpPacket£º°ü½á¹¹Ìå
     96          //
     97          //	·µ»Ø²ÎÊý£º	ÎÞ
     98          //
     99          //	ËµÃ÷£º		
    100          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    101          void MQTT_DeleteBuffer(MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_DeleteBuffer:
    102          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    103          
    104          	if(mqttPacket->_memFlag == MEM_FLAG_ALLOC)
   \   000009   EE           MOV     A,R6
   \   00000A   2406         ADD     A,#0x6
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 0,R0
   \   000013   89..         MOV     ?V0 + 1,R1
   \   000015   8882         MOV     DPL,R0
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6401         XRL     A,#0x1
   \   00001C   7003         JNZ     ??CrossCallReturnLabel_142
    105          		MQTT_FreeBuffer(mqttPacket->_data);
   \   00001E                ; Setup parameters for call to function __xdata_free
   \   00001E   12....       LCALL   ?Subroutine34 & 0xFFFF
    106          	
    107          	mqttPacket->_data = NULL;
   \                     ??CrossCallReturnLabel_142:
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E4           CLR     A
   \   000026   12....       LCALL   ?Subroutine53 & 0xFFFF
    108          	mqttPacket->_len = 0;
   \                     ??CrossCallReturnLabel_84:
   \   000029   12....       LCALL   ?Subroutine53 & 0xFFFF
    109          	mqttPacket->_size = 0;
   \                     ??CrossCallReturnLabel_85:
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ??Subroutine89_0 & 0xFFFF
    110          	mqttPacket->_memFlag = MEM_FLAG_NULL;
   \                     ??CrossCallReturnLabel_140:
   \   000033   F0           MOVX    @DPTR,A
    111          
    112          }
   \   000034   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    113          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    114          int32 MQTT_DumpLength(size_t len, uint8 *buf)
   \                     MQTT_DumpLength:
    115          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    116          	
    117          	int32 i = 0;
    118          	
    119          	for(i = 1; i <= 4; ++i)
   \   000005   7E01         MOV     R6,#0x1
   \   000007   7F00         MOV     R7,#0x0
    120          	{
    121          		*buf = len % 128;
   \                     ??MQTT_DumpLength_0:
   \   000009   EA           MOV     A,R2
   \   00000A   547F         ANL     A,#0x7f
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   F0           MOVX    @DPTR,A
    122          		len >>= 7;
   \   000011   8A..         MOV     ?V0 + 0,R2
   \   000013   8B..         MOV     ?V0 + 1,R3
   \   000015   7407         MOV     A,#0x7
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?US_SHR
   \   00001C   AA..         MOV     R2,?V0 + 0
   \   00001E   AB..         MOV     R3,?V0 + 1
    123          		if(len > 0)
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   6022         JZ      ??MQTT_DumpLength_1
    124          		{
    125          			*buf |= 128;
   \   000024   E0           MOVX    A,@DPTR
   \   000025   D2E7         SETB    0xE0 /* A   */.7
   \   000027   F0           MOVX    @DPTR,A
    126          			++buf;
   \   000028   A3           INC     DPTR
   \   000029   AC82         MOV     R4,DPL
   \   00002B   AD83         MOV     R5,DPH
    127          		}
   \   00002D   EE           MOV     A,R6
   \   00002E   2401         ADD     A,#0x1
   \   000030   0E           INC     R6
   \   000031   EF           MOV     A,R7
   \   000032   3400         ADDC    A,#0x0
   \   000034   FF           MOV     R7,A
   \   000035   C3           CLR     C
   \   000036   EE           MOV     A,R6
   \   000037   9405         SUBB    A,#0x5
   \   000039   EF           MOV     A,R7
   \   00003A   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00003D   40CA         JC      ??MQTT_DumpLength_0
    128          		else
    129          		{
    130          			return i;
    131          		}
    132          	}
    133          
    134          	return -1;
   \   00003F   7AFF         MOV     R2,#-0x1
   \   000041   7BFF         MOV     R3,#-0x1
   \                     ??MQTT_DumpLength_2:
   \   000043   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??MQTT_DumpLength_1:
   \   000046   EE           MOV     A,R6
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   FB           MOV     R3,A
   \   00004A   80F7         SJMP    ??MQTT_DumpLength_2
    135          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET
    136          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          int32 MQTT_ReadLength(const uint8 *stream, int32 size, uint32 *len)
   \                     MQTT_ReadLength:
    138          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00000D   FE           MOV     R6,A
   \   00000E   E9           MOV     A,R1
   \   00000F   FF           MOV     R7,A
    139          	
    140          	int32 i;
    141          	const uint8 *in = stream;
    142          	uint32 multiplier = 1;
   \   000010   75..01       MOV     ?V0 + 6,#0x1
   \   000013   75..00       MOV     ?V0 + 7,#0x0
    143          
    144          	*len = 0;
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   E4           CLR     A
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    145          	for(i = 0; i < size; ++i)
   \   00001E   F5..         MOV     ?V0 + 4,A
   \   000020   800A         SJMP    ??MQTT_ReadLength_0
   \                     ??MQTT_ReadLength_1:
   \   000022   E5..         MOV     A,?V0 + 4
   \   000024   2401         ADD     A,#0x1
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   E5..         MOV     A,?V0 + 5
   \   00002A   3400         ADDC    A,#0x0
   \                     ??MQTT_ReadLength_0:
   \   00002C   F5..         MOV     ?V0 + 5,A
   \   00002E   C3           CLR     C
   \   00002F   E5..         MOV     A,?V0 + 4
   \   000031   9C           SUBB    A,R4
   \   000032   E5..         MOV     A,?V0 + 5
   \   000034   9D           SUBB    A,R5
   \   000035   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000037   65D0         XRL     A,PSW
   \   000039   33           RLC     A
   \   00003A   5063         JNC     ??MQTT_ReadLength_2
    146          	{
    147          		*len += (in[i] & 0x7f) * multiplier;
   \   00003C   EA           MOV     A,R2
   \   00003D   25..         ADD     A,?V0 + 4
   \   00003F   F8           MOV     R0,A
   \   000040   EB           MOV     A,R3
   \   000041   35..         ADDC    A,?V0 + 5
   \   000043   F9           MOV     R1,A
   \   000044   8882         MOV     DPL,R0
   \   000046   8983         MOV     DPH,R1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   547F         ANL     A,#0x7f
   \   00004B   F5..         MOV     ?V0 + 0,A
   \   00004D   85..F0       MOV     B,?V0 + 6
   \   000050   A4           MUL     AB
   \   000051   C5..         XCH     A,?V0 + 0
   \   000053   85F0..       MOV     ?V0 + 2,B
   \   000056   85..F0       MOV     B,?V0 + 7
   \   000059   A4           MUL     AB
   \   00005A   25..         ADD     A,?V0 + 2
   \   00005C   F5..         MOV     ?V0 + 1,A
   \   00005E   8E82         MOV     DPL,R6
   \   000060   8F83         MOV     DPH,R7
   \   000062   12....       LCALL   ??Subroutine92_0 & 0xFFFF
    148          
    149          		if(!(in[i] & 0x80))
   \                     ??CrossCallReturnLabel_148:
   \   000065   8882         MOV     DPL,R0
   \   000067   8983         MOV     DPH,R1
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   A2E7         MOV     C,0xE0 /* A   */.7
   \   00006C   400C         JC      ??MQTT_ReadLength_3
    150          		{
    151          			return i + 1;
   \   00006E   E5..         MOV     A,?V0 + 4
   \   000070   2401         ADD     A,#0x1
   \   000072   FA           MOV     R2,A
   \   000073   E5..         MOV     A,?V0 + 5
   \   000075   3400         ADDC    A,#0x0
   \   000077   FB           MOV     R3,A
   \   000078   8029         SJMP    ??MQTT_ReadLength_4
    152          		}
    153          
    154          		multiplier <<= 7;
   \                     ??MQTT_ReadLength_3:
   \   00007A   85....       MOV     ?V0 + 0,?V0 + 6
   \   00007D   85....       MOV     ?V0 + 1,?V0 + 7
   \   000080   7407         MOV     A,#0x7
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?S_SHL
   \   000087   85....       MOV     ?V0 + 6,?V0 + 0
   \   00008A   85....       MOV     ?V0 + 7,?V0 + 1
    155          		if(multiplier >= 2097152)		//128 * *128 * *128
                 		              ^
Warning[Pa084]: pointless integer comparison, the result is always false
   \   00008D   F5..         MOV     ?V0 + 2,A
   \   00008F   F5..         MOV     ?V0 + 3,A
   \   000091   90....       MOV     DPTR,#__Constant_200000
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?SL_GE_X
   \   000099   5087         JNC     ??MQTT_ReadLength_1
    156          		{
    157          			return -2;					// error, out of range
   \   00009B   7AFE         MOV     R2,#-0x2
   \   00009D   8002         SJMP    ??MQTT_ReadLength_5
    158          		}
    159          	}
    160          
    161          	return -1;							// not complete
   \                     ??MQTT_ReadLength_2:
   \   00009F   7AFF         MOV     R2,#-0x1
   \                     ??MQTT_ReadLength_5:
   \   0000A1   7BFF         MOV     R3,#-0x1
   \                     ??MQTT_ReadLength_4:
   \   0000A3   02....       LJMP    ?Subroutine0 & 0xFFFF
    162          
    163          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET
    164          
    165          //==========================================================
    166          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketRecv
    167          //
    168          //	º¯Êý¹¦ÄÜ£º	MQTTÊý¾Ý½ÓÊÕÀàÐÍÅÐ¶Ï
    169          //
    170          //	Èë¿Ú²ÎÊý£º	dataPtr£º½ÓÊÕµÄÊý¾ÝÖ¸Õë
    171          //
    172          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°ÜÔ­Òò
    173          //
    174          //	ËµÃ÷£º		
    175          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          uint8 MQTT_UnPacketRecv(uint8 *dataPtr)
   \                     MQTT_UnPacketRecv:
    177          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    178          	
    179          	uint8 status = 255;
    180          	uint8 type = dataPtr[0] >> 4;				//ÀàÐÍ¼ì²é
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   C4           SWAP    A
   \   000014   540F         ANL     A,#0xf
   \   000016   F8           MOV     R0,A
    181          	
    182          	if(type < 1 || type > 14)
   \   000017   74FF         MOV     A,#-0x1
   \   000019   28           ADD     A,R0
   \   00001A   C3           CLR     C
   \   00001B   940E         SUBB    A,#0xe
   \   00001D   4005         JC      ??MQTT_UnPacketRecv_0
    183          		return status;
   \                     ??MQTT_UnPacketRecv_1:
   \   00001F   79FF         MOV     R1,#-0x1
   \   000021   02....       LJMP    ??MQTT_UnPacketRecv_2 & 0xFFFF
    184          	
    185          	if(type == MQTT_PKT_PUBLISH)
   \                     ??MQTT_UnPacketRecv_0:
   \   000024   7403         MOV     A,#0x3
   \   000026   68           XRL     A,R0
   \   000027   6003         JZ      $+5
   \   000029   02....       LJMP    ??MQTT_UnPacketRecv_3 & 0xFFFF
    186          	{
    187          		uint8 *msgPtr;
    188          		uint32 remain_len = 0;
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine51 & 0xFFFF
    189          		
    190          		msgPtr = dataPtr + MQTT_ReadLength(dataPtr + 1, 4, &remain_len) + 1;
   \                     ??CrossCallReturnLabel_77:
   \   000038   8582..       MOV     ?V0 + 0,DPL
   \   00003B   8583..       MOV     ?V0 + 1,DPH
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C04         MOV     R4,#0x4
   \   000045   7D00         MOV     R5,#0x0
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??MQTT_ReadLength?relay
   \   000053   7402         MOV     A,#0x2
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   8A..         MOV     ?V0 + 0,R2
   \   00005A   8B..         MOV     ?V0 + 1,R3
   \   00005C   EE           MOV     A,R6
   \   00005D   25..         ADD     A,?V0 + 0
   \   00005F   F582         MOV     DPL,A
   \   000061   EF           MOV     A,R7
   \   000062   35..         ADDC    A,?V0 + 1
   \   000064   F583         MOV     DPH,A
   \   000066   A3           INC     DPTR
   \   000067   A882         MOV     R0,DPL
   \   000069   A983         MOV     R1,DPH
    191          		
    192          		if(remain_len < 2 || dataPtr[0] & 0x01)					//retain
   \   00006B   85..82       MOV     DPL,?XSP + 0
   \   00006E   85..83       MOV     DPH,?XSP + 1
   \   000071   C3           CLR     C
   \   000072   E0           MOVX    A,@DPTR
   \   000073   9402         SUBB    A,#0x2
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   9400         SUBB    A,#0x0
   \   000079   40A4         JC      ??MQTT_UnPacketRecv_1
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   A2E0         MOV     C,0xE0 /* A   */.0
   \   000082   409B         JC      ??MQTT_UnPacketRecv_1
    193          			return 255;
    194          		
    195          		if(remain_len < ((uint16)msgPtr[0] << 8 | msgPtr[1]) + 2)
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   C082         PUSH    DPL
   \   00008C   C083         PUSH    DPH
   \   00008E   8882         MOV     DPL,R0
   \   000090   8983         MOV     DPH,R1
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FB           MOV     R3,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   2402         ADD     A,#0x2
   \   000098   FA           MOV     R2,A
   \   000099   EB           MOV     A,R3
   \   00009A   3400         ADDC    A,#0x0
   \   00009C   FB           MOV     R3,A
   \   00009D   D083         POP     DPH
   \   00009F   D082         POP     DPL
   \   0000A1   C3           CLR     C
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   9A           SUBB    A,R2
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   9B           SUBB    A,R3
   \   0000A7   5003         JNC     $+5
   \   0000A9   02....       LJMP    ??MQTT_UnPacketRecv_1 & 0xFFFF
    196          			return 255;
    197          		
    198          		if(strstr((int8 *)msgPtr + 2, CMD_TOPIC_PREFIX) != NULL)	//Èç¹ûÊÇÃüÁîÏÂ·¢
   \   0000AC                ; Setup parameters for call to function strstr
   \   0000AC   7C..         MOV     R4,#`?<Constant "$creq">` & 0xff
   \   0000AE   7D..         MOV     R5,#(`?<Constant "$creq">` >> 8) & 0xff
   \   0000B0   E8           MOV     A,R0
   \   0000B1   2402         ADD     A,#0x2
   \   0000B3   FA           MOV     R2,A
   \   0000B4   E9           MOV     A,R1
   \   0000B5   3400         ADDC    A,#0x0
   \   0000B7   FB           MOV     R3,A
   \   0000B8   12....       LCALL   ??strstr?relay
   \   0000BB   8B..         MOV     ?V0 + 1,R3
   \   0000BD   EA           MOV     A,R2
   \   0000BE   45..         ORL     A,?V0 + 1
   \   0000C0   6004         JZ      ??MQTT_UnPacketRecv_4
    199          			status = MQTT_PKT_CMD;
   \   0000C2   790F         MOV     R1,#0xf
   \   0000C4   8006         SJMP    ??MQTT_UnPacketRecv_2
    200          		else
    201          			status = MQTT_PKT_PUBLISH;
   \                     ??MQTT_UnPacketRecv_4:
   \   0000C6   7903         MOV     R1,#0x3
   \   0000C8   8002         SJMP    ??MQTT_UnPacketRecv_2
    202          	}
    203          	else
    204          		status = type;
   \                     ??MQTT_UnPacketRecv_3:
   \   0000CA   E8           MOV     A,R0
   \   0000CB   F9           MOV     R1,A
    205          	
    206          	return status;
   \                     ??MQTT_UnPacketRecv_2:
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D1   02....       LJMP    ?Subroutine1 & 0xFFFF
    207          
    208          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MQTT_ReadLength
   \   000001                ; Setup parameters for call to function MQTT_ReadLength
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    209          
    210          //==========================================================
    211          //	º¯ÊýÃû³Æ£º	MQTT_PacketConnect
    212          //
    213          //	º¯Êý¹¦ÄÜ£º	Á¬½ÓÏûÏ¢×é°ü
    214          //
    215          //	Èë¿Ú²ÎÊý£º	user£ºÓÃ»§Ãû£º²úÆ·ID
    216          //				password£ºÃÜÂë£º¼øÈ¨ÐÅÏ¢»òapikey
    217          //				devid£ºÉè±¸ID
    218          //				cTime£ºÁ¬½Ó±£³ÖÊ±¼ä
    219          //				clean_session£ºÀëÏßÏûÏ¢Çå³ý±êÖ¾
    220          //				qos£ºÖØ·¢±êÖ¾
    221          //				will_topic£ºÒì³£ÀëÏßtopic
    222          //				will_msg£ºÒì³£ÀëÏßÏûÏ¢
    223          //				will_retain£ºÏûÏ¢ÍÆËÍ±êÖ¾
    224          //				mqttPacket£º°üÖ¸Õë
    225          //
    226          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°Ü
    227          //
    228          //	ËµÃ÷£º		
    229          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          uint8 MQTT_PacketConnect(const int8 *user, const int8 *password, const int8 *devid,
   \                     MQTT_PacketConnect:
    231          						uint16 cTime, uint1 clean_session, uint1 qos,
    232          						const int8 *will_topic, const int8 *will_msg, int32 will_retain,
    233          						MQTT_PACKET_STRUCTURE *mqttPacket)
    234          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000016   EC           MOV     A,R4
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   ED           MOV     A,R5
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A2F0         MOV     C,B.0
   \   00001D   92..         MOV     ?VB.0,C
   \   00001F   A2F1         MOV     C,B.1
   \   000021   92..         MOV     ?VB.1,C
   \   000023   741E         MOV     A,#0x1e
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00002B   7420         MOV     A,#0x20
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000033   7422         MOV     A,#0x22
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00003B   7426         MOV     A,#0x26
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0 + 8,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 9,A
    235          	
    236          	uint8 flags = 0;
   \   000047   75..00       MOV     ?V0 + 6,#0x0
    237          	uint8 will_topic_len = 0;
    238          	uint16 total_len = 15;
    239          	int16 len = 0, devid_len = strlen(devid);
   \   00004A                ; Setup parameters for call to function strlen
   \   00004A   741C         MOV     A,#0x1c
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000052   8A..         MOV     ?V0 + 0,R2
   \   000054   8B..         MOV     ?V0 + 1,R3
   \   000056   AE..         MOV     R6,?V0 + 0
   \   000058   AF..         MOV     R7,?V0 + 1
    240          	
    241          	if(!devid)
   \   00005A   741C         MOV     A,#0x1c
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000062   7005         JNZ     ??MQTT_PacketConnect_0
    242          		return 1;
   \   000064   7901         MOV     R1,#0x1
   \   000066   02....       LJMP    ??MQTT_PacketConnect_1 & 0xFFFF
    243          	
    244          	total_len += devid_len + 2;
   \                     ??MQTT_PacketConnect_0:
   \   000069   EE           MOV     A,R6
   \   00006A   2411         ADD     A,#0x11
   \   00006C   F5..         MOV     ?V0 + 0,A
   \   00006E   EF           MOV     A,R7
   \   00006F   3400         ADDC    A,#0x0
   \   000071   F5..         MOV     ?V0 + 1,A
    245          	
    246          	//¶ÏÏßºó£¬ÊÇ·ñÇåÀíÀëÏßÏûÏ¢£º1-ÇåÀí	0-²»ÇåÀí--------------------------------------------
    247          	if(clean_session)
   \   000073   A2..         MOV     C,?VB.0
   \   000075   5003         JNC     ??MQTT_PacketConnect_2
    248          	{
    249          		flags |= MQTT_CONNECT_CLEAN_SESSION;
   \   000077   75..02       MOV     ?V0 + 6,#0x2
    250          	}
    251          	
    252          	//Òì³£µôÏßÇé¿öÏÂ£¬·þÎñÆ÷·¢²¼µÄtopic------------------------------------------------------
    253          	if(will_topic)
   \                     ??MQTT_PacketConnect_2:
   \   00007A   E5..         MOV     A,?V0 + 14
   \   00007C   45..         ORL     A,?V0 + 15
   \   00007E   602E         JZ      ??CrossCallReturnLabel_86
    254          	{
    255          		flags |= MQTT_CONNECT_WILL_FLAG;
   \   000080   E5..         MOV     A,?V0 + 6
   \   000082   D2E2         SETB    0xE0 /* A   */.2
   \   000084   F5..         MOV     ?V0 + 6,A
    256          		will_topic_len = strlen(will_topic);
   \   000086                ; Setup parameters for call to function strlen
   \   000086   AA..         MOV     R2,?V0 + 14
   \   000088   AB..         MOV     R3,?V0 + 15
   \   00008A   12....       LCALL   ??strlen?relay
    257          		total_len += 4 + will_topic_len + strlen(will_msg);
   \   00008D   EA           MOV     A,R2
   \   00008E   2404         ADD     A,#0x4
   \   000090   F5..         MOV     ?V0 + 2,A
   \   000092   E4           CLR     A
   \   000093   3400         ADDC    A,#0x0
   \   000095   F5..         MOV     ?V0 + 3,A
   \   000097                ; Setup parameters for call to function strlen
   \   000097   AA..         MOV     R2,?V0 + 10
   \   000099   AB..         MOV     R3,?V0 + 11
   \   00009B   12....       LCALL   ??strlen?relay
   \   00009E   8A..         MOV     ?V0 + 12,R2
   \   0000A0   8B..         MOV     ?V0 + 13,R3
   \   0000A2   E5..         MOV     A,?V0 + 2
   \   0000A4   25..         ADD     A,?V0 + 12
   \   0000A6   F8           MOV     R0,A
   \   0000A7   E5..         MOV     A,?V0 + 3
   \   0000A9   35..         ADDC    A,?V0 + 13
   \   0000AB   12....       LCALL   ?Subroutine55 & 0xFFFF
    258          	}
    259          	
    260          	//qos¼¶±ð--Ö÷ÒªÓÃÓÚPUBLISH£¨·¢²¼Ì¬£©ÏûÏ¢µÄ£¬±£Ö¤ÏûÏ¢´«µÝµÄ´ÎÊý-----------------------------
    261          	switch((unsigned char)qos)
   \                     ??CrossCallReturnLabel_86:
   \   0000AE   A2..         MOV     C,?VB.1
   \   0000B0   E4           CLR     A
   \   0000B1   33           RLC     A
   \   0000B2   6006         JZ      ??MQTT_PacketConnect_3
   \   0000B4   14           DEC     A
   \   0000B5   702A         JNZ     ??MQTT_PacketConnect_4
    262          	{
    263          		case MQTT_QOS_LEVEL0:
    264          			flags |= MQTT_CONNECT_WILL_QOS0;							//×î¶àÒ»´Î
    265          		break;
    266          		
    267          		case MQTT_QOS_LEVEL1:
    268          			flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_QOS1);	//×îÉÙÒ»´Î
   \   0000B7   43..0C       ORL     ?V0 + 6,#0xc
    269          		break;
    270          		
    271          		case MQTT_QOS_LEVEL2:
    272          			flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_QOS2);	//Ö»ÓÐÒ»´Î
    273          		break;
    274          		
    275          		default:
    276          		return 2;
    277          	}
    278          	
    279          	//Ö÷ÒªÓÃÓÚPUBLISH(·¢²¼Ì¬)µÄÏûÏ¢£¬±íÊ¾·þÎñÆ÷Òª±£ÁôÕâ´ÎÍÆËÍµÄÐÅÏ¢£¬Èç¹ûÓÐÐÂµÄ¶©ÔÄÕß³öÏÖ£¬¾Í°ÑÕâÏûÏ¢ÍÆËÍ¸øËü¡£Èç¹û²»ÉèÄÇÃ´ÍÆËÍÖÁµ±Ç°¶©ÔÄµÄ¾ÍÊÍ·ÅÁË
    280          	if(will_retain)
   \                     ??MQTT_PacketConnect_3:
   \   0000BA   7424         MOV     A,#0x24
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   0000C2   6003         JZ      ??MQTT_PacketConnect_5
    281          	{
    282          		flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_RETAIN);
   \   0000C4   43..24       ORL     ?V0 + 6,#0x24
    283          	}
    284          	
    285          	//ÕËºÅÎª¿Õ ÃÜÂëÎª¿Õ---------------------------------------------------------------------
    286          	if(!user || !password)
   \                     ??MQTT_PacketConnect_5:
   \   0000C7   7402         MOV     A,#0x2
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   0000CF   600B         JZ      ??MQTT_PacketConnect_6
   \   0000D1   85..82       MOV     DPL,?XSP + 0
   \   0000D4   85..83       MOV     DPH,?XSP + 1
   \   0000D7   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0000DA   700A         JNZ     ??MQTT_PacketConnect_7
    287          	{
    288          		return 3;
   \                     ??MQTT_PacketConnect_6:
   \   0000DC   7903         MOV     R1,#0x3
   \   0000DE   02....       LJMP    ??MQTT_PacketConnect_1 & 0xFFFF
    289          	}
   \                     ??MQTT_PacketConnect_4:
   \   0000E1   7902         MOV     R1,#0x2
   \   0000E3   02....       LJMP    ??MQTT_PacketConnect_1 & 0xFFFF
    290          	flags |= MQTT_CONNECT_USER_NAME | MQTT_CONNECT_PASSORD;
   \                     ??MQTT_PacketConnect_7:
   \   0000E6   43..C0       ORL     ?V0 + 6,#0xc0
    291          	
    292          	total_len += strlen(user) + strlen(password) + 4;
   \   0000E9                ; Setup parameters for call to function strlen
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000F1   8A..         MOV     ?V0 + 12,R2
   \   0000F3   8B..         MOV     ?V0 + 13,R3
   \   0000F5                ; Setup parameters for call to function strlen
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000FE   8A..         MOV     ?V0 + 2,R2
   \   000100   8B..         MOV     ?V0 + 3,R3
   \   000102   E5..         MOV     A,?V0 + 12
   \   000104   25..         ADD     A,?V0 + 2
   \   000106   F8           MOV     R0,A
   \   000107   E5..         MOV     A,?V0 + 13
   \   000109   35..         ADDC    A,?V0 + 3
   \   00010B   F9           MOV     R1,A
   \   00010C   E8           MOV     A,R0
   \   00010D   2404         ADD     A,#0x4
   \   00010F   F8           MOV     R0,A
   \   000110   E9           MOV     A,R1
   \   000111   3400         ADDC    A,#0x0
   \   000113   12....       LCALL   ?Subroutine55 & 0xFFFF
    293          	
    294          	//·ÖÅäÄÚ´æ-----------------------------------------------------------------------------
    295          	MQTT_NewBuffer(mqttPacket, total_len);
   \                     ??CrossCallReturnLabel_87:
   \   000116                ; Setup parameters for call to function MQTT_NewBuffer
   \   000116   AC..         MOV     R4,?V0 + 0
   \   000118   FD           MOV     R5,A
   \   000119   AA..         MOV     R2,?V0 + 8
   \   00011B   AB..         MOV     R3,?V0 + 9
   \   00011D   12....       LCALL   ??MQTT_NewBuffer?relay
    296          	if(mqttPacket->_data == NULL)
   \   000120   85..82       MOV     DPL,?V0 + 8
   \   000123   85..83       MOV     DPH,?V0 + 9
   \   000126   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000129   7005         JNZ     ??MQTT_PacketConnect_8
    297          		return 4;
   \   00012B   7904         MOV     R1,#0x4
   \   00012D   02....       LJMP    ??MQTT_PacketConnect_1 & 0xFFFF
    298          	
    299          	memset(mqttPacket->_data, 0, total_len);
   \                     ??MQTT_PacketConnect_8:
   \   000130                ; Setup parameters for call to function memset
   \   000130   78..         MOV     R0,#?V0 + 0
   \   000132   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000135   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
    300          	
    301          /*************************************¹Ì¶¨Í·²¿***********************************************/
    302          	
    303          	//¹Ì¶¨Í·²¿----------------------Á¬½ÓÇëÇóÀàÐÍ---------------------------------------------
    304          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_CONNECT << 4;
   \   00013B   E5..         MOV     A,?V0 + 8
   \   00013D   2402         ADD     A,#0x2
   \   00013F   F5..         MOV     ?V0 + 2,A
   \   000141   E5..         MOV     A,?V0 + 9
   \   000143   3400         ADDC    A,#0x0
   \   000145   F5..         MOV     ?V0 + 3,A
   \   000147   85..82       MOV     DPL,?V0 + 8
   \   00014A   85..83       MOV     DPH,?V0 + 9
   \   00014D   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000150   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000153   E8           MOV     A,R0
   \   000154   2A           ADD     A,R2
   \   000155   F582         MOV     DPL,A
   \   000157   E9           MOV     A,R1
   \   000158   3B           ADDC    A,R3
   \   000159   F583         MOV     DPH,A
   \   00015B   7410         MOV     A,#0x10
   \   00015D   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000160   12....       LCALL   ??Subroutine96_0 & 0xFFFF
    305          	
    306          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶ÈÖµ-----------------------------------------------
    307          	len = MQTT_DumpLength(total_len - 5, mqttPacket->_data + mqttPacket->_len);
   \                     ??CrossCallReturnLabel_180:
   \   000163                ; Setup parameters for call to function MQTT_DumpLength
   \   000163   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000166   E8           MOV     A,R0
   \   000167   2A           ADD     A,R2
   \   000168   FC           MOV     R4,A
   \   000169   E9           MOV     A,R1
   \   00016A   3B           ADDC    A,R3
   \   00016B   FD           MOV     R5,A
   \   00016C   E5..         MOV     A,?V0 + 0
   \   00016E   24FB         ADD     A,#-0x5
   \   000170   FA           MOV     R2,A
   \   000171   E5..         MOV     A,?V0 + 1
   \   000173   34FF         ADDC    A,#-0x1
   \   000175   FB           MOV     R3,A
   \   000176   12....       LCALL   ?Subroutine54 & 0xFFFF
    308          	if(len < 0)
   \                     ??CrossCallReturnLabel_145:
   \   000179   500C         JNC     ??MQTT_PacketConnect_9
    309          	{
    310          		MQTT_DeleteBuffer(mqttPacket);
   \   00017B                ; Setup parameters for call to function MQTT_DeleteBuffer
   \   00017B   AA..         MOV     R2,?V0 + 8
   \   00017D   AB..         MOV     R3,?V0 + 9
   \   00017F   12....       LCALL   ??MQTT_DeleteBuffer?relay
    311          		return 5;
   \   000182   7905         MOV     R1,#0x5
   \   000184   02....       LJMP    ??MQTT_PacketConnect_1 & 0xFFFF
    312          	}
    313          	else
    314          		mqttPacket->_len += len;
   \                     ??MQTT_PacketConnect_9:
   \   000187   85..82       MOV     DPL,?V0 + 2
   \   00018A   85..83       MOV     DPH,?V0 + 3
   \   00018D   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000190   F0           MOVX    @DPTR,A
    315          	
    316          /*************************************¿É±äÍ·²¿***********************************************/
    317          	
    318          	//¿É±äÍ·²¿----------------------Ð­ÒéÃû³¤¶È ºÍ Ð­ÒéÃû--------------------------------------
    319          	mqttPacket->_data[mqttPacket->_len++] = 0;
   \   000191   85..82       MOV     DPL,?V0 + 8
   \   000194   85..83       MOV     DPH,?V0 + 9
   \   000197   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00019A   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00019D   E4           CLR     A
   \   00019E   12....       LCALL   ?Subroutine9 & 0xFFFF
    320          	mqttPacket->_data[mqttPacket->_len++] = 4;
    321          	mqttPacket->_data[mqttPacket->_len++] = 'M';
   \                     ??CrossCallReturnLabel_10:
   \   0001A1   744D         MOV     A,#0x4d
   \   0001A3   12....       LCALL   ?Subroutine18 & 0xFFFF
    322          	mqttPacket->_data[mqttPacket->_len++] = 'Q';
   \                     ??CrossCallReturnLabel_26:
   \   0001A6   7451         MOV     A,#0x51
   \   0001A8   12....       LCALL   ?Subroutine17 & 0xFFFF
    323          	mqttPacket->_data[mqttPacket->_len++] = 'T';
   \                     ??CrossCallReturnLabel_24:
   \   0001AB   12....       LCALL   ?Subroutine17 & 0xFFFF
    324          	mqttPacket->_data[mqttPacket->_len++] = 'T';
   \                     ??CrossCallReturnLabel_25:
   \   0001AE   12....       LCALL   ?Subroutine9 & 0xFFFF
    325          	
    326          	//¿É±äÍ·²¿----------------------protocol level 4-----------------------------------------
    327          	mqttPacket->_data[mqttPacket->_len++] = 4;
    328          	
    329          	//¿É±äÍ·²¿----------------------Á¬½Ó±êÖ¾(¸Ãº¯Êý¿ªÍ·´¦ÀíµÄÊý¾Ý)-----------------------------
    330              mqttPacket->_data[mqttPacket->_len++] = flags;
   \                     ??CrossCallReturnLabel_11:
   \   0001B1   E5..         MOV     A,?V0 + 6
   \   0001B3   12....       LCALL   ?Subroutine18 & 0xFFFF
    331          	
    332          	//¿É±äÍ·²¿----------------------±£³ÖÁ¬½ÓµÄÊ±¼ä(Ãë)----------------------------------------
    333          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(cTime);
   \                     ??CrossCallReturnLabel_27:
   \   0001B6   E5..         MOV     A,?V0 + 5
   \   0001B8   12....       LCALL   ?Subroutine18 & 0xFFFF
    334          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(cTime);
   \                     ??CrossCallReturnLabel_28:
   \   0001BB   E5..         MOV     A,?V0 + 4
   \   0001BD   12....       LCALL   ?Subroutine18 & 0xFFFF
    335          	 
    336          /*************************************ÏûÏ¢Ìå************************************************/
    337          
    338          	//ÏûÏ¢Ìå----------------------------devid³¤¶È¡¢devid-------------------------------------
    339          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(devid_len);
   \                     ??CrossCallReturnLabel_29:
   \   0001C0   EF           MOV     A,R7
   \   0001C1   12....       LCALL   ?Subroutine18 & 0xFFFF
    340          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(devid_len);
   \                     ??CrossCallReturnLabel_30:
   \   0001C4   EE           MOV     A,R6
   \   0001C5   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0001C8   12....       LCALL   ??Subroutine96_0 & 0xFFFF
    341          	
    342          	strncat((int8 *)mqttPacket->_data + mqttPacket->_len, devid, devid_len);
   \                     ??CrossCallReturnLabel_181:
   \   0001CB                ; Setup parameters for call to function strncat
   \   0001CB   8E..         MOV     ?V0 + 0,R6
   \   0001CD   8F..         MOV     ?V0 + 1,R7
   \   0001CF   78..         MOV     R0,#?V0 + 0
   \   0001D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D4   741E         MOV     A,#0x1e
   \   0001D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D9   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0001DC   12....       LCALL   ?DEALLOC_XSTACK8
    343          	mqttPacket->_len += devid_len;
   \   0001DF   85..82       MOV     DPL,?V0 + 2
   \   0001E2   85..83       MOV     DPH,?V0 + 3
   \   0001E5   12....       LCALL   ??Subroutine95_0 & 0xFFFF
    344          	
    345          	//ÏûÏ¢Ìå----------------------------will_flag ºÍ will_msg---------------------------------
    346          	if(flags & MQTT_CONNECT_WILL_FLAG)
   \                     ??CrossCallReturnLabel_177:
   \   0001E8   E5..         MOV     A,?V0 + 6
   \   0001EA   A2E2         MOV     C,0xE0 /* A   */.2
   \   0001EC   503A         JNC     ??CrossCallReturnLabel_150
    347          	{
    348          		unsigned short mLen = 0;
    349          		
    350          		if(!will_msg)
   \   0001EE   E5..         MOV     A,?V0 + 10
   \   0001F0   45..         ORL     A,?V0 + 11
   \   0001F2   7006         JNZ     ??MQTT_PacketConnect_10
    351          			will_msg = "";
   \   0001F4   75....       MOV     ?V0 + 10,#`?<Constant "">` & 0xff
   \   0001F7   75....       MOV     ?V0 + 11,#(`?<Constant "">` >> 8) & 0xff
    352          		
    353          		mLen = strlen(will_topic);
   \                     ??MQTT_PacketConnect_10:
   \   0001FA                ; Setup parameters for call to function strlen
   \   0001FA   AA..         MOV     R2,?V0 + 14
   \   0001FC   AB..         MOV     R3,?V0 + 15
   \   0001FE   12....       LCALL   ??Subroutine93_0 & 0xFFFF
    354          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(mLen);
    355          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(mLen);
    356          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, will_topic, mLen);
   \                     ??CrossCallReturnLabel_155:
   \   000201   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000204   AC..         MOV     R4,?V0 + 14
   \   000206   AD..         MOV     R5,?V0 + 15
   \   000208   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00020B   12....       LCALL   ?DEALLOC_XSTACK8
    357          		mqttPacket->_len += mLen;
   \   00020E   12....       LCALL   ?Subroutine27 & 0xFFFF
    358          		
    359          		mLen = strlen(will_msg);
   \                     ??CrossCallReturnLabel_149:
   \   000211                ; Setup parameters for call to function strlen
   \   000211   AA..         MOV     R2,?V0 + 10
   \   000213   AB..         MOV     R3,?V0 + 11
   \   000215   12....       LCALL   ??Subroutine93_0 & 0xFFFF
    360          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(mLen);
    361          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(mLen);
    362          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, will_msg, mLen);
   \                     ??CrossCallReturnLabel_156:
   \   000218   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021B   AC..         MOV     R4,?V0 + 10
   \   00021D   AD..         MOV     R5,?V0 + 11
   \   00021F   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000222   12....       LCALL   ?DEALLOC_XSTACK8
    363          		mqttPacket->_len += mLen;
   \   000225   12....       LCALL   ?Subroutine27 & 0xFFFF
    364          	}
    365          	
    366          	//ÏûÏ¢Ìå----------------------------use---------------------------------------------------
    367          	if(flags & MQTT_CONNECT_USER_NAME)
    368          	{
    369          		unsigned short user_len = strlen(user);
   \                     ??CrossCallReturnLabel_150:
   \   000228                ; Setup parameters for call to function strlen
   \   000228   7402         MOV     A,#0x2
   \   00022A   12....       LCALL   ?XSTACK_DISP0_8
   \   00022D   12....       LCALL   ?Subroutine7 & 0xFFFF
    370          		
    371          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(user_len);
    372          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(user_len);
    373          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, user, user_len);
   \                     ??CrossCallReturnLabel_153:
   \   000230   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000233   7404         MOV     A,#0x4
   \   000235   12....       LCALL   ?XSTACK_DISP0_8
   \   000238   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00023B   12....       LCALL   ?DEALLOC_XSTACK8
    374          		mqttPacket->_len += user_len;
   \   00023E   12....       LCALL   ?Subroutine27 & 0xFFFF
    375          	}
    376          
    377          	//ÏûÏ¢Ìå----------------------------password----------------------------------------------
    378          	if(flags & MQTT_CONNECT_PASSORD)
    379          	{
    380          		unsigned short psw_len = strlen(password);
   \                     ??CrossCallReturnLabel_151:
   \   000241                ; Setup parameters for call to function strlen
   \   000241   85..82       MOV     DPL,?XSP + 0
   \   000244   85..83       MOV     DPH,?XSP + 1
   \   000247   12....       LCALL   ?Subroutine7 & 0xFFFF
    381          		
    382          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(psw_len);
    383          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(psw_len);
    384          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, password, psw_len);
   \                     ??CrossCallReturnLabel_154:
   \   00024A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024D   7402         MOV     A,#0x2
   \   00024F   12....       LCALL   ?XSTACK_DISP0_8
   \   000252   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000255   12....       LCALL   ?DEALLOC_XSTACK8
    385          		mqttPacket->_len += psw_len;
   \   000258   12....       LCALL   ?Subroutine27 & 0xFFFF
    386          	}
    387          
    388          	return 0;
   \                     ??CrossCallReturnLabel_152:
   \   00025B   7900         MOV     R1,#0x0
   \                     ??MQTT_PacketConnect_1:
   \   00025D   7404         MOV     A,#0x4
   \   00025F   02....       LJMP    ??Subroutine97_0 & 0xFFFF
    389          
    390          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F9           MOV     R1,A
   \   000001   E5..         MOV     A,?V0 + 0
   \   000003   28           ADD     A,R0
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   39           ADDC    A,R1
   \   000009   F5..         MOV     ?V0 + 1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ??MQTT_DumpLength?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   A8..         MOV     R0,?V0 + 0
   \   000009   A9..         MOV     R1,?V0 + 1
   \   00000B   C3           CLR     C
   \   00000C   E9           MOV     A,R1
   \   00000D                REQUIRE ??Subroutine91_0
   \   00000D                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   12....       LCALL   ??strlen?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine92_0
   \   000006                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   7454         MOV     A,#0x54
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   7404         MOV     A,#0x4
   \   000005   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   2401         ADD     A,#0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3400         ADDC    A,#0x0
   \   00000A   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   EA           MOV     A,R2
   \   000012   28           ADD     A,R0
   \   000013   F582         MOV     DPL,A
   \   000015   EB           MOV     A,R3
   \   000016   39           ADDC    A,R1
   \   000017   F583         MOV     DPH,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003                REQUIRE ??Subroutine93_0
   \   000003                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   85..82       MOV     DPL,?V0 + 8
   \   000006   85..83       MOV     DPH,?V0 + 9
   \   000009   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00000C   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00000F   E5..         MOV     A,?V0 + 1
   \   000011   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000014   E5..         MOV     A,?V0 + 0
   \   000016   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000019   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00001C                ; Setup parameters for call to function strncat
   \   00001C                ; Setup parameters for call to function strncat
   \   00001C                ; Setup parameters for call to function strncat
   \   00001C                ; Setup parameters for call to function strncat
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 10,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 11,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ??strlen?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   12....       LCALL   ??memset?relay
   \   000007   7402         MOV     A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2E           ADD     A,R6
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3F           ADDC    A,R7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 14,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   EA           MOV     A,R2
   \   000004   28           ADD     A,R0
   \   000005   F582         MOV     DPL,A
   \   000007   EB           MOV     A,R3
   \   000008   39           ADDC    A,R1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003                REQUIRE ??Subroutine101_0
   \   000003                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine102_0
   \   000006                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000003   EA           MOV     A,R2
   \   000004   28           ADD     A,R0
   \   000005   FA           MOV     R2,A
   \   000006   EB           MOV     A,R3
   \   000007   39           ADDC    A,R1
   \   000008   FB           MOV     R3,A
   \   000009   12....       LCALL   ??strncat?relay
   \   00000C   7402         MOV     A,#0x2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine105_0
   \   000006                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   22           RET
    391          
    392          //==========================================================
    393          //	º¯ÊýÃû³Æ£º	MQTT_PacketDisConnect
    394          //
    395          //	º¯Êý¹¦ÄÜ£º	¶Ï¿ªÁ¬½ÓÏûÏ¢×é°ü
    396          //
    397          //	Èë¿Ú²ÎÊý£º	mqttPacket£º°üÖ¸Õë
    398          //
    399          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    400          //
    401          //	ËµÃ÷£º		
    402          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          uint1 MQTT_PacketDisConnect(MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketDisConnect:
    404          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    405          
    406          	MQTT_NewBuffer(mqttPacket, 2);
   \   000009                ; Setup parameters for call to function MQTT_NewBuffer
   \   000009   7C02         MOV     R4,#0x2
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   12....       LCALL   ??Subroutine109_0 & 0xFFFF
    407          	if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_256:
   \   000010   7003         JNZ     ??MQTT_PacketDisConnect_0
    408          		return 1;
   \   000012   D3           SETB    C
   \   000013   8008         SJMP    ??CrossCallReturnLabel_14
    409          	
    410          /*************************************¹Ì¶¨Í·²¿***********************************************/
    411          	
    412          	//¹Ì¶¨Í·²¿----------------------Í·²¿ÏûÏ¢-------------------------------------------------
    413          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_DISCONNECT << 4;
   \                     ??MQTT_PacketDisConnect_0:
   \   000015   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000018   74E0         MOV     A,#-0x20
   \   00001A   12....       LCALL   ?Subroutine12 & 0xFFFF
    414          	
    415          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶ÈÖµ-----------------------------------------------
    416          	mqttPacket->_data[mqttPacket->_len++] = 0;
    417          	
    418          	return 0;
   \                     ??CrossCallReturnLabel_14:
   \   00001D                REQUIRE ?Subroutine3
   \   00001D                ; // Fall through to label ?Subroutine3
    419          
    420          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   12....       LCALL   ??MQTT_NewBuffer?relay
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007                REQUIRE ??Subroutine110_0
   \   000007                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00000F   E8           MOV     A,R0
   \   000010   2C           ADD     A,R4
   \   000011   F582         MOV     DPL,A
   \   000013   E9           MOV     A,R1
   \   000014   3D           ADDC    A,R5
   \   000015   F583         MOV     DPH,A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   E4           CLR     A
   \   000004   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000007   C3           CLR     C
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000006   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000009   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   E0           MOVX    A,@DPTR
   \   000011   28           ADD     A,R0
   \   000012   FC           MOV     R4,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   39           ADDC    A,R1
   \   000016   8C82         MOV     DPL,R4
   \   000018   F583         MOV     DPH,A
   \   00001A   22           RET
    421          
    422          //==========================================================
    423          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketConnectAck
    424          //
    425          //	º¯Êý¹¦ÄÜ£º	Á¬½ÓÏûÏ¢½â°ü
    426          //
    427          //	Èë¿Ú²ÎÊý£º	rev_data£º½ÓÊÕµÄÊý¾Ý
    428          //
    429          //	·µ»Ø²ÎÊý£º	1¡¢255-Ê§°Ü		ÆäËû-Æ½Ì¨µÄ·µ»ØÂë
    430          //
    431          //	ËµÃ÷£º		
    432          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    433          uint8 MQTT_UnPacketConnectAck(uint8 *rev_data)
   \                     MQTT_UnPacketConnectAck:
    434          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    435          
    436          	if(rev_data[1] != 2)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6402         XRL     A,#0x2
   \   00000C   6004         JZ      ??MQTT_UnPacketConnectAck_0
    437          		return 1;
   \   00000E   7901         MOV     R1,#0x1
   \   000010   801C         SJMP    ??MQTT_UnPacketConnectAck_1
    438          	
    439          	if(rev_data[2] == 0 || rev_data[2] == 1)
   \                     ??MQTT_UnPacketConnectAck_0:
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   6005         JZ      ??MQTT_UnPacketConnectAck_2
   \   00001C   7401         MOV     A,#0x1
   \   00001E   68           XRL     A,R0
   \   00001F   700B         JNZ     ??MQTT_UnPacketConnectAck_3
    440          		return rev_data[3];
   \                     ??MQTT_UnPacketConnectAck_2:
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   8002         SJMP    ??MQTT_UnPacketConnectAck_1
    441          	else
    442          		return 255;
   \                     ??MQTT_UnPacketConnectAck_3:
   \   00002C   79FF         MOV     R1,#-0x1
   \                     ??MQTT_UnPacketConnectAck_1:
   \   00002E   02....       LJMP    ?Subroutine4 & 0xFFFF
    443          
    444          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    445          
    446          //==========================================================
    447          //	º¯ÊýÃû³Æ£º	MQTT_PacketSaveData
    448          //
    449          //	º¯Êý¹¦ÄÜ£º	Êý¾ÝµãÉÏ´«×é°ü
    450          //
    451          //	Èë¿Ú²ÎÊý£º	devid£ºÉè±¸ID(¿ÉÎª¿Õ)
    452          //				send_buf£ºjson»º´æbuf
    453          //				send_len£ºjson×Ü³¤
    454          //				type_bin_head£ºbinÎÄ¼þµÄÏûÏ¢Í·
    455          //				type£ºÀàÐÍ
    456          //
    457          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    458          //
    459          //	ËµÃ÷£º		
    460          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          uint1 MQTT_PacketSaveData(const int8 *devid, int16 send_len, int8 *type_bin_head, uint8 type, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketSaveData:
    462          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   7410         MOV     A,#0x10
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
    463          
    464          	if(MQTT_PacketPublish(MQTT_PUBLISH_ID, "$dp", NULL, send_len + 3, MQTT_QOS_LEVEL1, 0, 1, mqttPacket) == 0)
   \   000017                ; Setup parameters for call to function MQTT_PacketPublish
   \   000017   78..         MOV     R0,#?V0 + 2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   75..01       MOV     ?V0 + 4,#0x1
   \   00001F   75..00       MOV     ?V0 + 5,#0x0
   \   000022   78..         MOV     R0,#?V0 + 4
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   E4           CLR     A
   \   000028   F5..         MOV     ?V0 + 4,A
   \   00002A   78..         MOV     R0,#?V0 + 4
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   EE           MOV     A,R6
   \   000030   2403         ADD     A,#0x3
   \   000032   F5..         MOV     ?V0 + 4,A
   \   000034   EF           MOV     A,R7
   \   000035   3400         ADDC    A,#0x0
   \   000037   F5..         MOV     ?V0 + 5,A
   \   000039   78..         MOV     R0,#?V0 + 4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   E4           CLR     A
   \   00003F   F5..         MOV     ?V0 + 4,A
   \   000041   F5..         MOV     ?V0 + 5,A
   \   000043   78..         MOV     R0,#?V0 + 4
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7901         MOV     R1,#0x1
   \   00004A   7C..         MOV     R4,#`?<Constant "$dp">` & 0xff
   \   00004C   7D..         MOV     R5,#(`?<Constant "$dp">` >> 8) & 0xff
   \   00004E   7A0A         MOV     R2,#0xa
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   ??MQTT_PacketPublish?relay
   \   000055   740A         MOV     A,#0xa
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
   \   00005B   7029         JNZ     ??MQTT_PacketSaveData_0
    465          	{
    466          		mqttPacket->_data[mqttPacket->_len++] = type;					//ÀàÐÍ
   \   00005D   E5..         MOV     A,?V0 + 2
   \   00005F   2402         ADD     A,#0x2
   \   000061   F8           MOV     R0,A
   \   000062   E5..         MOV     A,?V0 + 3
   \   000064   3400         ADDC    A,#0x0
   \   000066   F9           MOV     R1,A
   \   000067   8882         MOV     DPL,R0
   \   000069   8983         MOV     DPH,R1
   \   00006B   12....       LCALL   ?Subroutine44 & 0xFFFF
    467          		
    468          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(send_len);
    469          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(send_len);
    470          	}
   \                     ??CrossCallReturnLabel_70:
   \   00006E   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000071   E5..         MOV     A,?V0 + 0
   \   000073   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000076   EF           MOV     A,R7
   \   000077   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00007A   EE           MOV     A,R6
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   8882         MOV     DPL,R0
   \   00007E   8983         MOV     DPH,R1
   \   000080   12....       LCALL   ??Subroutine96_0 & 0xFFFF
    471          	else
    472          		return 1;
    473          	
    474          	return 0;
   \                     ??CrossCallReturnLabel_182:
   \   000083   C3           CLR     C
   \   000084   8001         SJMP    ??MQTT_PacketSaveData_1
   \                     ??MQTT_PacketSaveData_0:
   \   000086   D3           SETB    C
   \                     ??MQTT_PacketSaveData_1:
   \   000087   7F06         MOV     R7,#0x6
   \   000089   02....       LJMP    ?BANKED_LEAVE_XDATA
    475          
    476          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00000F   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2A           ADD     A,R2
   \   000002   FC           MOV     R4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3B           ADDC    A,R3
   \   000006   8C82         MOV     DPL,R4
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
    477          
    478          //==========================================================
    479          //	º¯ÊýÃû³Æ£º	MQTT_PacketSaveBinData
    480          //
    481          //	º¯Êý¹¦ÄÜ£º	Îª½ûÖ¹ÎÄ¼þÉÏ´«×é°ü
    482          //
    483          //	Èë¿Ú²ÎÊý£º	name£ºÊý¾ÝÁ÷Ãû×Ö
    484          //				file_len£ºÎÄ¼þ³¤¶È
    485          //				mqttPacket£º°üÖ¸Õë
    486          //
    487          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    488          //
    489          //	ËµÃ÷£º		
    490          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    491          uint1 MQTT_PacketSaveBinData(const int8 *name, int16 file_len, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketSaveBinData:
    492          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7416         MOV     A,#0x16
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine43 & 0xFFFF
    493          
    494          	uint1 result = 1;
   \                     ??CrossCallReturnLabel_67:
   \   000015   D2..         SETB    ?VB.0
    495          	int8 *bin_head = NULL;
    496          	uint8 bin_head_len = 0;
    497          	int8 *payload = NULL;
    498          	int32 payload_size = 0;
    499          	
    500          	bin_head = (int8 *)MQTT_MallocBuffer(13 + strlen(name));
   \   000017                ; Setup parameters for call to function __xdata_malloc
   \   000017                ; Setup parameters for call to function strlen
   \   000017   12....       LCALL   ??strlen?relay
   \   00001A   EA           MOV     A,R2
   \   00001B   240D         ADD     A,#0xd
   \   00001D   FA           MOV     R2,A
   \   00001E   EB           MOV     A,R3
   \   00001F   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000022   8A..         MOV     ?V0 + 4,R2
   \   000024   8B..         MOV     ?V0 + 5,R3
    501          	if(bin_head == NULL)
   \   000026   EA           MOV     A,R2
   \   000027   45..         ORL     A,?V0 + 5
   \   000029   7004         JNZ     ??MQTT_PacketSaveBinData_0
    502          		return result;
   \                     ??MQTT_PacketSaveBinData_1:
   \   00002B   D3           SETB    C
   \   00002C   02....       LJMP    ??MQTT_PacketSaveBinData_2 & 0xFFFF
    503          	
    504          	sprintf(bin_head, "{\"ds_id\":\"%s\"}", name);
   \                     ??MQTT_PacketSaveBinData_0:
   \   00002F                ; Setup parameters for call to function sprintf
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   7C..         MOV     R4,#`?<Constant "{\\"ds_id\\":\\"%s\\"}">` & 0xff
   \   000036   7D..         MOV     R5,#(`?<Constant "{\\"ds_id\\":\\"%s\\"}">` >> 8) & 0xff
   \   000038   12....       LCALL   ??sprintf?relay
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    505          	
    506          	bin_head_len = strlen(bin_head);
   \   000040                ; Setup parameters for call to function strlen
   \   000040   AA..         MOV     R2,?V0 + 4
   \   000042   AB..         MOV     R3,?V0 + 5
   \   000044   12....       LCALL   ??strlen?relay
   \   000047   EA           MOV     A,R2
   \   000048   F5..         MOV     ?V0 + 12,A
    507          	payload_size = 7 + bin_head_len + file_len;
   \   00004A   F582         MOV     DPL,A
   \   00004C   8582..       MOV     ?V0 + 6,DPL
   \   00004F   2E           ADD     A,R6
   \   000050   F8           MOV     R0,A
   \   000051   E4           CLR     A
   \   000052   3F           ADDC    A,R7
   \   000053   F9           MOV     R1,A
   \   000054   E8           MOV     A,R0
   \   000055   2407         ADD     A,#0x7
   \   000057   F5..         MOV     ?V0 + 2,A
   \   000059   E9           MOV     A,R1
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   F5..         MOV     ?V0 + 3,A
    508          	
    509          	payload = (int8 *)MQTT_MallocBuffer(payload_size - file_len);
   \   00005E                ; Setup parameters for call to function __xdata_malloc
   \   00005E   E5..         MOV     A,?V0 + 2
   \   000060   C3           CLR     C
   \   000061   9E           SUBB    A,R6
   \   000062   FA           MOV     R2,A
   \   000063   E5..         MOV     A,?V0 + 3
   \   000065   9F           SUBB    A,R7
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   ??__xdata_malloc?relay
   \   00006A   8A..         MOV     ?V0 + 0,R2
   \   00006C   8B..         MOV     ?V0 + 1,R3
   \   00006E   85....       MOV     ?V0 + 8,?V0 + 4
   \   000071   85....       MOV     ?V0 + 9,?V0 + 5
   \   000074   EA           MOV     A,R2
   \   000075   45..         ORL     A,?V0 + 1
   \   000077   7009         JNZ     ??MQTT_PacketSaveBinData_3
    510          	if(payload == NULL)
    511          	{
    512          		MQTT_FreeBuffer(bin_head);
   \   000079                ; Setup parameters for call to function __xdata_free
   \   000079   AA..         MOV     R2,?V0 + 8
   \   00007B   AB..         MOV     R3,?V0 + 9
   \   00007D   12....       LCALL   ??__xdata_free?relay
    513          		
    514          		return result;
   \   000080   80A9         SJMP    ??MQTT_PacketSaveBinData_1
    515          	}
    516          	
    517          	payload[0] = 2;						//ÀàÐÍ
   \                     ??MQTT_PacketSaveBinData_3:
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   7402         MOV     A,#0x2
   \   000088   F0           MOVX    @DPTR,A
    518          		
    519          	payload[1] = MOSQ_MSB(bin_head_len);
   \   000089   A3           INC     DPTR
   \   00008A   E4           CLR     A
   \   00008B   12....       LCALL   ?Subroutine82 & 0xFFFF
    520          	payload[2] = MOSQ_LSB(bin_head_len);
   \                     ??CrossCallReturnLabel_133:
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E5..         MOV     A,?V0 + 12
   \   000092   F0           MOVX    @DPTR,A
    521          	
    522          	memcpy(payload + 3, bin_head, bin_head_len);
   \   000093                ; Setup parameters for call to function memcpy
   \   000093   75..00       MOV     ?V0 + 13,#0x0
   \   000096   78..         MOV     R0,#?V0 + 12
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   AC..         MOV     R4,?V0 + 4
   \   00009D   AD..         MOV     R5,?V0 + 5
   \   00009F   EA           MOV     A,R2
   \   0000A0   2403         ADD     A,#0x3
   \   0000A2   0A           INC     R2
   \   0000A3   0A           INC     R2
   \   0000A4   0A           INC     R2
   \   0000A5   EB           MOV     A,R3
   \   0000A6   3400         ADDC    A,#0x0
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    523          	
    524          	payload[bin_head_len + 3] = (file_len >> 24) & 0xFF;
                 	                                         ^
Warning[Pe063]: shift count is too large
   \   0000AF   E5..         MOV     A,?V0 + 0
   \   0000B1   25..         ADD     A,?V0 + 6
   \   0000B3   F8           MOV     R0,A
   \   0000B4   E5..         MOV     A,?V0 + 1
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E8           MOV     A,R0
   \   0000BA   FA           MOV     R2,A
   \   0000BB   E9           MOV     A,R1
   \   0000BC   FB           MOV     R3,A
   \   0000BD   8E..         MOV     ?V0 + 4,R6
   \   0000BF   8F..         MOV     ?V0 + 5,R7
   \   0000C1   740F         MOV     A,#0xf
   \   0000C3   78..         MOV     R0,#?V0 + 4
   \   0000C5   12....       LCALL   ?SS_SHR
   \   0000C8   E5..         MOV     A,?V0 + 4
   \   0000CA   8A82         MOV     DPL,R2
   \   0000CC   8B83         MOV     DPH,R3
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   12....       LCALL   ?Subroutine82 & 0xFFFF
    525          	payload[bin_head_len + 4] = (file_len >> 16) & 0xFF;
                 	                                         ^
Warning[Pe063]: shift count is too large
   \                     ??CrossCallReturnLabel_134:
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   F0           MOVX    @DPTR,A
    526          	payload[bin_head_len + 5] = (file_len >> 8) & 0xFF;
   \   0000D9   8E..         MOV     ?V0 + 4,R6
   \   0000DB   8F..         MOV     ?V0 + 5,R7
   \   0000DD   7408         MOV     A,#0x8
   \   0000DF   78..         MOV     R0,#?V0 + 4
   \   0000E1   12....       LCALL   ?SS_SHR
   \   0000E4   8A82         MOV     DPL,R2
   \   0000E6   8B83         MOV     DPH,R3
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   E5..         MOV     A,?V0 + 4
   \   0000EF   F0           MOVX    @DPTR,A
    527          	payload[bin_head_len + 6] = file_len & 0xFF;
   \   0000F0   EE           MOV     A,R6
   \   0000F1   8A82         MOV     DPL,R2
   \   0000F3   8B83         MOV     DPH,R3
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   F0           MOVX    @DPTR,A
    528          	
    529          	if(MQTT_PacketPublish(MQTT_PUBLISH_ID, "$dp", payload, payload_size, MQTT_QOS_LEVEL1, 0, 1, mqttPacket) == 0)
   \   0000FC                ; Setup parameters for call to function MQTT_PacketPublish
   \   0000FC   78..         MOV     R0,#?V0 + 10
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   75..01       MOV     ?V0 + 4,#0x1
   \   000104   75..00       MOV     ?V0 + 5,#0x0
   \   000107   78..         MOV     R0,#?V0 + 4
   \   000109   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010C   E4           CLR     A
   \   00010D   F5..         MOV     ?V0 + 4,A
   \   00010F   78..         MOV     R0,#?V0 + 4
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000114   78..         MOV     R0,#?V0 + 2
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000119   78..         MOV     R0,#?V0 + 0
   \   00011B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011E   7901         MOV     R1,#0x1
   \   000120   7C..         MOV     R4,#`?<Constant "$dp">` & 0xff
   \   000122   7D..         MOV     R5,#(`?<Constant "$dp">` >> 8) & 0xff
   \   000124   7A0A         MOV     R2,#0xa
   \   000126   7B00         MOV     R3,#0x0
   \   000128   12....       LCALL   ??MQTT_PacketPublish?relay
   \   00012B   740A         MOV     A,#0xa
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   E9           MOV     A,R1
   \   000131   7002         JNZ     ??MQTT_PacketSaveBinData_4
    530          		result = 0;
   \   000133   C2..         CLR     ?VB.0
    531          	
    532          	MQTT_FreeBuffer(bin_head);
   \                     ??MQTT_PacketSaveBinData_4:
   \   000135                ; Setup parameters for call to function __xdata_free
   \   000135   AA..         MOV     R2,?V0 + 8
   \   000137   AB..         MOV     R3,?V0 + 9
   \   000139   12....       LCALL   ??__xdata_free?relay
    533          	MQTT_FreeBuffer(payload);
   \   00013C                ; Setup parameters for call to function __xdata_free
   \   00013C   AA..         MOV     R2,?V0 + 0
   \   00013E   AB..         MOV     R3,?V0 + 1
   \   000140   12....       LCALL   ??__xdata_free?relay
    534          	
    535          	return result;
   \   000143   A2..         MOV     C,?VB.0
   \                     ??MQTT_PacketSaveBinData_2:
   \   000145   7F0E         MOV     R7,#0xe
   \   000147   02....       LJMP    ?BANKED_LEAVE_XDATA
    536          
    537          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   12....       LCALL   ??memcpy?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??__xdata_malloc?relay
   \   000006   22           RET
    538          
    539          //==========================================================
    540          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketCmd
    541          //
    542          //	º¯Êý¹¦ÄÜ£º	ÃüÁîÏÂ·¢½â°ü
    543          //
    544          //	Èë¿Ú²ÎÊý£º	rev_data£º½ÓÊÕµÄÊý¾ÝÖ¸Õë
    545          //				cmdid£ºcmdid-uuid
    546          //				req£ºÃüÁî
    547          //
    548          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°ÜÔ­Òò
    549          //
    550          //	ËµÃ÷£º		
    551          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          uint8 MQTT_UnPacketCmd(uint8 *rev_data, int8 **cmdid, int8 **req, uint16 *req_len)
   \                     MQTT_UnPacketCmd:
    553          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   7414         MOV     A,#0x14
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 6,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 7,A
   \   00001E   7416         MOV     A,#0x16
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 3,A
    554          
    555          	int8 *dataPtr = strchr((int8 *)rev_data + 6, '/');	//¼Ó6ÊÇÌø¹ýÍ·ÐÅÏ¢
   \   00002A                ; Setup parameters for call to function strchr
   \   00002A   7C2F         MOV     R4,#0x2f
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   EA           MOV     A,R2
   \   00002F   2406         ADD     A,#0x6
   \   000031   FA           MOV     R2,A
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   ??strchr?relay
   \   000039   8A..         MOV     ?V0 + 8,R2
   \   00003B   8B..         MOV     ?V0 + 9,R3
   \   00003D   AE..         MOV     R6,?V0 + 8
   \   00003F   AF..         MOV     R7,?V0 + 9
    556          	
    557          	uint32 remain_len = 0;
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   F0           MOVX    @DPTR,A
    558          	
    559          	if(dataPtr == NULL)									//Î´ÕÒµ½'/'
   \   00004B   EE           MOV     A,R6
   \   00004C   4F           ORL     A,R7
   \   00004D   7005         JNZ     ??MQTT_UnPacketCmd_0
    560          		return 1;
   \   00004F   7901         MOV     R1,#0x1
   \   000051   02....       LJMP    ??MQTT_UnPacketCmd_1 & 0xFFFF
    561          	dataPtr++;											//Ìø¹ý'/'
   \                     ??MQTT_UnPacketCmd_0:
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   A3           INC     DPTR
   \   000059   AE82         MOV     R6,DPL
   \   00005B   AF83         MOV     R7,DPH
    562          	
    563          	MQTT_ReadLength(rev_data + 1, 4, &remain_len);		//¶ÁÈ¡Ê£Óà×Ö½Ú
   \   00005D                ; Setup parameters for call to function MQTT_ReadLength
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   8582..       MOV     ?V0 + 8,DPL
   \   000066   8583..       MOV     ?V0 + 9,DPH
   \   000069   78..         MOV     R0,#?V0 + 8
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   7C04         MOV     R4,#0x4
   \   000070   7D00         MOV     R5,#0x0
   \   000072   85..82       MOV     DPL,?V0 + 4
   \   000075   85..83       MOV     DPH,?V0 + 5
   \   000078   A3           INC     DPTR
   \   000079   AA82         MOV     R2,DPL
   \   00007B   AB83         MOV     R3,DPH
   \   00007D   12....       LCALL   ??MQTT_ReadLength?relay
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    564          	
    565          	*cmdid = (int8 *)MQTT_MallocBuffer(37);				//cmdid¹Ì¶¨36×Ö½Ú£¬¶à·ÖÅäÒ»¸ö½áÊø·ûµÄÎ»ÖÃ
   \   000085                ; Setup parameters for call to function __xdata_malloc
   \   000085   7A25         MOV     R2,#0x25
   \   000087   7B00         MOV     R3,#0x0
   \   000089   12....       LCALL   ?Subroutine50 & 0xFFFF
    566          	if(*cmdid == NULL)
   \                     ??CrossCallReturnLabel_139:
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FA           MOV     R2,A
   \   00008E   4B           ORL     A,R3
   \   00008F   7005         JNZ     ??MQTT_UnPacketCmd_2
    567          		return 2;
   \   000091   7902         MOV     R1,#0x2
   \   000093   02....       LJMP    ??MQTT_UnPacketCmd_1 & 0xFFFF
    568          	
    569          	memset(*cmdid, 0, 37);								//È«²¿ÇåÁã
   \                     ??MQTT_UnPacketCmd_2:
   \   000096                ; Setup parameters for call to function memset
   \   000096   75..25       MOV     ?V0 + 4,#0x25
   \   000099   75..00       MOV     ?V0 + 5,#0x0
   \   00009C   78..         MOV     R0,#?V0 + 4
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
    570          	memcpy(*cmdid, (const int8 *)dataPtr, 36);			//¸´ÖÆcmdid
   \   0000A7                ; Setup parameters for call to function memcpy
   \   0000A7   75..24       MOV     ?V0 + 4,#0x24
   \   0000AA   78..         MOV     R0,#?V0 + 4
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AF   EE           MOV     A,R6
   \   0000B0   FC           MOV     R4,A
   \   0000B1   EF           MOV     A,R7
   \   0000B2   FD           MOV     R5,A
   \   0000B3   85..82       MOV     DPL,?V0 + 0
   \   0000B6   85..83       MOV     DPH,?V0 + 1
   \   0000B9   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000BC   12....       LCALL   ?DEALLOC_XSTACK8
    571          	dataPtr += 36;
    572          	
    573          	*req_len = remain_len - 44;							//ÃüÁî³¤¶È = Ê£Óà³¤¶È(remain_len) - 2 - 5($creq) - 1(\) - cmdid³¤¶È
   \   0000BF   85..82       MOV     DPL,?XSP + 0
   \   0000C2   85..83       MOV     DPH,?XSP + 1
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   24D4         ADD     A,#-0x2c
   \   0000C8   F8           MOV     R0,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   34FF         ADDC    A,#-0x1
   \   0000CD   F9           MOV     R1,A
   \   0000CE   85..82       MOV     DPL,?V0 + 2
   \   0000D1   85..83       MOV     DPH,?V0 + 3
   \   0000D4   12....       LCALL   ??Subroutine108_0 & 0xFFFF
    574          	*req = (int8 *)MQTT_MallocBuffer(*req_len + 1);		//·ÖÅäÃüÁî³¤¶È+1
    575          	if(*req == NULL)
   \                     ??CrossCallReturnLabel_248:
   \   0000D7   700D         JNZ     ??MQTT_UnPacketCmd_3
    576          	{
    577          		MQTT_FreeBuffer(*cmdid);
   \   0000D9                ; Setup parameters for call to function __xdata_free
   \   0000D9   85..82       MOV     DPL,?V0 + 0
   \   0000DC   85..83       MOV     DPH,?V0 + 1
   \   0000DF   12....       LCALL   ??Subroutine90_0 & 0xFFFF
    578          		return 3;
   \                     ??CrossCallReturnLabel_143:
   \   0000E2   7903         MOV     R1,#0x3
   \   0000E4   8032         SJMP    ??MQTT_UnPacketCmd_1
    579          	}
    580          	
    581          	memset(*req, 0, *req_len + 1);						//ÇåÁã
   \                     ??MQTT_UnPacketCmd_3:
   \   0000E6                ; Setup parameters for call to function memset
   \   0000E6   85..82       MOV     DPL,?V0 + 2
   \   0000E9   85..83       MOV     DPH,?V0 + 3
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   2401         ADD     A,#0x1
   \   0000EF   F5..         MOV     ?V0 + 0,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   3400         ADDC    A,#0x0
   \   0000F5   F5..         MOV     ?V0 + 1,A
   \   0000F7   78..         MOV     R0,#?V0 + 0
   \   0000F9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FC   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
    582          	memcpy(*req, (const int8 *)dataPtr, *req_len);		//¸´ÖÆÃüÁî
   \   000102                ; Setup parameters for call to function memcpy
   \   000102   85..82       MOV     DPL,?V0 + 2
   \   000105   85..83       MOV     DPH,?V0 + 3
   \   000108   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00010B   EE           MOV     A,R6
   \   00010C   2424         ADD     A,#0x24
   \   00010E   FC           MOV     R4,A
   \   00010F   EF           MOV     A,R7
   \   000110   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
    583          	
    584          	return 0;
   \   000116   7900         MOV     R1,#0x0
   \                     ??MQTT_UnPacketCmd_1:
   \   000118   7402         MOV     A,#0x2
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011D   7F0A         MOV     R7,#0xa
   \   00011F   02....       LJMP    ?BANKED_LEAVE_XDATA
    585          
    586          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FD           MOV     R5,A
   \   000003   85..82       MOV     DPL,?V0 + 6
   \   000006   85..83       MOV     DPH,?V0 + 7
   \   000009   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   12....       LCALL   ??memcpy?relay
   \   000006   7402         MOV     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function __xdata_malloc
   \   000005                ; Setup parameters for call to function __xdata_malloc
   \   000005                ; Setup parameters for call to function __xdata_malloc
   \   000005   E8           MOV     A,R0
   \   000006   2401         ADD     A,#0x1
   \   000008   FA           MOV     R2,A
   \   000009   E9           MOV     A,R1
   \   00000A   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00000D   85..82       MOV     DPL,?V0 + 6
   \   000010   85..83       MOV     DPH,?V0 + 7
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
   \   000018   85..82       MOV     DPL,?V0 + 6
   \   00001B   85..83       MOV     DPH,?V0 + 7
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   4B           ORL     A,R3
   \   000021   22           RET
    587          
    588          //==========================================================
    589          //	º¯ÊýÃû³Æ£º	MQTT_PacketCmdResp
    590          //
    591          //	º¯Êý¹¦ÄÜ£º	ÃüÁî»Ø¸´×é°ü
    592          //
    593          //	Èë¿Ú²ÎÊý£º	cmdid£ºcmdid
    594          //				req£ºÃüÁî
    595          //				mqttPacket£º°üÖ¸Õë
    596          //
    597          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    598          //
    599          //	ËµÃ÷£º		
    600          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          uint1 MQTT_PacketCmdResp(const int8 *cmdid, const int8 *req, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketCmdResp:
    602          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
   \   00000D   7414         MOV     A,#0x14
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine41 & 0xFFFF
    603          	
    604          	uint16 cmdid_len = strlen(cmdid);
   \                     ??CrossCallReturnLabel_61:
   \   000015                ; Setup parameters for call to function strlen
   \   000015   12....       LCALL   ??strlen?relay
   \   000018   8A..         MOV     ?V0 + 2,R2
   \   00001A   8B..         MOV     ?V0 + 3,R3
    605          	uint16 req_len = strlen(req);
   \   00001C                ; Setup parameters for call to function strlen
   \   00001C   AA..         MOV     R2,?V0 + 6
   \   00001E   AB..         MOV     R3,?V0 + 7
   \   000020   12....       LCALL   ??strlen?relay
    606          	_Bool status = 0;
    607          	
    608          	int8 *payload = MQTT_MallocBuffer(cmdid_len + 7);
   \   000023   E5..         MOV     A,?V0 + 2
   \   000025   2407         ADD     A,#0x7
   \   000027   F5..         MOV     ?V0 + 8,A
   \   000029   E5..         MOV     A,?V0 + 3
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   F5..         MOV     ?V0 + 9,A
   \   00002F                ; Setup parameters for call to function __xdata_malloc
   \   00002F   AA..         MOV     R2,?V0 + 8
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??__xdata_malloc?relay
   \   000035   8A..         MOV     ?V0 + 10,R2
   \   000037   8B..         MOV     ?V0 + 11,R3
   \   000039   AE..         MOV     R6,?V0 + 10
   \   00003B   AF..         MOV     R7,?V0 + 11
    609          	if(payload == NULL)
   \   00003D   EE           MOV     A,R6
   \   00003E   4F           ORL     A,R7
   \   00003F   7004         JNZ     ??MQTT_PacketCmdResp_0
    610          		return 1;
   \   000041   D3           SETB    C
   \   000042   02....       LJMP    ??MQTT_PacketCmdResp_1 & 0xFFFF
    611          	
    612          	memset(payload, 0, cmdid_len + 7);
   \                     ??MQTT_PacketCmdResp_0:
   \   000045                ; Setup parameters for call to function memset
   \   000045   78..         MOV     R0,#?V0 + 8
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
    613          	memcpy(payload, "$crsp/", 6);
   \   000050                ; Setup parameters for call to function memcpy
   \   000050   75..06       MOV     ?V0 + 8,#0x6
   \   000053   75..00       MOV     ?V0 + 9,#0x0
   \   000056   78..         MOV     R0,#?V0 + 8
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   7C..         MOV     R4,#`?<Constant "$crsp/">` & 0xff
   \   00005D   7D..         MOV     R5,#(`?<Constant "$crsp/">` >> 8) & 0xff
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
    614          	strncat(payload, cmdid, cmdid_len);
   \   000069                ; Setup parameters for call to function strncat
   \   000069   78..         MOV     R0,#?V0 + 2
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   AC..         MOV     R4,?V0 + 0
   \   000070   AD..         MOV     R5,?V0 + 1
   \   000072   EE           MOV     A,R6
   \   000073   FA           MOV     R2,A
   \   000074   EF           MOV     A,R7
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   ??strncat?relay
   \   000079   7402         MOV     A,#0x2
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
    615          
    616          	if(MQTT_PacketPublish(MQTT_PUBLISH_ID, payload, req, strlen(req), MQTT_QOS_LEVEL0, 0, 1, mqttPacket) == 0)
   \   00007E                ; Setup parameters for call to function MQTT_PacketPublish
   \   00007E   78..         MOV     R0,#?V0 + 4
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   75..01       MOV     ?V0 + 0,#0x1
   \   000086   75..00       MOV     ?V0 + 1,#0x0
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   E4           CLR     A
   \   00008F   F5..         MOV     ?V0 + 0,A
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096                ; Setup parameters for call to function strlen
   \   000096   AA..         MOV     R2,?V0 + 6
   \   000098   AB..         MOV     R3,?V0 + 7
   \   00009A   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   78..         MOV     R0,#?V0 + 6
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   7900         MOV     R1,#0x0
   \   0000A9   EE           MOV     A,R6
   \   0000AA   FC           MOV     R4,A
   \   0000AB   EF           MOV     A,R7
   \   0000AC   FD           MOV     R5,A
   \   0000AD   7A0A         MOV     R2,#0xa
   \   0000AF   7B00         MOV     R3,#0x0
   \   0000B1   12....       LCALL   ??MQTT_PacketPublish?relay
   \   0000B4   740A         MOV     A,#0xa
   \   0000B6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B9   E9           MOV     A,R1
   \   0000BA   7004         JNZ     ??MQTT_PacketCmdResp_2
    617          		status = 0;
   \   0000BC   C2..         CLR     ?VB.0
   \   0000BE   8002         SJMP    ??MQTT_PacketCmdResp_3
    618          	else
    619          		status = 1;
   \                     ??MQTT_PacketCmdResp_2:
   \   0000C0   D2..         SETB    ?VB.0
    620          	
    621          	MQTT_FreeBuffer(payload);
   \                     ??MQTT_PacketCmdResp_3:
   \   0000C2                ; Setup parameters for call to function __xdata_free
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   FB           MOV     R3,A
   \   0000C6   12....       LCALL   ??__xdata_free?relay
    622          	
    623          	return status;
   \   0000C9   A2..         MOV     C,?VB.0
   \                     ??MQTT_PacketCmdResp_1:
   \   0000CB                REQUIRE ?Subroutine5
   \   0000CB                ; // Fall through to label ?Subroutine5
    624          
    625          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    626          
    627          //==========================================================
    628          //	º¯ÊýÃû³Æ£º	MQTT_PacketSubscribe
    629          //
    630          //	º¯Êý¹¦ÄÜ£º	SubscribeÏûÏ¢×é°ü
    631          //
    632          //	Èë¿Ú²ÎÊý£º	pkt_id£ºpkt_id
    633          //				qos£ºÏûÏ¢ÖØ·¢´ÎÊý
    634          //				topics£º¶©ÔÄµÄÏûÏ¢
    635          //				topics_cnt£º¶©ÔÄµÄÏûÏ¢¸öÊý
    636          //				mqttPacket£º°üÖ¸Õë
    637          //
    638          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°Ü
    639          //
    640          //	ËµÃ÷£º		
    641          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    642          uint8 MQTT_PacketSubscribe(uint16 pkt_id, enum MqttQosLevel qos, const int8 *topics[], uint8 topics_cnt, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketSubscribe:
    643          {
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   89..         MOV     ?V0 + 12,R1
   \   00000B   8C..         MOV     ?V0 + 8,R4
   \   00000D   8D..         MOV     ?V0 + 9,R5
   \   00000F   7415         MOV     A,#0x15
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 7,A
   \   000017   7416         MOV     A,#0x16
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine40 & 0xFFFF
    644          	
    645          	uint32 topic_len = 0, remain_len = 0;
    646          	int16 len = 0;
    647          	uint8 i = 0;
   \                     ??CrossCallReturnLabel_58:
   \   00001F   8E..         MOV     ?V0 + 6,R6
    648          	
    649          	if(pkt_id == 0)
   \   000021   EA           MOV     A,R2
   \   000022   45..         ORL     A,?V0 + 3
   \   000024   700A         JNZ     ??MQTT_PacketSubscribe_0
    650          		return 1;
   \   000026   7901         MOV     R1,#0x1
   \   000028   02....       LJMP    ??MQTT_PacketSubscribe_1 & 0xFFFF
    651          	
    652          	//¼ÆËãtopic³¤¶È-------------------------------------------------------------------------
    653          	for(; i < topics_cnt; i++)
    654          	{
    655          		if(topics[i] == NULL)
    656          			return 2;
    657          		
    658          		topic_len += strlen(topics[i]);
   \                     ??MQTT_PacketSubscribe_2:
   \   00002B                ; Setup parameters for call to function strlen
   \   00002B   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00002E   05..         INC     ?V0 + 6
   \                     ??MQTT_PacketSubscribe_0:
   \   000030   E5..         MOV     A,?V0 + 6
   \   000032   C3           CLR     C
   \   000033   95..         SUBB    A,?V0 + 7
   \   000035   500B         JNC     ??MQTT_PacketSubscribe_3
   \   000037   E5..         MOV     A,?V0 + 6
   \   000039   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00003C   70ED         JNZ     ??MQTT_PacketSubscribe_2
   \   00003E   7902         MOV     R1,#0x2
   \   000040   806C         SJMP    ??MQTT_PacketSubscribe_1
    659          	}
    660          	
    661          	//2 bytes packet id + topic filter(2 bytes topic + topic length + 1 byte reserve)------
    662          	remain_len = 2 + 3 * topics_cnt + topic_len;
   \                     ??MQTT_PacketSubscribe_3:
   \   000042   E5..         MOV     A,?V0 + 7
   \   000044   75F003       MOV     B,#0x3
   \   000047   A4           MUL     AB
   \   000048   F8           MOV     R0,A
   \   000049   2402         ADD     A,#0x2
   \   00004B   08           INC     R0
   \   00004C   08           INC     R0
   \   00004D   E5F0         MOV     A,B
   \   00004F   12....       LCALL   ?Subroutine15 & 0xFFFF
    663          	
    664          	//·ÖÅäÄÚ´æ------------------------------------------------------------------------------
    665          	MQTT_NewBuffer(mqttPacket, remain_len + 5);
    666          	if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_20:
   \   000052   7004         JNZ     ??MQTT_PacketSubscribe_4
    667          		return 3;
   \   000054   7903         MOV     R1,#0x3
   \   000056   8056         SJMP    ??MQTT_PacketSubscribe_1
    668          	
    669          /*************************************¹Ì¶¨Í·²¿***********************************************/
    670          	
    671          	//¹Ì¶¨Í·²¿----------------------Í·²¿ÏûÏ¢-------------------------------------------------
    672          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_SUBSCRIBE << 4 | 0x02;
   \                     ??MQTT_PacketSubscribe_4:
   \   000058   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00005B   7482         MOV     A,#-0x7e
   \   00005D   12....       LCALL   ?Subroutine11 & 0xFFFF
    673          	
    674          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶ÈÖµ-----------------------------------------------
    675          	len = MQTT_DumpLength(remain_len, mqttPacket->_data + mqttPacket->_len);
    676          	if(len < 0)
   \                     ??CrossCallReturnLabel_12:
   \   000060   500B         JNC     ??MQTT_PacketSubscribe_5
    677          	{
    678          		MQTT_DeleteBuffer(mqttPacket);
   \   000062                ; Setup parameters for call to function MQTT_DeleteBuffer
   \   000062   AA..         MOV     R2,?V0 + 4
   \   000064   AB..         MOV     R3,?V0 + 5
   \   000066   12....       LCALL   ??MQTT_DeleteBuffer?relay
    679          		return 4;
   \   000069   7904         MOV     R1,#0x4
   \   00006B   8041         SJMP    ??MQTT_PacketSubscribe_1
    680          	}
    681          	else
    682          		mqttPacket->_len += len;
   \                     ??MQTT_PacketSubscribe_5:
   \   00006D   12....       LCALL   ?Subroutine14 & 0xFFFF
    683          	
    684          /*************************************payload***********************************************/
    685          	
    686          	//payload----------------------pkt_id---------------------------------------------------
    687          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(pkt_id);
    688          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(pkt_id);
    689          	
    690          	//payload----------------------topic_name-----------------------------------------------
    691          	for(i = 0; i < topics_cnt; i++)
   \                     ??CrossCallReturnLabel_18:
   \   000070   75..00       MOV     ?V0 + 6,#0x0
   \   000073   8030         SJMP    ??MQTT_PacketSubscribe_6
    692          	{
    693          		topic_len = strlen(topics[i]);
   \                     ??MQTT_PacketSubscribe_7:
   \   000075   E5..         MOV     A,?V0 + 6
   \   000077   12....       LCALL   ?Subroutine13 & 0xFFFF
    694          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(topic_len);
    695          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(topic_len);
    696          		
    697          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, topics[i], topic_len);
   \                     ??CrossCallReturnLabel_16:
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000080   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
    698          		mqttPacket->_len += topic_len;
   \   000086   12....       LCALL   ?Subroutine46 & 0xFFFF
    699          		
    700          		mqttPacket->_data[mqttPacket->_len++] = qos & 0xFF;
   \                     ??CrossCallReturnLabel_178:
   \   000089   85..82       MOV     DPL,?V0 + 0
   \   00008C   85..83       MOV     DPH,?V0 + 1
   \   00008F   12....       LCALL   ?Subroutine39 & 0xFFFF
    701          	}
   \                     ??CrossCallReturnLabel_56:
   \   000092   28           ADD     A,R0
   \   000093   FA           MOV     R2,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   39           ADDC    A,R1
   \   000097   8A82         MOV     DPL,R2
   \   000099   F583         MOV     DPH,A
   \   00009B   E5..         MOV     A,?V0 + 12
   \   00009D   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0000A0   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000A3   05..         INC     ?V0 + 6
   \                     ??MQTT_PacketSubscribe_6:
   \   0000A5   E5..         MOV     A,?V0 + 6
   \   0000A7   C3           CLR     C
   \   0000A8   95..         SUBB    A,?V0 + 7
   \   0000AA   40C9         JC      ??MQTT_PacketSubscribe_7
    702          
    703          	return 0;
   \   0000AC   7900         MOV     R1,#0x0
   \                     ??MQTT_PacketSubscribe_1:
   \   0000AE   7F0D         MOV     R7,#0xd
   \   0000B0   02....       LJMP    ?BANKED_LEAVE_XDATA
    704          
    705          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine95_0
   \   000006                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   EE           MOV     A,R6
   \   000004   25..         ADD     A,?V0 + 0
   \   000006   FE           MOV     R6,A
   \   000007   EF           MOV     A,R7
   \   000008   35..         ADDC    A,?V0 + 1
   \   00000A   FF           MOV     R7,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000009   85..82       MOV     DPL,?V0 + 0
   \   00000C   85..83       MOV     DPH,?V0 + 1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   7E00         MOV     R6,#0x0
   \   000009   7F00         MOV     R7,#0x0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2402         ADD     A,#0x2
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   85..82       MOV     DPL,?V0 + 0
   \   00000F   F583         MOV     DPH,A
   \   000011   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   E8           MOV     A,R0
   \   000004   2E           ADD     A,R6
   \   000005   FE           MOV     R6,A
   \   000006   E9           MOV     A,R1
   \   000007   3F           ADDC    A,R7
   \   000008   FF           MOV     R7,A
   \   000009                ; Setup parameters for call to function MQTT_NewBuffer
   \   000009                ; Setup parameters for call to function MQTT_NewBuffer
   \   000009   EE           MOV     A,R6
   \   00000A   2405         ADD     A,#0x5
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   3400         ADDC    A,#0x0
   \   000010   FD           MOV     R5,A
   \   000011   AA..         MOV     R2,?V0 + 4
   \   000013   AB..         MOV     R3,?V0 + 5
   \   000015   12....       LCALL   ??MQTT_NewBuffer?relay
   \   000018   85..82       MOV     DPL,?V0 + 4
   \   00001B   85..83       MOV     DPH,?V0 + 5
   \   00001E   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000021   49           ORL     A,R1
   \   000022   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000009   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00000C   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00000F   85..82       MOV     DPL,?V0 + 0
   \   000012   85..83       MOV     DPH,?V0 + 1
   \   000015   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000018   E5..         MOV     A,?V0 + 3
   \   00001A   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00001D   F582         MOV     DPL,A
   \   00001F   E9           MOV     A,R1
   \   000020   3B           ADDC    A,R3
   \   000021   F583         MOV     DPH,A
   \   000023   E5..         MOV     A,?V0 + 2
   \   000025   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000028   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 4
   \   000004   85..83       MOV     DPH,?V0 + 5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   E5..         MOV     A,?V0 + 8
   \   000008   28           ADD     A,R0
   \   000009   F5..         MOV     ?V0 + 2,A
   \   00000B   E5..         MOV     A,?V0 + 9
   \   00000D   39           ADDC    A,R1
   \   00000E   F5..         MOV     ?V0 + 3,A
   \   000010                ; Setup parameters for call to function strlen
   \   000010                ; Setup parameters for call to function strlen
   \   000010   85..82       MOV     DPL,?V0 + 2
   \   000013   F583         MOV     DPH,A
   \   000015   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000018   8A..         MOV     ?V0 + 10,R2
   \   00001A   8B..         MOV     ?V0 + 11,R3
   \   00001C   AE..         MOV     R6,?V0 + 10
   \   00001E   AF..         MOV     R7,?V0 + 11
   \   000020   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000023   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000026   EF           MOV     A,R7
   \   000027   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00002A   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00002D   EE           MOV     A,R6
   \   00002E   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000031                ; Setup parameters for call to function strncat
   \   000031                ; Setup parameters for call to function strncat
   \   000031   78..         MOV     R0,#?V0 + 10
   \   000033   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   FC           MOV     R4,A
   \   000004   E9           MOV     A,R1
   \   000005   3B           ADDC    A,R3
   \   000006   FD           MOV     R5,A
   \   000007   EE           MOV     A,R6
   \   000008   FA           MOV     R2,A
   \   000009   EF           MOV     A,R7
   \   00000A   FB           MOV     R3,A
   \   00000B   12....       LCALL   ??MQTT_DumpLength?relay
   \   00000E   8A..         MOV     ?V0 + 10,R2
   \   000010   8B..         MOV     ?V0 + 11,R3
   \   000012   A8..         MOV     R0,?V0 + 10
   \   000014   A9..         MOV     R1,?V0 + 11
   \   000016   C3           CLR     C
   \   000017   E9           MOV     A,R1
   \   000018   9400         SUBB    A,#0x0
   \   00001A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00001C   65D0         XRL     A,PSW
   \   00001E   33           RLC     A
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003                ; Setup parameters for call to function MQTT_DumpLength
   \   000003                ; Setup parameters for call to function MQTT_DumpLength
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   00000C   E8           MOV     A,R0
   \   00000D   2A           ADD     A,R2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine99_0
   \   000006                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   E5..         MOV     A,?V0 + 8
   \   000008   28           ADD     A,R0
   \   000009   F8           MOV     R0,A
   \   00000A   E5..         MOV     A,?V0 + 9
   \   00000C   39           ADDC    A,R1
   \   00000D   F9           MOV     R1,A
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012                REQUIRE ??Subroutine100_0
   \   000012                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   85..82       MOV     DPL,?V0 + 4
   \   000006   85..83       MOV     DPH,?V0 + 5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   E8           MOV     A,R0
   \   000004   2A           ADD     A,R2
   \   000005   F582         MOV     DPL,A
   \   000007   E9           MOV     A,R1
   \   000008   3B           ADDC    A,R3
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine106_0
   \   000006                ; // Fall through to label ??Subroutine106_0
    706          
    707          //==========================================================
    708          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketSubscrebe
    709          //
    710          //	º¯Êý¹¦ÄÜ£º	SubscribeµÄ»Ø¸´ÏûÏ¢½â°ü
    711          //
    712          //	Èë¿Ú²ÎÊý£º	rev_data£º½ÓÊÕµ½µÄÐÅÏ¢
    713          //
    714          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°Ü
    715          //
    716          //	ËµÃ÷£º		
    717          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    718          uint8 MQTT_UnPacketSubscribe(uint8 *rev_data)
   \                     MQTT_UnPacketSubscribe:
    719          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    720          	
    721          	uint8 result = 255;
   \   000004   79FF         MOV     R1,#-0x1
    722          
    723          	if(rev_data[2] == MOSQ_MSB(MQTT_SUBSCRIBE_ID) && rev_data[3] == MOSQ_LSB(MQTT_SUBSCRIBE_ID))
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7024         JNZ     ??MQTT_UnPacketSubscribe_0
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6414         XRL     A,#0x14
   \   000019   7018         JNZ     ??MQTT_UnPacketSubscribe_0
    724          	{
    725          		switch(rev_data[4])
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   600C         JZ      ??MQTT_UnPacketSubscribe_1
   \   000026   14           DEC     A
   \   000027   6009         JZ      ??MQTT_UnPacketSubscribe_1
   \   000029   14           DEC     A
   \   00002A   6006         JZ      ??MQTT_UnPacketSubscribe_1
   \   00002C   2482         ADD     A,#-0x7e
   \   00002E   6001         JZ      ??MQTT_UnPacketSubscribe_2
    726          		{
    727          			case 0x00:
    728          			case 0x01:
    729          			case 0x02:
    730          				//MQTT Subscribe OK
    731          				result = 0;
    732          			break;
    733          			
    734          			case 0x80:
    735          				//MQTT Subscribe Failed
    736          				result = 1;
    737          			break;
    738          			
    739          			default:
    740          				//MQTT Subscribe UnKnown Err
    741          				result = 2;
   \   000030   09           INC     R1
   \                     ??MQTT_UnPacketSubscribe_2:
   \   000031   09           INC     R1
   \                     ??MQTT_UnPacketSubscribe_1:
   \   000032   09           INC     R1
    742          			break;
    743          		}
    744          	}
    745          	
    746          	return result;
   \                     ??MQTT_UnPacketSubscribe_0:
   \   000033   02....       LJMP    ?Subroutine4 & 0xFFFF
    747          
    748          }
    749          
    750          //==========================================================
    751          //	º¯ÊýÃû³Æ£º	MQTT_PacketUnSubscribe
    752          //
    753          //	º¯Êý¹¦ÄÜ£º	UnSubscribeÏûÏ¢×é°ü
    754          //
    755          //	Èë¿Ú²ÎÊý£º	pkt_id£ºpkt_id
    756          //				qos£ºÏûÏ¢ÖØ·¢´ÎÊý
    757          //				topics£º¶©ÔÄµÄÏûÏ¢
    758          //				topics_cnt£º¶©ÔÄµÄÏûÏ¢¸öÊý
    759          //				mqttPacket£º°üÖ¸Õë
    760          //
    761          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°Ü
    762          //
    763          //	ËµÃ÷£º		
    764          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    765          uint8 MQTT_PacketUnSubscribe(uint16 pkt_id, const int8 *topics[], uint8 topics_cnt, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketUnSubscribe:
    766          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   8C..         MOV     ?V0 + 8,R4
   \   00000B   8D..         MOV     ?V0 + 9,R5
   \   00000D   89..         MOV     ?V0 + 6,R1
   \   00000F   7414         MOV     A,#0x14
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine40 & 0xFFFF
    767          	
    768          	uint32 topic_len = 0, remain_len = 0;
    769          	int16 len = 0;
    770          	uint8 i = 0;
   \                     ??CrossCallReturnLabel_59:
   \   000017   8E..         MOV     ?V0 + 7,R6
    771          	
    772          	if(pkt_id == 0)
   \   000019   EA           MOV     A,R2
   \   00001A   45..         ORL     A,?V0 + 3
   \   00001C   7009         JNZ     ??MQTT_PacketUnSubscribe_0
    773          		return 1;
   \   00001E   7901         MOV     R1,#0x1
   \   000020   806A         SJMP    ??MQTT_PacketUnSubscribe_1
    774          	
    775          	//¼ÆËãtopic³¤¶È-------------------------------------------------------------------------
    776          	for(; i < topics_cnt; i++)
    777          	{
    778          		if(topics[i] == NULL)
    779          			return 2;
    780          		
    781          		topic_len += strlen(topics[i]);
   \                     ??MQTT_PacketUnSubscribe_2:
   \   000022                ; Setup parameters for call to function strlen
   \   000022   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000025   05..         INC     ?V0 + 7
   \                     ??MQTT_PacketUnSubscribe_0:
   \   000027   E5..         MOV     A,?V0 + 7
   \   000029   C3           CLR     C
   \   00002A   95..         SUBB    A,?V0 + 6
   \   00002C   500B         JNC     ??MQTT_PacketUnSubscribe_3
   \   00002E   E5..         MOV     A,?V0 + 7
   \   000030   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000033   70ED         JNZ     ??MQTT_PacketUnSubscribe_2
   \   000035   7902         MOV     R1,#0x2
   \   000037   8053         SJMP    ??MQTT_PacketUnSubscribe_1
    782          	}
    783          	
    784          	//2 bytes packet id, 2 bytes topic length + topic + 1 byte reserve---------------------
    785          	remain_len = 2 + (topics_cnt << 1) + topic_len;
   \                     ??MQTT_PacketUnSubscribe_3:
   \   000039   E5..         MOV     A,?V0 + 6
   \   00003B   C3           CLR     C
   \   00003C   33           RLC     A
   \   00003D   F8           MOV     R0,A
   \   00003E   E4           CLR     A
   \   00003F   33           RLC     A
   \   000040   F9           MOV     R1,A
   \   000041   E8           MOV     A,R0
   \   000042   2402         ADD     A,#0x2
   \   000044   08           INC     R0
   \   000045   08           INC     R0
   \   000046   E9           MOV     A,R1
   \   000047   12....       LCALL   ?Subroutine15 & 0xFFFF
    786          	
    787          	//·ÖÅäÄÚ´æ------------------------------------------------------------------------------
    788          	MQTT_NewBuffer(mqttPacket, remain_len + 5);
    789          	if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_21:
   \   00004A   7004         JNZ     ??MQTT_PacketUnSubscribe_4
    790          		return 3;
   \   00004C   7903         MOV     R1,#0x3
   \   00004E   803C         SJMP    ??MQTT_PacketUnSubscribe_1
    791          	
    792          /*************************************¹Ì¶¨Í·²¿***********************************************/
    793          	
    794          	//¹Ì¶¨Í·²¿----------------------Í·²¿ÏûÏ¢-------------------------------------------------
    795          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_UNSUBSCRIBE << 4 | 0x02;
   \                     ??MQTT_PacketUnSubscribe_4:
   \   000050   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000053   74A2         MOV     A,#-0x5e
   \   000055   12....       LCALL   ?Subroutine11 & 0xFFFF
    796          	
    797          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶ÈÖµ-----------------------------------------------
    798          	len = MQTT_DumpLength(remain_len, mqttPacket->_data + mqttPacket->_len);
    799          	if(len < 0)
   \                     ??CrossCallReturnLabel_13:
   \   000058   500B         JNC     ??MQTT_PacketUnSubscribe_5
    800          	{
    801          		MQTT_DeleteBuffer(mqttPacket);
   \   00005A                ; Setup parameters for call to function MQTT_DeleteBuffer
   \   00005A   AA..         MOV     R2,?V0 + 4
   \   00005C   AB..         MOV     R3,?V0 + 5
   \   00005E   12....       LCALL   ??MQTT_DeleteBuffer?relay
    802          		return 4;
   \   000061   7904         MOV     R1,#0x4
   \   000063   8027         SJMP    ??MQTT_PacketUnSubscribe_1
    803          	}
    804          	else
    805          		mqttPacket->_len += len;
   \                     ??MQTT_PacketUnSubscribe_5:
   \   000065   12....       LCALL   ?Subroutine14 & 0xFFFF
    806          	
    807          /*************************************payload***********************************************/
    808          	
    809          	//payload----------------------pkt_id---------------------------------------------------
    810          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(pkt_id);
    811          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(pkt_id);
    812          	
    813          	//payload----------------------topic_name-----------------------------------------------
    814          	for(i = 0; i < topics_cnt; i++)
   \                     ??CrossCallReturnLabel_19:
   \   000068   75..00       MOV     ?V0 + 7,#0x0
   \   00006B   8016         SJMP    ??MQTT_PacketUnSubscribe_6
    815          	{
    816          		topic_len = strlen(topics[i]);
   \                     ??MQTT_PacketUnSubscribe_7:
   \   00006D   E5..         MOV     A,?V0 + 7
   \   00006F   12....       LCALL   ?Subroutine13 & 0xFFFF
    817          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(topic_len);
    818          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(topic_len);
    819          		
    820          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, topics[i], topic_len);
   \                     ??CrossCallReturnLabel_17:
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000078   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
    821          		mqttPacket->_len += topic_len;
   \   00007E   12....       LCALL   ?Subroutine46 & 0xFFFF
    822          	}
   \                     ??CrossCallReturnLabel_179:
   \   000081   05..         INC     ?V0 + 7
   \                     ??MQTT_PacketUnSubscribe_6:
   \   000083   E5..         MOV     A,?V0 + 7
   \   000085   C3           CLR     C
   \   000086   95..         SUBB    A,?V0 + 6
   \   000088   40E3         JC      ??MQTT_PacketUnSubscribe_7
    823          
    824          	return 0;
   \   00008A   7900         MOV     R1,#0x0
   \                     ??MQTT_PacketUnSubscribe_1:
   \   00008C   02....       LJMP    ?Subroutine5 & 0xFFFF
    825          
    826          }
    827          
    828          //==========================================================
    829          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketUnSubscribe
    830          //
    831          //	º¯Êý¹¦ÄÜ£º	UnSubscribeµÄ»Ø¸´ÏûÏ¢½â°ü
    832          //
    833          //	Èë¿Ú²ÎÊý£º	rev_data£º½ÓÊÕµ½µÄÐÅÏ¢
    834          //
    835          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°Ü
    836          //
    837          //	ËµÃ÷£º		
    838          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    839          uint1 MQTT_UnPacketUnSubscribe(uint8 *rev_data)
   \                     MQTT_UnPacketUnSubscribe:
    840          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    841          	
    842          	uint1 result = 1;
   \   000004   D2F0         SETB    B.0
    843          
    844          	if(rev_data[2] == MOSQ_MSB(MQTT_UNSUBSCRIBE_ID) && rev_data[3] == MOSQ_LSB(MQTT_UNSUBSCRIBE_ID))
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   700E         JNZ     ??MQTT_UnPacketUnSubscribe_0
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   641E         XRL     A,#0x1e
   \   000019   7002         JNZ     ??MQTT_UnPacketUnSubscribe_0
    845          	{
    846          		result = 0;
   \   00001B   C2F0         CLR     B.0
    847          	}
    848          	
    849          	return result;
   \                     ??MQTT_UnPacketUnSubscribe_0:
   \   00001D   A2F0         MOV     C,B.0
   \   00001F   02....       LJMP    ?Subroutine4 & 0xFFFF
    850          
    851          }
    852          
    853          //==========================================================
    854          //	º¯ÊýÃû³Æ£º	MQTT_PacketPublish
    855          //
    856          //	º¯Êý¹¦ÄÜ£º	PulishÏûÏ¢×é°ü
    857          //
    858          //	Èë¿Ú²ÎÊý£º	pkt_id£ºpkt_id
    859          //				topic£º·¢²¼µÄtopic
    860          //				payload£ºÏûÏ¢Ìå
    861          //				payload_len£ºÏûÏ¢Ìå³¤¶È
    862          //				qos£ºÖØ·¢´ÎÊý
    863          //				retain£ºÀëÏßÏûÏ¢ÍÆËÍ
    864          //				own£º
    865          //				mqttPacket£º°üÖ¸Õë
    866          //
    867          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°Ü
    868          //
    869          //	ËµÃ÷£º		
    870          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   AC..         MOV     R4,?V0 + 14
   \   000002   AD..         MOV     R5,?V0 + 15
   \   000004                REQUIRE ??Subroutine94_0
   \   000004                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003                REQUIRE ??Subroutine96_0
   \   000003                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    871          uint8 MQTT_PacketPublish(uint16 pkt_id, const int8 *topic,
   \                     MQTT_PacketPublish:
    872          						const int8 *payload, uint32 payload_len,
    873          						enum MqttQosLevel qos, int32 retain, int32 own,
    874          						MQTT_PACKET_STRUCTURE *mqttPacket)
    875          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8A..         MOV     ?V0 + 8,R2
   \   000017   8B..         MOV     ?V0 + 9,R3
   \   000019   89..         MOV     ?V0 + 13,R1
   \   00001B   741A         MOV     A,#0x1a
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000023   741C         MOV     A,#0x1c
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000031   7422         MOV     A,#0x22
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ?Subroutine43 & 0xFFFF
    876          
    877          	uint32 total_len = 0, topic_len = 0;
    878          	uint32 data_len = 0;
   \                     ??CrossCallReturnLabel_68:
   \   000039   7E00         MOV     R6,#0x0
   \   00003B   7F00         MOV     R7,#0x0
    879          	int32 len = 0;
    880          	uint8 flags = 0;
    881          	
    882          	//pkt_id¼ì²é----------------------------------------------------------------------------
    883          	if(pkt_id == 0)
   \   00003D   E5..         MOV     A,?V0 + 8
   \   00003F   45..         ORL     A,?V0 + 9
   \   000041   7005         JNZ     ??MQTT_PacketPublish_0
    884          		return 1;
   \   000043   7901         MOV     R1,#0x1
   \   000045   02....       LJMP    ??MQTT_PacketPublish_1 & 0xFFFF
    885          	
    886          	//$dpÎªÏµÍ³ÉÏ´«Êý¾ÝµãµÄÖ¸Áî--------------------------------------------------------------
    887          	for(topic_len = 0; topic[topic_len] != '\0'; ++topic_len)
   \                     ??MQTT_PacketPublish_0:
   \   000048   8E..         MOV     ?V0 + 2,R6
   \   00004A   8E..         MOV     ?V0 + 3,R6
   \   00004C   800C         SJMP    ??MQTT_PacketPublish_2
   \                     ??MQTT_PacketPublish_3:
   \   00004E   E5..         MOV     A,?V0 + 2
   \   000050   2401         ADD     A,#0x1
   \   000052   F5..         MOV     ?V0 + 2,A
   \   000054   E5..         MOV     A,?V0 + 3
   \   000056   3400         ADDC    A,#0x0
   \   000058   F5..         MOV     ?V0 + 3,A
   \                     ??MQTT_PacketPublish_2:
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   25..         ADD     A,?V0 + 2
   \   000063   F8           MOV     R0,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   35..         ADDC    A,?V0 + 3
   \   000068   F9           MOV     R1,A
   \   000069   8882         MOV     DPL,R0
   \   00006B   8983         MOV     DPH,R1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   600E         JZ      ??MQTT_PacketPublish_4
    888          	{
    889          		if((topic[topic_len] == '#') || (topic[topic_len] == '+'))
   \   000070   6423         XRL     A,#0x23
   \   000072   6005         JZ      ??MQTT_PacketPublish_5
   \   000074   E0           MOVX    A,@DPTR
   \   000075   642B         XRL     A,#0x2b
   \   000077   70D5         JNZ     ??MQTT_PacketPublish_3
    890          			return 2;
   \                     ??MQTT_PacketPublish_5:
   \   000079   7902         MOV     R1,#0x2
   \   00007B   02....       LJMP    ??MQTT_PacketPublish_1 & 0xFFFF
    891          	}
    892          	
    893          	//PublishÏûÏ¢---------------------------------------------------------------------------
    894          	flags |= MQTT_PKT_PUBLISH << 4;
   \                     ??MQTT_PacketPublish_4:
   \   00007E   75..30       MOV     ?V0 + 12,#0x30
    895          	
    896          	//retain±êÖ¾----------------------------------------------------------------------------
    897          	if(retain)
   \   000081   EA           MOV     A,R2
   \   000082   4B           ORL     A,R3
   \   000083   6003         JZ      ??MQTT_PacketPublish_6
    898          		flags |= 0x01;
   \   000085   75..31       MOV     ?V0 + 12,#0x31
    899          	
    900          	//×Ü³¤¶È--------------------------------------------------------------------------------
    901          	total_len = topic_len + payload_len + 2;
   \                     ??MQTT_PacketPublish_6:
   \   000088   E5..         MOV     A,?V0 + 2
   \   00008A   25..         ADD     A,?V0 + 6
   \   00008C   F8           MOV     R0,A
   \   00008D   E5..         MOV     A,?V0 + 3
   \   00008F   35..         ADDC    A,?V0 + 7
   \   000091   F9           MOV     R1,A
   \   000092   E8           MOV     A,R0
   \   000093   2402         ADD     A,#0x2
   \   000095   F5..         MOV     ?V0 + 0,A
   \   000097   E9           MOV     A,R1
   \   000098   3400         ADDC    A,#0x0
   \   00009A   F5..         MOV     ?V0 + 1,A
    902          	
    903          	//qos¼¶±ð--Ö÷ÒªÓÃÓÚPUBLISH£¨·¢²¼Ì¬£©ÏûÏ¢µÄ£¬±£Ö¤ÏûÏ¢´«µÝµÄ´ÎÊý-----------------------------
    904          	switch(qos)
   \   00009C   E5..         MOV     A,?V0 + 13
   \   00009E   601A         JZ      ??MQTT_PacketPublish_7
   \   0000A0   14           DEC     A
   \   0000A1   6005         JZ      ??MQTT_PacketPublish_8
   \   0000A3   14           DEC     A
   \   0000A4   6073         JZ      ??MQTT_PacketPublish_9
   \   0000A6   8077         SJMP    ??MQTT_PacketPublish_10
    905          	{
    906          		case MQTT_QOS_LEVEL0:
    907          			flags |= MQTT_CONNECT_WILL_QOS0;	//×î¶àÒ»´Î
    908          		break;
    909          		
    910          		case MQTT_QOS_LEVEL1:
    911          			flags |= 0x02;						//×îÉÙÒ»´Î
   \                     ??MQTT_PacketPublish_8:
   \   0000A8   E5..         MOV     A,?V0 + 12
   \   0000AA   D2E1         SETB    0xE0 /* A   */.1
   \                     ??MQTT_PacketPublish_11:
   \   0000AC   F5..         MOV     ?V0 + 12,A
    912          			total_len += 2;
   \   0000AE   E5..         MOV     A,?V0 + 0
   \   0000B0   2402         ADD     A,#0x2
   \   0000B2   F5..         MOV     ?V0 + 0,A
   \   0000B4   E5..         MOV     A,?V0 + 1
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   F5..         MOV     ?V0 + 1,A
    913          		break;
    914          		
    915          		case MQTT_QOS_LEVEL2:
    916          			flags |= 0x04;						//Ö»ÓÐÒ»´Î
    917          			total_len += 2;
    918          		break;
    919          		
    920          		default:
    921          		return 3;
    922          	}
    923          	
    924          	//·ÖÅäÄÚ´æ------------------------------------------------------------------------------
    925          	if(payload != NULL)
   \                     ??MQTT_PacketPublish_7:
   \   0000BA   E5..         MOV     A,?V0 + 14
   \   0000BC   45..         ORL     A,?V0 + 15
   \   0000BE   6064         JZ      ??MQTT_PacketPublish_12
    926          	{
    927          		if(payload[0] == 2)
   \   0000C0   85..82       MOV     DPL,?V0 + 14
   \   0000C3   85..83       MOV     DPH,?V0 + 15
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   6402         XRL     A,#0x2
   \   0000C9   7059         JNZ     ??MQTT_PacketPublish_12
    928          		{
    929          			uint32 data_len_t = 0;
   \   0000CB   7800         MOV     R0,#0x0
   \   0000CD   7900         MOV     R1,#0x0
    930          			
    931          			while(payload[data_len_t++] != '}');
   \                     ??MQTT_PacketPublish_13:
   \   0000CF   E8           MOV     A,R0
   \   0000D0   FA           MOV     R2,A
   \   0000D1   E9           MOV     A,R1
   \   0000D2   FB           MOV     R3,A
   \   0000D3   EA           MOV     A,R2
   \   0000D4   2401         ADD     A,#0x1
   \   0000D6   08           INC     R0
   \   0000D7   EB           MOV     A,R3
   \   0000D8   3400         ADDC    A,#0x0
   \   0000DA   F9           MOV     R1,A
   \   0000DB   E5..         MOV     A,?V0 + 14
   \   0000DD   2A           ADD     A,R2
   \   0000DE   F582         MOV     DPL,A
   \   0000E0   E5..         MOV     A,?V0 + 15
   \   0000E2   3B           ADDC    A,R3
   \   0000E3   F583         MOV     DPH,A
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   647D         XRL     A,#0x7d
   \   0000E8   70E5         JNZ     ??MQTT_PacketPublish_13
    932          			data_len_t -= 3;
    933          			data_len = data_len_t + 7;
   \   0000EA   E8           MOV     A,R0
   \   0000EB   2404         ADD     A,#0x4
   \   0000ED   FE           MOV     R6,A
   \   0000EE   E9           MOV     A,R1
   \   0000EF   3400         ADDC    A,#0x0
   \   0000F1   FF           MOV     R7,A
    934          			data_len_t = payload_len - data_len;
   \   0000F2   E5..         MOV     A,?V0 + 6
   \   0000F4   C3           CLR     C
   \   0000F5   9E           SUBB    A,R6
   \   0000F6   F8           MOV     R0,A
   \   0000F7   E5..         MOV     A,?V0 + 7
   \   0000F9   9F           SUBB    A,R7
   \   0000FA   F9           MOV     R1,A
    935          			
    936          			MQTT_NewBuffer(mqttPacket, total_len + 3 - data_len_t);
   \   0000FB   E5..         MOV     A,?V0 + 0
   \   0000FD   2403         ADD     A,#0x3
   \   0000FF   FA           MOV     R2,A
   \   000100   E5..         MOV     A,?V0 + 1
   \   000102   3400         ADDC    A,#0x0
   \   000104   FB           MOV     R3,A
   \   000105   EA           MOV     A,R2
   \   000106   C3           CLR     C
   \   000107   98           SUBB    A,R0
   \   000108   F5..         MOV     ?V0 + 4,A
   \   00010A   EB           MOV     A,R3
   \   00010B   99           SUBB    A,R1
   \   00010C   12....       LCALL   ?Subroutine58 & 0xFFFF
    937          			
    938          			if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_99:
   \   00010F   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000112   7022         JNZ     ??MQTT_PacketPublish_14
    939          				return 4;
   \                     ??MQTT_PacketPublish_15:
   \   000114   7904         MOV     R1,#0x4
   \   000116   02....       LJMP    ??MQTT_PacketPublish_1 & 0xFFFF
    940          			
    941          			memset(mqttPacket->_data, 0, total_len + 3 - data_len_t);
    942          		}
   \                     ??MQTT_PacketPublish_9:
   \   000119   E5..         MOV     A,?V0 + 12
   \   00011B   D2E2         SETB    0xE0 /* A   */.2
   \   00011D   808D         SJMP    ??MQTT_PacketPublish_11
   \                     ??MQTT_PacketPublish_10:
   \   00011F   7903         MOV     R1,#0x3
   \   000121   02....       LJMP    ??MQTT_PacketPublish_1 & 0xFFFF
    943          		else
    944          		{
    945          			MQTT_NewBuffer(mqttPacket, total_len + 5);
   \                     ??MQTT_PacketPublish_12:
   \   000124   E5..         MOV     A,?V0 + 0
   \   000126   2405         ADD     A,#0x5
   \   000128   F5..         MOV     ?V0 + 4,A
   \   00012A   E5..         MOV     A,?V0 + 1
   \   00012C   3400         ADDC    A,#0x0
   \   00012E   12....       LCALL   ?Subroutine58 & 0xFFFF
    946          			
    947          			if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_100:
   \   000131   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000134   60DE         JZ      ??MQTT_PacketPublish_15
    948          				return 4;
    949          			
    950          			memset(mqttPacket->_data, 0, total_len + 5);
   \   000136                ; Setup parameters for call to function memset
   \                     ??MQTT_PacketPublish_14:
   \   000136   78..         MOV     R0,#?V0 + 4
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
    951          		}
    952          	}
   \   00013B   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
    953          	else
    954          	{
    955          		MQTT_NewBuffer(mqttPacket, total_len + 5);
    956          		
    957          		if(mqttPacket->_data == NULL)
    958          			return 4;
    959          		
    960          		memset(mqttPacket->_data, 0, total_len + 5);
    961          	}
    962          	
    963          /*************************************¹Ì¶¨Í·²¿***********************************************/
    964          	
    965          	//¹Ì¶¨Í·²¿----------------------Í·²¿ÏûÏ¢-------------------------------------------------
    966          	mqttPacket->_data[mqttPacket->_len++] = flags;
   \   000141   E5..         MOV     A,?V0 + 10
   \   000143   2402         ADD     A,#0x2
   \   000145   F5..         MOV     ?V0 + 4,A
   \   000147   E5..         MOV     A,?V0 + 11
   \   000149   3400         ADDC    A,#0x0
   \   00014B   F5..         MOV     ?V0 + 5,A
   \   00014D   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000150   E5..         MOV     A,?V0 + 12
   \   000152   12....       LCALL   ?Subroutine22 & 0xFFFF
    967          	
    968          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶ÈÖµ-----------------------------------------------
    969          	len = MQTT_DumpLength(total_len, mqttPacket->_data + mqttPacket->_len);
   \                     ??CrossCallReturnLabel_37:
   \   000155   FC           MOV     R4,A
   \   000156   E9           MOV     A,R1
   \   000157   3B           ADDC    A,R3
   \   000158   FD           MOV     R5,A
   \   000159   AA..         MOV     R2,?V0 + 0
   \   00015B   AB..         MOV     R3,?V0 + 1
   \   00015D   12....       LCALL   ?Subroutine54 & 0xFFFF
    970          	if(len < 0)
   \                     ??CrossCallReturnLabel_146:
   \   000160   500C         JNC     ??MQTT_PacketPublish_16
    971          	{
    972          		MQTT_DeleteBuffer(mqttPacket);
   \   000162                ; Setup parameters for call to function MQTT_DeleteBuffer
   \   000162   AA..         MOV     R2,?V0 + 10
   \   000164   AB..         MOV     R3,?V0 + 11
   \   000166   12....       LCALL   ??MQTT_DeleteBuffer?relay
    973          		return 5;
   \   000169   7905         MOV     R1,#0x5
   \   00016B   02....       LJMP    ??MQTT_PacketPublish_1 & 0xFFFF
    974          	}
    975          	else
    976          		mqttPacket->_len += len;
   \                     ??MQTT_PacketPublish_16:
   \   00016E   85..82       MOV     DPL,?V0 + 4
   \   000171   85..83       MOV     DPH,?V0 + 5
   \   000174   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000177   F0           MOVX    @DPTR,A
    977          	
    978          /*************************************¿É±äÍ·²¿***********************************************/
    979          	
    980          	//¿É±äÍ·²¿----------------------Ð´Èëtopic³¤¶È¡¢topic-------------------------------------
    981          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(topic_len);
   \   000178   85..82       MOV     DPL,?V0 + 10
   \   00017B   85..83       MOV     DPH,?V0 + 11
   \   00017E   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000181   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000184   E5..         MOV     A,?V0 + 3
   \   000186   12....       LCALL   ?Subroutine26 & 0xFFFF
    982          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(topic_len);
   \                     ??CrossCallReturnLabel_184:
   \   000189   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00018C   E5..         MOV     A,?V0 + 2
   \   00018E   12....       LCALL   ?Subroutine26 & 0xFFFF
    983          	
    984          	strncat((int8 *)mqttPacket->_data + mqttPacket->_len, topic, topic_len);
   \                     ??CrossCallReturnLabel_185:
   \   000191                ; Setup parameters for call to function strncat
   \   000191   78..         MOV     R0,#?V0 + 2
   \   000193   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000196   7402         MOV     A,#0x2
   \   000198   12....       LCALL   ?XSTACK_DISP0_8
   \   00019B   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00019E   85..82       MOV     DPL,?V0 + 4
   \   0001A1   85..83       MOV     DPH,?V0 + 5
   \   0001A4   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0001A7   12....       LCALL   ?DEALLOC_XSTACK8
    985          	mqttPacket->_len += topic_len;
   \   0001AA   85..82       MOV     DPL,?V0 + 4
   \   0001AD   85..83       MOV     DPH,?V0 + 5
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   25..         ADD     A,?V0 + 2
   \   0001B3   F0           MOVX    @DPTR,A
   \   0001B4   A3           INC     DPTR
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   35..         ADDC    A,?V0 + 3
   \   0001B8   F0           MOVX    @DPTR,A
    986          	if(qos != MQTT_QOS_LEVEL0)
   \   0001B9   E5..         MOV     A,?V0 + 13
   \   0001BB   6013         JZ      ??CrossCallReturnLabel_186
    987          	{
    988          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(pkt_id);
   \   0001BD   12....       LCALL   ?Subroutine29 & 0xFFFF
    989          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(pkt_id);
    990          	}
   \                     ??CrossCallReturnLabel_44:
   \   0001C0   E5..         MOV     A,?V0 + 9
   \   0001C2   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0001C5   F582         MOV     DPL,A
   \   0001C7   E9           MOV     A,R1
   \   0001C8   3B           ADDC    A,R3
   \   0001C9   F583         MOV     DPH,A
   \   0001CB   E5..         MOV     A,?V0 + 8
   \   0001CD   12....       LCALL   ?Subroutine26 & 0xFFFF
    991          	
    992          	//¿É±äÍ·²¿----------------------Ð´Èëpayload----------------------------------------------
    993          	if(payload != NULL)
   \                     ??CrossCallReturnLabel_186:
   \   0001D0   E5..         MOV     A,?V0 + 14
   \   0001D2   45..         ORL     A,?V0 + 15
   \   0001D4   6055         JZ      ??MQTT_PacketPublish_17
   \   0001D6   85..82       MOV     DPL,?V0 + 10
   \   0001D9   85..83       MOV     DPH,?V0 + 11
   \   0001DC   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0001DF   FA           MOV     R2,A
   \   0001E0   A3           INC     DPTR
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   FB           MOV     R3,A
   \   0001E3   E8           MOV     A,R0
   \   0001E4   2A           ADD     A,R2
   \   0001E5   FA           MOV     R2,A
   \   0001E6   E9           MOV     A,R1
   \   0001E7   3B           ADDC    A,R3
   \   0001E8   FB           MOV     R3,A
   \   0001E9   85..82       MOV     DPL,?V0 + 14
   \   0001EC   85..83       MOV     DPH,?V0 + 15
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   6402         XRL     A,#0x2
   \   0001F2   701D         JNZ     ??MQTT_PacketPublish_18
    994          	{
    995          		if(payload[0] == 2)
    996          		{
    997          			memcpy((int8 *)mqttPacket->_data + mqttPacket->_len, payload, data_len);
   \   0001F4                ; Setup parameters for call to function memcpy
   \   0001F4   8E..         MOV     ?V0 + 0,R6
   \   0001F6   8F..         MOV     ?V0 + 1,R7
   \   0001F8   78..         MOV     R0,#?V0 + 0
   \   0001FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FD   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000200   12....       LCALL   ?DEALLOC_XSTACK8
    998          			mqttPacket->_len += data_len;
   \   000203   85..82       MOV     DPL,?V0 + 4
   \   000206   85..83       MOV     DPH,?V0 + 5
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   2E           ADD     A,R6
   \   00020B   F0           MOVX    @DPTR,A
   \   00020C   A3           INC     DPTR
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   3F           ADDC    A,R7
   \   00020F   8019         SJMP    ??MQTT_PacketPublish_19
    999          		}
   1000          		else
   1001          		{
   1002          			memcpy((int8 *)mqttPacket->_data + mqttPacket->_len, payload, payload_len);
   \                     ??MQTT_PacketPublish_18:
   \   000211                ; Setup parameters for call to function memcpy
   \   000211   78..         MOV     R0,#?V0 + 6
   \   000213   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000216   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000219   12....       LCALL   ?DEALLOC_XSTACK8
   1003          			mqttPacket->_len += payload_len;
   \   00021C   85..82       MOV     DPL,?V0 + 4
   \   00021F   85..83       MOV     DPH,?V0 + 5
   \   000222   E0           MOVX    A,@DPTR
   \   000223   25..         ADD     A,?V0 + 6
   \   000225   F0           MOVX    @DPTR,A
   \   000226   A3           INC     DPTR
   \   000227   E0           MOVX    A,@DPTR
   \   000228   35..         ADDC    A,?V0 + 7
   \                     ??MQTT_PacketPublish_19:
   \   00022A   F0           MOVX    @DPTR,A
   1004          		}
   1005          	}
   1006          	
   1007          	return 0;
   \                     ??MQTT_PacketPublish_17:
   \   00022B   7900         MOV     R1,#0x0
   \                     ??MQTT_PacketPublish_1:
   \   00022D                REQUIRE ?Subroutine2
   \   00022D                ; // Fall through to label ?Subroutine2
   1008          
   1009          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine97_0
   \   000002                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F5..         MOV     ?V0 + 5,A
   \   000002                ; Setup parameters for call to function MQTT_NewBuffer
   \   000002                ; Setup parameters for call to function MQTT_NewBuffer
   \   000002   AC..         MOV     R4,?V0 + 4
   \   000004   FD           MOV     R5,A
   \   000005   AA..         MOV     R2,?V0 + 10
   \   000007   AB..         MOV     R3,?V0 + 11
   \   000009   12....       LCALL   ??MQTT_NewBuffer?relay
   \   00000C   85..82       MOV     DPL,?V0 + 10
   \   00000F   85..83       MOV     DPH,?V0 + 11
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine98_0
   \   000006                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV     DPL,?V0 + 10
   \   000003   85..83       MOV     DPH,?V0 + 11
   \   000006   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000009   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000006                ; Setup parameters for call to function MQTT_DumpLength
   \   000006   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000009   E8           MOV     A,R0
   \   00000A   2A           ADD     A,R2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 7,A
   \   000007   741E         MOV     A,#0x1e
   \   000009   22           RET
   1010          
   1011          //==========================================================
   1012          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketPublish
   1013          //
   1014          //	º¯Êý¹¦ÄÜ£º	PublishÏûÏ¢½â°ü
   1015          //
   1016          //	Èë¿Ú²ÎÊý£º	flags£ºMQTTÏà¹Ø±êÖ¾ÐÅÏ¢
   1017          //				pkt£ºÖ¸Ïò¿É±äÍ·²¿
   1018          //				size£º¹Ì¶¨Í·²¿ÖÐµÄÊ£Óà³¤¶ÈÐÅÏ¢
   1019          //
   1020          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°ÜÔ­Òò
   1021          //
   1022          //	ËµÃ÷£º		
   1023          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine90_0
   \   000004                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000003   12....       LCALL   ??__xdata_free?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine103_0
   \   000006                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1024          uint8 MQTT_UnPacketPublish(uint8 *rev_data, int8 **topic, uint16 *topic_len, int8 **payload, uint16 *payload_len, uint8 *qos, uint16 *pkt_id)
   \                     MQTT_UnPacketPublish:
   1025          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   741A         MOV     A,#0x1a
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 1,A
   \   00001E   741C         MOV     A,#0x1c
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00002C   7422         MOV     A,#0x22
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ?Subroutine42 & 0xFFFF
   1026          	
   1027          	const int8 flags = rev_data[0] & 0x0F;
   \                     ??CrossCallReturnLabel_65:
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   E0           MOVX    A,@DPTR
   \   000039   540F         ANL     A,#0xf
   \   00003B   F5..         MOV     ?V0 + 8,A
   1028          	uint8 *msgPtr;
   1029          	uint32 remain_len = 0;
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   E4           CLR     A
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   F0           MOVX    @DPTR,A
   1030          
   1031          	const int8 dup = flags & 0x08;
   \   000047   7408         MOV     A,#0x8
   \   000049   55..         ANL     A,?V0 + 8
   \   00004B   F5..         MOV     ?V0 + 10,A
   1032          
   1033          	*qos = (flags & 0x06) >> 1;
   \   00004D   E5..         MOV     A,?V0 + 8
   \   00004F   C3           CLR     C
   \   000050   13           RRC     A
   \   000051   5403         ANL     A,#0x3
   \   000053   C0E0         PUSH    A
   \   000055   7420         MOV     A,#0x20
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00005D   D0E0         POP     A
   \   00005F   12....       LCALL   ?Subroutine51 & 0xFFFF
   1034          	
   1035          	msgPtr = rev_data + MQTT_ReadLength(rev_data + 1, 4, &remain_len) + 1;
   \                     ??CrossCallReturnLabel_78:
   \   000062   8582..       MOV     ?V0 + 12,DPL
   \   000065   8583..       MOV     ?V0 + 13,DPH
   \   000068   78..         MOV     R0,#?V0 + 12
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   7C04         MOV     R4,#0x4
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   A3           INC     DPTR
   \   000076   AA82         MOV     R2,DPL
   \   000078   AB83         MOV     R3,DPH
   \   00007A   12....       LCALL   ??MQTT_ReadLength?relay
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   8A..         MOV     ?V0 + 12,R2
   \   000084   8B..         MOV     ?V0 + 13,R3
   \   000086   E5..         MOV     A,?V0 + 2
   \   000088   25..         ADD     A,?V0 + 12
   \   00008A   F582         MOV     DPL,A
   \   00008C   E5..         MOV     A,?V0 + 3
   \   00008E   35..         ADDC    A,?V0 + 13
   \   000090   F583         MOV     DPH,A
   \   000092   A3           INC     DPTR
   \   000093   8582..       MOV     ?V0 + 2,DPL
   \   000096   8583..       MOV     ?V0 + 3,DPH
   1036          	
   1037          	if(remain_len < 2 || flags & 0x01)							//retain
   \   000099   85..82       MOV     DPL,?XSP + 0
   \   00009C   85..83       MOV     DPH,?XSP + 1
   \   00009F   C3           CLR     C
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   9402         SUBB    A,#0x2
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   9400         SUBB    A,#0x0
   \   0000A7   4006         JC      ??MQTT_UnPacketPublish_0
   \   0000A9   E5..         MOV     A,?V0 + 8
   \   0000AB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000AD   5005         JNC     ??MQTT_UnPacketPublish_1
   1038          		return 255;
   \                     ??MQTT_UnPacketPublish_0:
   \   0000AF   79FF         MOV     R1,#-0x1
   \   0000B1   02....       LJMP    ??MQTT_UnPacketPublish_2 & 0xFFFF
   1039          	
   1040          	*topic_len = (uint16)msgPtr[0] << 8 | msgPtr[1];
   \                     ??MQTT_UnPacketPublish_1:
   \   0000B4   85..82       MOV     DPL,?V0 + 2
   \   0000B7   85..83       MOV     DPH,?V0 + 3
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   85..82       MOV     DPL,?V0 + 0
   \   0000C2   85..83       MOV     DPH,?V0 + 1
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E9           MOV     A,R1
   \   0000C8   12....       LCALL   ?Subroutine51 & 0xFFFF
   1041          	if(remain_len < *topic_len + 2)
   \                     ??CrossCallReturnLabel_79:
   \   0000CB   E8           MOV     A,R0
   \   0000CC   2402         ADD     A,#0x2
   \   0000CE   08           INC     R0
   \   0000CF   08           INC     R0
   \   0000D0   E9           MOV     A,R1
   \   0000D1   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000D4   40D9         JC      ??MQTT_UnPacketPublish_0
   1042          		return 255;
   1043          	
   1044          	if(strstr((int8 *)msgPtr + 2, CMD_TOPIC_PREFIX) != NULL)	//Èç¹ûÊÇÃüÁîÏÂ·¢
   \   0000D6   E5..         MOV     A,?V0 + 2
   \   0000D8   2402         ADD     A,#0x2
   \   0000DA   F5..         MOV     ?V0 + 8,A
   \   0000DC   E5..         MOV     A,?V0 + 3
   \   0000DE   3400         ADDC    A,#0x0
   \   0000E0   F5..         MOV     ?V0 + 9,A
   \   0000E2                ; Setup parameters for call to function strstr
   \   0000E2   7C..         MOV     R4,#`?<Constant "$creq">` & 0xff
   \   0000E4   7D..         MOV     R5,#(`?<Constant "$creq">` >> 8) & 0xff
   \   0000E6   AA..         MOV     R2,?V0 + 8
   \   0000E8   FB           MOV     R3,A
   \   0000E9   12....       LCALL   ??strstr?relay
   \   0000EC   8B..         MOV     ?V0 + 13,R3
   \   0000EE   EA           MOV     A,R2
   \   0000EF   45..         ORL     A,?V0 + 13
   \   0000F1   6005         JZ      ??MQTT_UnPacketPublish_3
   1045          		return MQTT_PKT_CMD;
   \   0000F3   790F         MOV     R1,#0xf
   \   0000F5   02....       LJMP    ??MQTT_UnPacketPublish_2 & 0xFFFF
   1046          	
   1047          	switch(*qos)
   \                     ??MQTT_UnPacketPublish_3:
   \   0000F8   7420         MOV     A,#0x20
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000100   E0           MOVX    A,@DPTR
   \   000101   6008         JZ      ??MQTT_UnPacketPublish_4
   \   000103   14           DEC     A
   \   000104   605A         JZ      ??MQTT_UnPacketPublish_5
   \   000106   14           DEC     A
   \   000107   6057         JZ      ??MQTT_UnPacketPublish_5
   \   000109   80A4         SJMP    ??MQTT_UnPacketPublish_0
   1048          	{
   1049          		case MQTT_QOS_LEVEL0:									// qos0 have no packet identifier
   1050          			
   1051          			if(0 != dup)
   \                     ??MQTT_UnPacketPublish_4:
   \   00010B   E5..         MOV     A,?V0 + 10
   \   00010D   70A0         JNZ     ??MQTT_UnPacketPublish_0
   1052          				return 255;
   1053          
   1054          			*topic = MQTT_MallocBuffer(*topic_len + 1);			//Îªtopic·ÖÅäÄÚ´æ
   \   00010F                ; Setup parameters for call to function __xdata_malloc
   \   00010F   12....       LCALL   ?Subroutine19 & 0xFFFF
   1055          			if(*topic == NULL)
   \                     ??CrossCallReturnLabel_31:
   \   000112   609B         JZ      ??MQTT_UnPacketPublish_0
   1056          				return 255;
   1057          			
   1058          			memset(*topic, 0, *topic_len + 1);
   \   000114                ; Setup parameters for call to function memset
   \   000114   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
   1059          			memcpy(*topic, (int8 *)msgPtr + 2, *topic_len);		//¸´ÖÆÊý¾Ý
   \   000120                ; Setup parameters for call to function memcpy
   \   000120   85..82       MOV     DPL,?V0 + 0
   \   000123   85..83       MOV     DPH,?V0 + 1
   \   000126   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000129   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
   1060          			
   1061          			*payload_len = remain_len - 2 - *topic_len;			//Îªpayload·ÖÅäÄÚ´æ
   \   00012F   85..82       MOV     DPL,?XSP + 0
   \   000132   85..83       MOV     DPH,?XSP + 1
   \   000135   E0           MOVX    A,@DPTR
   \   000136   24FE         ADD     A,#-0x2
   \   000138   12....       LCALL   ?Subroutine10 & 0xFFFF
   1062          			*payload = MQTT_MallocBuffer(*payload_len + 1);
   1063          			if(*payload == NULL)								//Èç¹ûÊ§°Ü
   \                     ??CrossCallReturnLabel_246:
   \   00013B   7006         JNZ     ??MQTT_UnPacketPublish_6
   1064          			{
   1065          				MQTT_FreeBuffer(*topic);						//ÔòÐèÒª°ÑtopicµÄÄÚ´æÊÍ·Åµô
   \                     ??MQTT_UnPacketPublish_7:
   \   00013D                ; Setup parameters for call to function __xdata_free
   \   00013D   12....       LCALL   ?Subroutine34 & 0xFFFF
   1066          				return 255;
   1067          			}
   \                     ??CrossCallReturnLabel_144:
   \   000140   02....       LJMP    ??MQTT_UnPacketPublish_0 & 0xFFFF
   1068          			
   1069          			memset(*payload, 0, *payload_len + 1);
   \                     ??MQTT_UnPacketPublish_6:
   \   000143                ; Setup parameters for call to function memset
   \   000143   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000149   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   1070          			memcpy(*payload, (int8 *)msgPtr + 2 + *topic_len, *payload_len);
   \   00014F                ; Setup parameters for call to function memcpy
   \   00014F   85..82       MOV     DPL,?V0 + 4
   \   000152   85..83       MOV     DPH,?V0 + 5
   \   000155   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000158   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00015B   2402         ADD     A,#0x2
   \   00015D   02....       LJMP    ??MQTT_UnPacketPublish_8 & 0xFFFF
   1071          			
   1072          		break;
   1073          
   1074          		case MQTT_QOS_LEVEL1:
   1075          		case MQTT_QOS_LEVEL2:
   1076          			
   1077          			if(*topic_len + 2 > remain_len)
   \                     ??MQTT_UnPacketPublish_5:
   \   000160   85..82       MOV     DPL,?V0 + 0
   \   000163   85..83       MOV     DPH,?V0 + 1
   \   000166   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000169   85..82       MOV     DPL,?XSP + 0
   \   00016C   85..83       MOV     DPH,?XSP + 1
   \   00016F   EA           MOV     A,R2
   \   000170   2402         ADD     A,#0x2
   \   000172   F8           MOV     R0,A
   \   000173   EB           MOV     A,R3
   \   000174   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000177   5003         JNC     $+5
   \   000179   02....       LJMP    ??MQTT_UnPacketPublish_0 & 0xFFFF
   1078          				return 255;
   1079          			
   1080          			*pkt_id = (uint16)msgPtr[*topic_len + 2] << 8 | msgPtr[*topic_len + 3];
   \   00017C   E5..         MOV     A,?V0 + 2
   \   00017E   2A           ADD     A,R2
   \   00017F   F8           MOV     R0,A
   \   000180   E5..         MOV     A,?V0 + 3
   \   000182   3B           ADDC    A,R3
   \   000183   F9           MOV     R1,A
   \   000184   8882         MOV     DPL,R0
   \   000186   8983         MOV     DPH,R1
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   FB           MOV     R3,A
   \   00018C   8882         MOV     DPL,R0
   \   00018E   8983         MOV     DPH,R1
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   E0           MOVX    A,@DPTR
   \   000194   F8           MOV     R0,A
   \   000195   EB           MOV     A,R3
   \   000196   F9           MOV     R1,A
   \   000197   85..82       MOV     DPL,?V0 + 14
   \   00019A   85..83       MOV     DPH,?V0 + 15
   \   00019D   E8           MOV     A,R0
   \   00019E   F0           MOVX    @DPTR,A
   \   00019F   A3           INC     DPTR
   \   0001A0   E9           MOV     A,R1
   \   0001A1   F0           MOVX    @DPTR,A
   1081          			if(pkt_id == 0)
   \   0001A2   E5..         MOV     A,?V0 + 14
   \   0001A4   45..         ORL     A,?V0 + 15
   \   0001A6   7003         JNZ     $+5
   \   0001A8   02....       LJMP    ??MQTT_UnPacketPublish_0 & 0xFFFF
   1082          				return 255;
   1083          			
   1084          			*topic = MQTT_MallocBuffer(*topic_len + 1);			//Îªtopic·ÖÅäÄÚ´æ
   \   0001AB                ; Setup parameters for call to function __xdata_malloc
   \   0001AB   12....       LCALL   ?Subroutine19 & 0xFFFF
   1085          			if(*topic == NULL)
   \                     ??CrossCallReturnLabel_32:
   \   0001AE   7003         JNZ     $+5
   \   0001B0   02....       LJMP    ??MQTT_UnPacketPublish_0 & 0xFFFF
   1086          				return 255;
   1087          			
   1088          			memset(*topic, 0, *topic_len + 1);
   \   0001B3                ; Setup parameters for call to function memset
   \   0001B3   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B9   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0001BC   12....       LCALL   ?DEALLOC_XSTACK8
   1089          			memcpy(*topic, (int8 *)msgPtr + 2, *topic_len);		//¸´ÖÆÊý¾Ý
   \   0001BF                ; Setup parameters for call to function memcpy
   \   0001BF   85..82       MOV     DPL,?V0 + 0
   \   0001C2   85..83       MOV     DPH,?V0 + 1
   \   0001C5   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001C8   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0001CB   12....       LCALL   ?DEALLOC_XSTACK8
   1090          			
   1091          			*payload_len = remain_len - 4 - *topic_len;
   \   0001CE   85..82       MOV     DPL,?XSP + 0
   \   0001D1   85..83       MOV     DPH,?XSP + 1
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   24FC         ADD     A,#-0x4
   \   0001D7   12....       LCALL   ?Subroutine10 & 0xFFFF
   1092          			*payload = MQTT_MallocBuffer(*payload_len + 1);		//Îªpayload·ÖÅäÄÚ´æ
   1093          			if(*payload == NULL)								//Èç¹ûÊ§°Ü
   \                     ??CrossCallReturnLabel_247:
   \   0001DA   7003         JNZ     $+5
   \   0001DC   02....       LJMP    ??MQTT_UnPacketPublish_7 & 0xFFFF
   1094          			{
   1095          				MQTT_FreeBuffer(*topic);						//ÔòÐèÒª°ÑtopicµÄÄÚ´æÊÍ·Åµô
   1096          				return 255;
   1097          			}
   1098          			
   1099          			memset(*payload, 0, *payload_len + 1);
   \   0001DF                ; Setup parameters for call to function memset
   \   0001DF   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001E2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E5   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0001E8   12....       LCALL   ?DEALLOC_XSTACK8
   1100          			memcpy(*payload, (int8 *)msgPtr + 4 + *topic_len, *payload_len);
   \   0001EB                ; Setup parameters for call to function memcpy
   \   0001EB   85..82       MOV     DPL,?V0 + 4
   \   0001EE   85..83       MOV     DPH,?V0 + 5
   \   0001F1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001F4   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0001F7   2404         ADD     A,#0x4
   \                     ??MQTT_UnPacketPublish_8:
   \   0001F9   FC           MOV     R4,A
   \   0001FA   E9           MOV     A,R1
   \   0001FB   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0001FE   12....       LCALL   ?DEALLOC_XSTACK8
   1101          			
   1102          		break;
   1103          
   1104          		default:
   1105          			return 255;
   1106          	}
   1107          	
   1108          	if(strchr((int8 *)topic, '+') || strchr((int8 *)topic, '#'))
   \   000201                ; Setup parameters for call to function strchr
   \   000201   7C2B         MOV     R4,#0x2b
   \   000203   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000206   6003         JZ      $+5
   \   000208   02....       LJMP    ??MQTT_UnPacketPublish_0 & 0xFFFF
   \   00020B                ; Setup parameters for call to function strchr
   \   00020B   7C23         MOV     R4,#0x23
   \   00020D   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000210   6003         JZ      $+5
   \   000212   02....       LJMP    ??MQTT_UnPacketPublish_0 & 0xFFFF
   1109          		return 255;
   1110          
   1111          	return 0;
   \   000215   7900         MOV     R1,#0x0
   \                     ??MQTT_UnPacketPublish_2:
   \   000217   02....       LJMP    ?Subroutine2 & 0xFFFF
   1112          
   1113          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??strchr?relay
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EA           MOV     A,R2
   \   00000C   45..         ORL     A,?V0 + 1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2401         ADD     A,#0x1
   \   000009   F5..         MOV     ?V0 + 8,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   F5..         MOV     ?V0 + 9,A
   \   000011   78..         MOV     R0,#?V0 + 8
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2401         ADD     A,#0x1
   \   000009   F5..         MOV     ?V0 + 10,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   F5..         MOV     ?V0 + 11,A
   \   000011   78..         MOV     R0,#?V0 + 10
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   28           ADD     A,R0
   \   000006   F8           MOV     R0,A
   \   000007   E5..         MOV     A,?V0 + 3
   \   000009   39           ADDC    A,R1
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   AC..         MOV     R4,?V0 + 8
   \   000002   AD..         MOV     R5,?V0 + 9
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008                REQUIRE ??Subroutine107_0
   \   000008                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   C3           CLR     C
   \   000004   E0           MOVX    A,@DPTR
   \   000005   98           SUBB    A,R0
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   99           SUBB    A,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2401         ADD     A,#0x1
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00000F   8E82         MOV     DPL,R6
   \   000011   8F83         MOV     DPH,R7
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   4B           ORL     A,R3
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   34FF         ADDC    A,#-0x1
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000009   EA           MOV     A,R2
   \   00000A   C3           CLR     C
   \   00000B   98           SUBB    A,R0
   \   00000C   F8           MOV     R0,A
   \   00000D   EB           MOV     A,R3
   \   00000E   99           SUBB    A,R1
   \   00000F   F9           MOV     R1,A
   \   000010   85..82       MOV     DPL,?V0 + 4
   \   000013   85..83       MOV     DPH,?V0 + 5
   \   000016                REQUIRE ??Subroutine108_0
   \   000016                ; // Fall through to label ??Subroutine108_0
   1114          
   1115          //==========================================================
   1116          //	º¯ÊýÃû³Æ£º	MQTT_PacketPublishAck
   1117          //
   1118          //	º¯Êý¹¦ÄÜ£º	Publish AckÏûÏ¢×é°ü
   1119          //
   1120          //	Èë¿Ú²ÎÊý£º	pkt_id£ºpacket id
   1121          //				mqttPacket£º°üÖ¸Õë
   1122          //
   1123          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°ÜÔ­Òò
   1124          //
   1125          //	ËµÃ÷£º		µ±ÊÕµ½µÄPublishÏûÏ¢µÄQoSµÈ¼¶Îª1Ê±£¬ÐèÒªAck»Ø¸´
   1126          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1127          uint1 MQTT_PacketPublishAck(uint16 pkt_id, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPublishAck:
   1128          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
   1129          
   1130          	MQTT_NewBuffer(mqttPacket, 4);
   1131          	if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_252:
   \   000008   7003         JNZ     ??MQTT_PacketPublishAck_0
   1132          		return 1;
   \   00000A   D3           SETB    C
   \   00000B   8008         SJMP    ??CrossCallReturnLabel_0
   1133          	
   1134          /*************************************¹Ì¶¨Í·²¿***********************************************/
   1135          	
   1136          	//¹Ì¶¨Í·²¿----------------------Í·²¿ÏûÏ¢-------------------------------------------------
   1137          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PUBACK << 4;
   \                     ??MQTT_PacketPublishAck_0:
   \   00000D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000010   7440         MOV     A,#0x40
   \   000012   12....       LCALL   ?Subroutine6 & 0xFFFF
   1138          	
   1139          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶È-------------------------------------------------
   1140          	mqttPacket->_data[mqttPacket->_len++] = 2;
   1141          	
   1142          /*************************************¿É±äÍ·²¿***********************************************/
   1143          	
   1144          	//¿É±äÍ·²¿----------------------pkt_id³¤¶È-----------------------------------------------
   1145          	mqttPacket->_data[mqttPacket->_len++] = pkt_id >> 8;
   1146          	mqttPacket->_data[mqttPacket->_len++] = pkt_id & 0xff;
   1147          	
   1148          	return 0;
   \                     ??CrossCallReturnLabel_0:
   \   000015   80..         SJMP    ?Subroutine1
   1149          
   1150          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004   EC           MOV     A,R4
   \   000005   FE           MOV     R6,A
   \   000006   ED           MOV     A,R5
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function MQTT_NewBuffer
   \   000008                ; Setup parameters for call to function MQTT_NewBuffer
   \   000008                ; Setup parameters for call to function MQTT_NewBuffer
   \   000008                ; Setup parameters for call to function MQTT_NewBuffer
   \   000008   7C04         MOV     R4,#0x4
   \   00000A   7D00         MOV     R5,#0x0
   \   00000C   EE           MOV     A,R6
   \   00000D   FA           MOV     R2,A
   \   00000E   EF           MOV     A,R7
   \   00000F   FB           MOV     R3,A
   \   000010                REQUIRE ??Subroutine109_0
   \   000010                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   7402         MOV     A,#0x2
   \   000005   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000008   E5..         MOV     A,?V0 + 1
   \   00000A   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00000D   E5..         MOV     A,?V0 + 0
   \   00000F   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000012   C3           CLR     C
   \   000013   22           RET
   1151          
   1152          //==========================================================
   1153          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketPublishAck
   1154          //
   1155          //	º¯Êý¹¦ÄÜ£º	Publish AckÏûÏ¢½â°ü
   1156          //
   1157          //	Èë¿Ú²ÎÊý£º	rev_data£ºÊÕµ½µÄÊý¾Ý
   1158          //
   1159          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°ÜÔ­Òò
   1160          //
   1161          //	ËµÃ÷£º		
   1162          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1163          uint1 MQTT_UnPacketPublishAck(uint8 *rev_data)
   \                     MQTT_UnPacketPublishAck:
   1164          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1165          
   1166          	if(rev_data[1] != 2)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6402         XRL     A,#0x2
   \   00000C   6003         JZ      ??MQTT_UnPacketPublishAck_0
   1167          		return 1;
   \                     ??MQTT_UnPacketPublishAck_1:
   \   00000E   D3           SETB    C
   \   00000F   8016         SJMP    ??MQTT_UnPacketPublishAck_2
   1168          
   1169          	if(rev_data[2] == MOSQ_MSB(MQTT_PUBLISH_ID) && rev_data[3] == MOSQ_LSB(MQTT_PUBLISH_ID))
   \                     ??MQTT_UnPacketPublishAck_0:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   70F4         JNZ     ??MQTT_UnPacketPublishAck_1
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   640A         XRL     A,#0xa
   \   000024   70E8         JNZ     ??MQTT_UnPacketPublishAck_1
   1170          		return 0;
   \   000026   C3           CLR     C
   \                     ??MQTT_UnPacketPublishAck_2:
   \   000027                REQUIRE ?Subroutine4
   \   000027                ; // Fall through to label ?Subroutine4
   1171          	else
   1172          		return 1;
   1173          
   1174          }
   1175          
   1176          //==========================================================
   1177          //	º¯ÊýÃû³Æ£º	MQTT_PacketPublishRec
   1178          //
   1179          //	º¯Êý¹¦ÄÜ£º	Publish RecÏûÏ¢×é°ü
   1180          //
   1181          //	Èë¿Ú²ÎÊý£º	pkt_id£ºpacket id
   1182          //				mqttPacket£º°üÖ¸Õë
   1183          //
   1184          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°ÜÔ­Òò
   1185          //
   1186          //	ËµÃ÷£º		µ±ÊÕµ½µÄPublishÏûÏ¢µÄQoSµÈ¼¶Îª2Ê±£¬ÏÈÊÕµ½rec
   1187          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1188          uint1 MQTT_PacketPublishRec(uint16 pkt_id, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPublishRec:
   1189          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
   1190          
   1191          	MQTT_NewBuffer(mqttPacket, 4);
   1192          	if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_253:
   \   000008   7003         JNZ     ??MQTT_PacketPublishRec_0
   1193          		return 1;
   \   00000A   D3           SETB    C
   \   00000B   8008         SJMP    ??CrossCallReturnLabel_1
   1194          	
   1195          /*************************************¹Ì¶¨Í·²¿***********************************************/
   1196          	
   1197          	//¹Ì¶¨Í·²¿----------------------Í·²¿ÏûÏ¢-------------------------------------------------
   1198          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PUBREC << 4;
   \                     ??MQTT_PacketPublishRec_0:
   \   00000D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000010   7450         MOV     A,#0x50
   \   000012   12....       LCALL   ?Subroutine6 & 0xFFFF
   1199          	
   1200          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶È-------------------------------------------------
   1201          	mqttPacket->_data[mqttPacket->_len++] = 2;
   1202          	
   1203          /*************************************¿É±äÍ·²¿***********************************************/
   1204          	
   1205          	//¿É±äÍ·²¿----------------------pkt_id³¤¶È-----------------------------------------------
   1206          	mqttPacket->_data[mqttPacket->_len++] = pkt_id >> 8;
   1207          	mqttPacket->_data[mqttPacket->_len++] = pkt_id & 0xff;
   1208          	
   1209          	return 0;
   \                     ??CrossCallReturnLabel_1:
   \   000015                REQUIRE ?Subroutine1
   \   000015                ; // Fall through to label ?Subroutine1
   1210          
   1211          }
   1212          
   1213          //==========================================================
   1214          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketPublishRec
   1215          //
   1216          //	º¯Êý¹¦ÄÜ£º	Publish RecÏûÏ¢½â°ü
   1217          //
   1218          //	Èë¿Ú²ÎÊý£º	rev_data£º½ÓÊÕµ½µÄÊý¾Ý
   1219          //
   1220          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
   1221          //
   1222          //	ËµÃ÷£º		
   1223          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1224          uint1 MQTT_UnPacketPublishRec(uint8 *rev_data)
   \                     MQTT_UnPacketPublishRec:
   1225          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1226          
   1227          	if(rev_data[1] != 2)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6402         XRL     A,#0x2
   \   00000C   6003         JZ      ??MQTT_UnPacketPublishRec_0
   1228          		return 1;
   \                     ??MQTT_UnPacketPublishRec_1:
   \   00000E   D3           SETB    C
   \   00000F   8016         SJMP    ??MQTT_UnPacketPublishRec_2
   1229          
   1230          	if(rev_data[2] == MOSQ_MSB(MQTT_PUBLISH_ID) && rev_data[3] == MOSQ_LSB(MQTT_PUBLISH_ID))
   \                     ??MQTT_UnPacketPublishRec_0:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   70F4         JNZ     ??MQTT_UnPacketPublishRec_1
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   640A         XRL     A,#0xa
   \   000024   70E8         JNZ     ??MQTT_UnPacketPublishRec_1
   1231          		return 0;
   \   000026   C3           CLR     C
   \                     ??MQTT_UnPacketPublishRec_2:
   \   000027   80..         SJMP    ?Subroutine4
   1232          	else
   1233          		return 1;
   1234          
   1235          }
   1236          
   1237          //==========================================================
   1238          //	º¯ÊýÃû³Æ£º	MQTT_PacketPublishRel
   1239          //
   1240          //	º¯Êý¹¦ÄÜ£º	Publish RelÏûÏ¢×é°ü
   1241          //
   1242          //	Èë¿Ú²ÎÊý£º	pkt_id£ºpacket id
   1243          //				mqttPacket£º°üÖ¸Õë
   1244          //
   1245          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°ÜÔ­Òò
   1246          //
   1247          //	ËµÃ÷£º		µ±ÊÕµ½µÄPublishÏûÏ¢µÄQoSµÈ¼¶Îª2Ê±£¬ÏÈÊÕµ½rec£¬ÔÙ»Ø¸´rel
   1248          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1249          uint1 MQTT_PacketPublishRel(uint16 pkt_id, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPublishRel:
   1250          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
   1251          
   1252          	MQTT_NewBuffer(mqttPacket, 4);
   1253          	if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_254:
   \   000008   7003         JNZ     ??MQTT_PacketPublishRel_0
   1254          		return 1;
   \   00000A   D3           SETB    C
   \   00000B   8008         SJMP    ??CrossCallReturnLabel_2
   1255          	
   1256          /*************************************¹Ì¶¨Í·²¿***********************************************/
   1257          	
   1258          	//¹Ì¶¨Í·²¿----------------------Í·²¿ÏûÏ¢-------------------------------------------------
   1259          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PUBREL << 4 | 0x02;
   \                     ??MQTT_PacketPublishRel_0:
   \   00000D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000010   7462         MOV     A,#0x62
   \   000012   12....       LCALL   ?Subroutine6 & 0xFFFF
   1260          	
   1261          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶È-------------------------------------------------
   1262          	mqttPacket->_data[mqttPacket->_len++] = 2;
   1263          	
   1264          /*************************************¿É±äÍ·²¿***********************************************/
   1265          	
   1266          	//¿É±äÍ·²¿----------------------pkt_id³¤¶È-----------------------------------------------
   1267          	mqttPacket->_data[mqttPacket->_len++] = pkt_id >> 8;
   1268          	mqttPacket->_data[mqttPacket->_len++] = pkt_id & 0xff;
   1269          	
   1270          	return 0;
   \                     ??CrossCallReturnLabel_2:
   \   000015   80..         SJMP    ?Subroutine1
   1271          
   1272          }
   1273          
   1274          //==========================================================
   1275          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketPublishRel
   1276          //
   1277          //	º¯Êý¹¦ÄÜ£º	Publish RelÏûÏ¢½â°ü
   1278          //
   1279          //	Èë¿Ú²ÎÊý£º	rev_data£º½ÓÊÕµ½µÄÊý¾Ý
   1280          //
   1281          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
   1282          //
   1283          //	ËµÃ÷£º		
   1284          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1285          uint1 MQTT_UnPacketPublishRel(uint8 *rev_data, uint16 pkt_id)
   \                     MQTT_UnPacketPublishRel:
   1286          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1287          
   1288          	if(rev_data[1] != 2)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6402         XRL     A,#0x2
   \   00000C   6003         JZ      ??MQTT_UnPacketPublishRel_0
   1289          		return 1;
   \                     ??MQTT_UnPacketPublishRel_1:
   \   00000E   D3           SETB    C
   \   00000F   801C         SJMP    ??MQTT_UnPacketPublishRel_2
   1290          
   1291          	if(rev_data[2] == MOSQ_MSB(pkt_id) && rev_data[3] == MOSQ_LSB(pkt_id))
   \                     ??MQTT_UnPacketPublishRel_0:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C0E0         PUSH    A
   \   00001A   ED           MOV     A,R5
   \   00001B   F8           MOV     R0,A
   \   00001C   D0E0         POP     A
   \   00001E   68           XRL     A,R0
   \   00001F   70ED         JNZ     ??MQTT_UnPacketPublishRel_1
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6C           XRL     A,R4
   \   00002A   70E2         JNZ     ??MQTT_UnPacketPublishRel_1
   1292          		return 0;
   \   00002C   C3           CLR     C
   \                     ??MQTT_UnPacketPublishRel_2:
   \   00002D   02....       LJMP    ?Subroutine4 & 0xFFFF
   1293          	else
   1294          		return 1;
   1295          
   1296          }
   1297          
   1298          //==========================================================
   1299          //	º¯ÊýÃû³Æ£º	MQTT_PacketPublishComp
   1300          //
   1301          //	º¯Êý¹¦ÄÜ£º	Publish CompÏûÏ¢×é°ü
   1302          //
   1303          //	Èë¿Ú²ÎÊý£º	pkt_id£ºpacket id
   1304          //				mqttPacket£º°üÖ¸Õë
   1305          //
   1306          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°ÜÔ­Òò
   1307          //
   1308          //	ËµÃ÷£º		µ±ÊÕµ½µÄPublishÏûÏ¢µÄQoSµÈ¼¶Îª2Ê±£¬ÏÈÊÕµ½rec£¬ÔÙ»Ø¸´rel
   1309          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1310          uint1 MQTT_PacketPublishComp(uint16 pkt_id, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPublishComp:
   1311          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
   1312          
   1313          	MQTT_NewBuffer(mqttPacket, 4);
   1314          	if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_255:
   \   000008   7003         JNZ     ??MQTT_PacketPublishComp_0
   1315          		return 1;
   \   00000A   D3           SETB    C
   \   00000B   8008         SJMP    ??CrossCallReturnLabel_3
   1316          	
   1317          /*************************************¹Ì¶¨Í·²¿***********************************************/
   1318          	
   1319          	//¹Ì¶¨Í·²¿----------------------Í·²¿ÏûÏ¢-------------------------------------------------
   1320          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PUBCOMP << 4;
   \                     ??MQTT_PacketPublishComp_0:
   \   00000D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000010   7470         MOV     A,#0x70
   \   000012   12....       LCALL   ?Subroutine6 & 0xFFFF
   1321          	
   1322          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶È-------------------------------------------------
   1323          	mqttPacket->_data[mqttPacket->_len++] = 2;
   1324          	
   1325          /*************************************¿É±äÍ·²¿***********************************************/
   1326          	
   1327          	//¿É±äÍ·²¿----------------------pkt_id³¤¶È-----------------------------------------------
   1328          	mqttPacket->_data[mqttPacket->_len++] = pkt_id >> 8;
   1329          	mqttPacket->_data[mqttPacket->_len++] = pkt_id & 0xff;
   1330          	
   1331          	return 0;
   \                     ??CrossCallReturnLabel_3:
   \   000015   02....       LJMP    ?Subroutine1 & 0xFFFF
   1332          
   1333          }
   1334          
   1335          //==========================================================
   1336          //	º¯ÊýÃû³Æ£º	MQTT_UnPacketPublishComp
   1337          //
   1338          //	º¯Êý¹¦ÄÜ£º	Publish CompÏûÏ¢½â°ü
   1339          //
   1340          //	Èë¿Ú²ÎÊý£º	rev_data£º½ÓÊÕµ½µÄÊý¾Ý
   1341          //
   1342          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
   1343          //
   1344          //	ËµÃ÷£º		
   1345          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1346          uint1 MQTT_UnPacketPublishComp(uint8 *rev_data)
   \                     MQTT_UnPacketPublishComp:
   1347          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1348          
   1349          	if(rev_data[1] != 2)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6402         XRL     A,#0x2
   \   00000C   6003         JZ      ??MQTT_UnPacketPublishComp_0
   1350          		return 1;
   \                     ??MQTT_UnPacketPublishComp_1:
   \   00000E   D3           SETB    C
   \   00000F   8016         SJMP    ??MQTT_UnPacketPublishComp_2
   1351          
   1352          	if(rev_data[2] == MOSQ_MSB(MQTT_PUBLISH_ID) && rev_data[3] == MOSQ_LSB(MQTT_PUBLISH_ID))
   \                     ??MQTT_UnPacketPublishComp_0:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   70F4         JNZ     ??MQTT_UnPacketPublishComp_1
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   640A         XRL     A,#0xa
   \   000024   70E8         JNZ     ??MQTT_UnPacketPublishComp_1
   1353          		return 0;
   \   000026   C3           CLR     C
   \                     ??MQTT_UnPacketPublishComp_2:
   \   000027   02....       LJMP    ?Subroutine4 & 0xFFFF
   1354          	else
   1355          		return 1;
   1356          
   1357          }
   1358          
   1359          //==========================================================
   1360          //	º¯ÊýÃû³Æ£º	MQTT_PacketPing
   1361          //
   1362          //	º¯Êý¹¦ÄÜ£º	ÐÄÌøÇëÇó×é°ü
   1363          //
   1364          //	Èë¿Ú²ÎÊý£º	mqttPacket£º°üÖ¸Õë
   1365          //
   1366          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
   1367          //
   1368          //	ËµÃ÷£º		
   1369          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1370          uint1 MQTT_PacketPing(MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPing:
   1371          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1372          
   1373          	MQTT_NewBuffer(mqttPacket, 2);
   \   000009                ; Setup parameters for call to function MQTT_NewBuffer
   \   000009   7C02         MOV     R4,#0x2
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   1374          	if(mqttPacket->_data == NULL)
   \                     ??CrossCallReturnLabel_257:
   \   000010   7003         JNZ     ??MQTT_PacketPing_0
   1375          		return 1;
   \   000012   D3           SETB    C
   \   000013   8008         SJMP    ??CrossCallReturnLabel_15
   1376          	
   1377          /*************************************¹Ì¶¨Í·²¿***********************************************/
   1378          	
   1379          	//¹Ì¶¨Í·²¿----------------------Í·²¿ÏûÏ¢-------------------------------------------------
   1380          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PINGREQ << 4;
   \                     ??MQTT_PacketPing_0:
   \   000015   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000018   74C0         MOV     A,#-0x40
   \   00001A   12....       LCALL   ?Subroutine12 & 0xFFFF
   1381          	
   1382          	//¹Ì¶¨Í·²¿----------------------Ê£Óà³¤¶È-------------------------------------------------
   1383          	mqttPacket->_data[mqttPacket->_len++] = 0;
   1384          	
   1385          	return 0;
   \                     ??CrossCallReturnLabel_15:
   \   00001D   02....       LJMP    ?Subroutine3 & 0xFFFF
   1386          
   1387          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_NewBuffer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_NewBuffer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_DeleteBuffer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_DeleteBuffer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_DumpLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_DumpLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_ReadLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_ReadLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketRecv?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketRecv

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketConnect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketConnect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketDisConnect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketDisConnect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketConnectAck?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketConnectAck

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketSaveData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketSaveData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketSaveBinData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketSaveBinData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketCmdResp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketCmdResp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketSubscribe?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketSubscribe

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketSubscribe?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketSubscribe

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketUnSubscribe?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketUnSubscribe

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketUnSubscribe?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketUnSubscribe

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketPublish?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketPublish

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketPublish?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketPublish

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketPublishAck?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketPublishAck

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketPublishAck?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketPublishAck

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketPublishRec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketPublishRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketPublishRec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketPublishRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketPublishRel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketPublishRel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketPublishRel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketPublishRel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketPublishComp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketPublishComp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_UnPacketPublishComp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_UnPacketPublishComp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MQTT_PacketPing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MQTT_PacketPing

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "$creq">`:
   \   000000   24637265     DB "$creq"
   \            7100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "$dp">`:
   \   000000   24647000     DB "$dp"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "{\\"ds_id\\":\\"%s\\"}">`:
   \   000000   7B226473     DB "{\"ds_id\":\"%s\"}"
   \            5F696422
   \            3A222573
   \            227D00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "$crsp/">`:
   \   000000   24637273     DB "$crsp/"
   \            702F00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_200000:
   \   000000   00002000     DD 2097152

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     MQTT_DeleteBuffer            0      0     38
       -> __xdata_free            0      0     20
     MQTT_DumpLength              1      0     38
     MQTT_NewBuffer               0      0     44
       -> __xdata_malloc          0      0     32
     MQTT_PacketCmdResp           0      0     32
       -> strlen                  0      0     40
       -> strlen                  0      0     40
       -> __xdata_malloc          0      0     40
       -> memset                  0      0     44
       -> memcpy                  0      0     44
       -> strncat                 0      0     44
       -> strlen                  0      0     52
       -> MQTT_PacketPublish      0      0     60
       -> __xdata_free            0      0     40
     MQTT_PacketConnect           1      0     42
       -> strlen                  0      0     56
       -> strlen                  0      0     56
       -> strlen                  0      0     56
       -> strlen                  0      0     56
       -> strlen                  0      0     56
       -> MQTT_NewBuffer          0      0     56
       -> memset                  0      0     60
       -> MQTT_DumpLength         0      0     56
       -> MQTT_DeleteBuffer       0      0     56
       -> strncat                 0      0     60
       -> strlen                  0      0     56
       -> strncat                 0      0     60
       -> strlen                  0      0     56
       -> strncat                 0      0     60
       -> strlen                  0      0     56
       -> strncat                 0      0     60
       -> strlen                  0      0     56
       -> strncat                 0      0     60
     MQTT_PacketDisConnect        0      0      9
       -> MQTT_NewBuffer          0      0     18
     MQTT_PacketPing              0      0      9
       -> MQTT_NewBuffer          0      0     18
     MQTT_PacketPublish           1      0     60
       -> MQTT_NewBuffer          0      0     52
       -> memset                  0      0     56
       -> MQTT_NewBuffer          0      0     52
       -> memset                  0      0     56
       -> MQTT_DumpLength         0      0     52
       -> MQTT_DeleteBuffer       0      0     52
       -> strncat                 0      0     56
       -> memcpy                  0      0     56
       -> memcpy                  0      0     56
     MQTT_PacketPublishAck        1      0     10
       -> MQTT_NewBuffer          0      0     20
     MQTT_PacketPublishComp       1      0     10
       -> MQTT_NewBuffer          0      0     20
     MQTT_PacketPublishRec        1      0     10
       -> MQTT_NewBuffer          0      0     20
     MQTT_PacketPublishRel        1      0     10
       -> MQTT_NewBuffer          0      0     20
     MQTT_PacketSaveBinData       1      0     34
       -> strlen                  0      0     44
       -> __xdata_malloc          0      0     44
       -> sprintf                 0      0     48
       -> strlen                  0      0     44
       -> __xdata_malloc          0      0     44
       -> __xdata_free            0      0     44
       -> memcpy                  0      0     48
       -> MQTT_PacketPublish      0      0     64
       -> __xdata_free            0      0     44
       -> __xdata_free            0      0     44
     MQTT_PacketSaveData          1      0     28
       -> MQTT_PacketPublish      0      0     48
     MQTT_PacketSubscribe         1      0     26
       -> strlen                  0      0     42
       -> MQTT_NewBuffer          0      0     42
       -> MQTT_DumpLength         0      0     42
       -> MQTT_DeleteBuffer       0      0     42
       -> strlen                  0      0     42
       -> strncat                 0      0     46
     MQTT_PacketUnSubscribe       1      0     24
       -> strlen                  0      0     40
       -> MQTT_NewBuffer          0      0     40
       -> MQTT_DumpLength         0      0     40
       -> MQTT_DeleteBuffer       0      0     40
       -> strlen                  0      0     40
       -> strncat                 0      0     44
     MQTT_ReadLength              0      0     44
     MQTT_UnPacketCmd             0      0     26
       -> strchr                  0      0     40
       -> MQTT_ReadLength         0      0     44
       -> __xdata_malloc          0      0     40
       -> memset                  0      0     44
       -> memcpy                  0      0     44
       -> __xdata_malloc          0      0     40
       -> __xdata_free            0      0     40
       -> memset                  0      0     44
       -> memcpy                  0      0     44
     MQTT_UnPacketConnectAck      2      0      0
     MQTT_UnPacketPublish         1      0     38
       -> MQTT_ReadLength         0      0     56
       -> strstr                  0      0     52
       -> __xdata_malloc          0      0     52
       -> memset                  0      0     56
       -> memcpy                  0      0     56
       -> __xdata_malloc          0      0     52
       -> __xdata_free            0      0     52
       -> memset                  0      0     56
       -> memcpy                  0      0     56
       -> __xdata_malloc          0      0     52
       -> memset                  0      0     56
       -> memcpy                  0      0     56
       -> __xdata_malloc          0      0     52
       -> memset                  0      0     56
       -> memcpy                  0      0     56
       -> strchr                  0      0     52
       -> strchr                  0      0     52
     MQTT_UnPacketPublishAck      2      0      0
     MQTT_UnPacketPublishComp     2      0      0
     MQTT_UnPacketPublishRec      2      0      0
     MQTT_UnPacketPublishRel      3      0      0
     MQTT_UnPacketRecv            2      0     14
       -> MQTT_ReadLength         0      0     28
       -> strstr                  0      0     24
     MQTT_UnPacketSubscribe       2      0      0
     MQTT_UnPacketUnSubscribe     2      0      0


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     MQTT_NewBuffer                    142
     ?Subroutine0                        5
     ?Subroutine50                      13
     ??Subroutine89_0                    8
     ?Subroutine38                      17
     ?Subroutine28                      33
     ?Subroutine52                       4
     ?Subroutine87                       8
     ?Subroutine74                       5
     ??Subroutine100_0                   6
     ??Subroutine103_0                   4
     ?Subroutine85                       6
     ??Subroutine106_0                   4
     ?Subroutine84                       6
     ??Subroutine110_0                   5
     MQTT_DeleteBuffer                  55
     ?Subroutine53                      10
     ?Subroutine1                        5
     MQTT_DumpLength                    76
     ??Subroutine91_0                    8
     MQTT_ReadLength                   166
     ??Subroutine92_0                   10
     MQTT_UnPacketRecv                 212
     ?Subroutine51                       8
     MQTT_PacketConnect                610
     ?Subroutine55                      12
     ?Subroutine54                      13
     ?Subroutine35                       4
     ?Subroutine76                       7
     ?Subroutine27                       6
     ?Subroutine18                       4
     ?Subroutine17                       6
     ?Subroutine9                        9
     ?Subroutine61                      26
     ?Subroutine83                       5
     ?Subroutine7                        3
     ??Subroutine93_0                   31
     ?Subroutine44                       4
     ?Subroutine70                      10
     ?Subroutine43                       8
     ?Subroutine80                       8
     ?Subroutine57                      10
     ?Subroutine41                       8
     ??Subroutine95_0                    8
     ??Subroutine96_0                    4
     ?Subroutine78                       7
     ??Subroutine97_0                    8
     ?Subroutine42                       8
     ??Subroutine98_0                    4
     ??Subroutine99_0                   12
     ?Subroutine24                       3
     ??Subroutine101_0                   6
     ??Subroutine102_0                  15
     ?Subroutine79                       6
     ??Subroutine104_0                   5
     ?Subroutine45                       6
     ??Subroutine105_0                   4
     ?Subroutine86                       4
     ?Subroutine88                       9
     MQTT_PacketDisConnect              29
     ?Subroutine3                        5
     ?Subroutine66                       3
     ?Subroutine82                       6
     ??Subroutine109_0                   7
     ?Subroutine8                       24
     ?Subroutine12                       9
     ?Subroutine62                      27
     MQTT_UnPacketConnectAck            49
     ?Subroutine4                        7
     MQTT_PacketSaveData               140
     ?Subroutine16                      19
     ?Subroutine73                      11
     MQTT_PacketSaveBinData            330
     ??Subroutine94_0                    6
     ?Subroutine64                       7
     MQTT_UnPacketCmd                  290
     ??Subroutine107_0                   4
     ?Subroutine21                      13
     ?Subroutine72                       9
     ??Subroutine108_0                  34
     MQTT_PacketCmdResp                203
     ?Subroutine5                        5
     MQTT_PacketSubscribe              179
     ?Subroutine46                       6
     ?Subroutine56                      12
     ?Subroutine47                      16
     ?Subroutine40                      12
     ?Subroutine20                      21
     ?Subroutine15                      35
     ?Subroutine14                      41
     ?Subroutine67                       8
     ?Subroutine65                       4
     ?Subroutine81                      12
     ?Subroutine13                      52
     ?Subroutine11                      32
     ?Subroutine63                      15
     ?Subroutine39                       5
     ?Subroutine68                       6
     ?Subroutine30                      18
     ?Subroutine71                      10
     ?Subroutine69                      12
     ?Subroutine77                       6
     MQTT_UnPacketSubscribe             54
     MQTT_PacketUnSubscribe            143
     MQTT_UnPacketUnSubscribe           34
     ?Subroutine59                       4
     ?Subroutine26                       3
     MQTT_PacketPublish                557
     ?Subroutine2                        2
     ?Subroutine58                      19
     ?Subroutine31                       6
     ?Subroutine29                      13
     ?Subroutine22                      12
     ?Subroutine48                      10
     ?Subroutine34                       4
     ??Subroutine90_0                    7
     ?Subroutine75                       6
     MQTT_UnPacketPublish              538
     ?Subroutine60                      15
     ?Subroutine49                       9
     ?Subroutine37                      20
     ?Subroutine36                      20
     ?Subroutine33                      13
     ?Subroutine32                       8
     ?Subroutine23                      10
     ?Subroutine19                      32
     ?Subroutine10                      22
     MQTT_PacketPublishAck              23
     ?Subroutine25                      16
     ?Subroutine6                       20
     MQTT_UnPacketPublishAck            39
     MQTT_PacketPublishRec              21
     MQTT_UnPacketPublishRec            41
     MQTT_PacketPublishRel              23
     MQTT_UnPacketPublishRel            48
     MQTT_PacketPublishComp             24
     MQTT_UnPacketPublishComp           42
     MQTT_PacketPing                    32
     ??MQTT_NewBuffer?relay              6
     ??MQTT_DeleteBuffer?relay           6
     ??MQTT_DumpLength?relay             6
     ??MQTT_ReadLength?relay             6
     ??MQTT_UnPacketRecv?relay           6
     ??MQTT_PacketConnect?relay          6
     ??MQTT_PacketDisConnect?relay       6
     ??MQTT_UnPacketConnectAck?relay     6
     ??MQTT_PacketSaveData?relay         6
     ??MQTT_PacketSaveBinData?relay      6
     ??MQTT_UnPacketCmd?relay            6
     ??MQTT_PacketCmdResp?relay          6
     ??MQTT_PacketSubscribe?relay        6
     ??MQTT_UnPacketSubscribe?relay      6
     ??MQTT_PacketUnSubscribe?relay      6
     ??MQTT_UnPacketUnSubscribe?relay    6
     ??MQTT_PacketPublish?relay          6
     ??MQTT_UnPacketPublish?relay        6
     ??MQTT_PacketPublishAck?relay       6
     ??MQTT_UnPacketPublishAck?relay     6
     ??MQTT_PacketPublishRec?relay       6
     ??MQTT_UnPacketPublishRec?relay     6
     ??MQTT_PacketPublishRel?relay       6
     ??MQTT_UnPacketPublishRel?relay     6
     ??MQTT_PacketPublishComp?relay      6
     ??MQTT_UnPacketPublishComp?relay    6
     ??MQTT_PacketPing?relay             6
     ?<Constant "$creq">                 6
     ?<Constant "">                      1
     ?<Constant "$dp">                   4
     ?<Constant "{\"ds_id\":\"%s\"}">   15
     ?<Constant "$crsp/">                7
     __Constant_200000                   4

 
 5 338 bytes in segment BANKED_CODE
   162 bytes in segment BANK_RELAYS
    37 bytes in segment XDATA_ROM_C
 
 5 500 bytes of CODE  memory
    33 bytes of CONST memory (+ 4 bytes shared)

Errors: none
Warnings: 3
